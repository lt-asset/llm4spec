{
    "data": [
        {
            "condition": "true ? methodResultID==true",
            "parameters": [
                ""
            ],
            "signature": "isIndian()",
            "tag": "@return True.",
            "tag_type": "returnTag",
            "prompt": "Signature: empty()\nJavadoc: @return true if the stack is currently empty\nCondition: receiverObjectID.isEmpty() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: all_null(java.util.List a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: a.stream().allMatch(e -> e==null) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: all_null(java.lang.Object[] a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: java.util.Arrays.asList(a).stream().allMatch(e -> e==null)?methodResultID==true : methodResultID==false\n\n###\n\nSignature: forAllDo(java.lang.Iterable collection,org.apache.commons.collections4.Closure closure)\nJavadoc: @return closure\nCondition: true?methodResultID.equals(closure)\n\n###\n\nSignature: forAllDo(java.util.Iterator iterator,org.apache.commons.collections4.Closure closure)\nJavadoc: @return closure\nCondition: true?methodResultID.equals(closure)\n\n###\n\nSignature: isInDanger(int range,float threat)\nJavadoc: @return True if a threat was found.\nCondition: receiverObjectID.searchForDanger(range, threat)!=null ? methodResultID==true\n\n###\n\nSignature: owns(net.sf.freecol.common.model.Ownable ownable)\nJavadoc: @return True if the Ownable is ours.\nCondition: receiverObjectID.equals(ownable.getOwner()) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: intersectionCardinalityAtLeast(java.util.BitSet a,java.util.BitSet b,int i)\nJavadoc: @return true iff size(a intersect b) \u2265 i\nCondition: receiverObjectID.intersectionCardinality(a,b)>=i ? methodResultID==true\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: isNullOrEmpty(java.lang.String string)\nJavadoc: @return true if the string is null or is the empty string\nCondition: string==null || string.isEmpty() ? methodResultID==true\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: sizeIsEmpty(java.lang.Object object)\nJavadoc: @return true if empty or null\nCondition: object.isEmpty() || object==null ? methodResultID==true\n\n###\n\nSignature: isEmpty(java.util.Collection coll)\nJavadoc: @return true if empty or null\nCondition: coll.isEmpty() || coll==null ? methodResultID==true\n\n###\n\nSignature: isEuropean()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: isREF()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: add(E object, int count)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E element)\nJavadoc: @return Always true.\nCondition: true? methodResultID==true\n\n###\n\nSignature: removeLRU(org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry entry)\nJavadoc: @return true\nCondition: true ? methodResultID==true\n\n###\n\nSignature: isIndian()\nJavadoc: @return True.\nCondition: "
        },
        {
            "condition": "receiverObjectID.searchForDanger(range, threat)!=null ? methodResultID==true",
            "parameters": [
                "'range'",
                " 'threat'"
            ],
            "signature": "isInDanger(int range,float threat)",
            "tag": "@return True if a threat was found.",
            "tag_type": "returnTag",
            "prompt": "Signature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: intersectionCardinalityAtLeast(java.util.BitSet a,java.util.BitSet b,int i)\nJavadoc: @return true iff size(a intersect b) \u2265 i\nCondition: receiverObjectID.intersectionCardinality(a,b)>=i ? methodResultID==true\n\n###\n\nSignature: isEmpty(java.util.Collection coll)\nJavadoc: @return true if empty or null\nCondition: coll.isEmpty() || coll==null ? methodResultID==true\n\n###\n\nSignature: sizeIsEmpty(java.lang.Object object)\nJavadoc: @return true if empty or null\nCondition: object.isEmpty() || object==null ? methodResultID==true\n\n###\n\nSignature: removeEdge(java.lang.Object e)\nJavadoc: @return true if and only if the graph contained the specified edge.\nCondition: receiverObjectID.containsEdge(e) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: contains(org.graphstream.graph.Node node)\nJavadoc: @return true if the path contains the node.\nCondition: receiverObjectID.getNodePath().contains(node) ? methodResultID==true\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: empty()\nJavadoc: @return true if the stack is currently empty\nCondition: receiverObjectID.isEmpty() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: getDead()\nJavadoc: @return True if this Player is dead.\nCondition: receiverObjectID.isDead()?methodResultID==true:methodResultID==false\n\n###\n\nSignature: isDead()\nJavadoc: @return True if this Player is dead.\nCondition: receiverObjectID.getDead()?methodResultID==true:methodResultID==false\n\n###\n\nSignature: hasSpaceLeft()\nJavadoc: @return True if there is free space.\nCondition: receiverObjectID.getSpaceLeft() > 0 ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: contains(org.graphstream.graph.Edge edge)\nJavadoc: @return true if the path contains the edge.\nCondition: receiverObjectID.getEdgePath().contains(edge) ? methodResultID==true\n\n###\n\nSignature: isEuropean()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: isREF()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: removeLRU(org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry entry)\nJavadoc: @return true\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E element)\nJavadoc: @return Always true.\nCondition: true? methodResultID==true\n\n###\n\nSignature: isIndian()\nJavadoc: @return True.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object, int count)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: isInDanger(int range,float threat)\nJavadoc: @return True if a threat was found.\nCondition: "
        },
        {
            "condition": "true ? methodResultID==a-b",
            "parameters": [
                "'a'",
                " 'b'"
            ],
            "signature": "subAndCheck(long a,long b)",
            "tag": "@return the difference a - b.",
            "tag_type": "returnTag",
            "prompt": "Signature: div(int x,int y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: mulAndCheck(long a,long b)\nJavadoc: @return the product a * b.\nCondition: true ? methodResultID==a*b\n\n###\n\nSignature: evaluate(double[] values, int begin, int length)\nJavadoc: @return the sum of the values or 0 if length = 0.\nCondition: length==0 ? methodResultID==0\n\n###\n\nSignature: evaluate(double[] values, double[] weights, int begin, int length)\nJavadoc: @return the sum of the values or 0 if length = 0.\nCondition: length==0 ? methodResultID==0\n\n###\n\nSignature: addAndCheck(int x,int y)\nJavadoc: @return the sum x+y\nCondition: true ? methodResultID==x+y\n\n###\n\nSignature: gt(double d1, double d2)\nJavadoc: @return whether d1 > d2.\nCondition: d1>d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: gte(double d1, double d2)\nJavadoc: @return whether d1 > d2.\nCondition: d1>d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: lt(double d1, double d2)\nJavadoc: @return whether d1 < d2.\nCondition: d1<d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: ne(double d1, double d2)\nJavadoc: @return whether d1 and d2 are non-equal.\nCondition: d1!=d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: addAndCheck(long a,long b)\nJavadoc: @return the sum a+b\nCondition: true ? methodResultID==a+b\n\n###\n\nSignature: min(double a,double b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(float a,float b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(long a,long b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(int a,int b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: max(long a,long b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(double a,double b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(float a,float b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(int a,int b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: lte(double d1, double d2)\nJavadoc: @return whether d1 <= d2.\nCondition: d1<=d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: subAndCheck(int x,int y)\nJavadoc: @return the difference x - y.\nCondition: true ? methodResultID==x-y\n\n###\n\nSignature: subAndCheck(long a,long b)\nJavadoc: @return the difference a - b.\nCondition: "
        },
        {
            "condition": "string==null || string.isEmpty() ? methodResultID==true",
            "parameters": [
                "'string'"
            ],
            "signature": "isNullOrEmpty(java.lang.String string)",
            "tag": "@return true if the string is null or is the empty string",
            "tag_type": "returnTag",
            "prompt": "Signature: firstNonNull(java.lang.Object first,java.lang.Object second)\nJavadoc: @return first if it is non-null; otherwise second if it is non-null\nCondition: first != null ? methodResultID == first ; first == null && second != null ? methodResultID == second\n\n###\n\nSignature: convert(java.lang.Object a)\nJavadoc: @return the converted value; is null if and only if a is null\nCondition: a==null ? methodResultID==null : methodResultID!=null\n\n###\n\nSignature: add(E object)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object, int count)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: isIndian()\nJavadoc: @return True.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: empty()\nJavadoc: @return true if the stack is currently empty\nCondition: receiverObjectID.isEmpty() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: removeLRU(org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry entry)\nJavadoc: @return true\nCondition: true ? methodResultID==true\n\n###\n\nSignature: isEuropean()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: isREF()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: emptyIfNull(java.util.Collection collection)\nJavadoc: @return an empty collection if the argument is null\nCondition: collection==null ? methodResultID.equals(org.apache.commons.collections4.CollectionUtils.emptyCollection())\n\n###\n\nSignature: getParameter(java.lang.String parameter)\nJavadoc: @return The parameter value (empty string if not set).\nCondition: !receiverObjectID.hasParameter(parameter) ? methodResultID.equals(\"\")\n\n###\n\nSignature: all_null(java.util.List a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: a.stream().allMatch(e -> e==null) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: all_null(java.lang.Object[] a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: java.util.Arrays.asList(a).stream().allMatch(e -> e==null)?methodResultID==true : methodResultID==false\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: nullToEmpty(java.lang.String string)\nJavadoc: @return string itself if it is non-null; \"\" if it is null\nCondition: string!=null ? methodResultID.equals(string) : methodResultID.equals(\"\") \n\n###\n\nSignature: emptyToNull(java.lang.String string)\nJavadoc: @return string itself if it is nonempty; null if it is empty or null\nCondition: string==null || string.isEmpty() ? methodResultID==null : methodResultID.equals(string)\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: isEmpty(java.util.Collection coll)\nJavadoc: @return true if empty or null\nCondition: coll.isEmpty() || coll==null ? methodResultID==true\n\n###\n\nSignature: sizeIsEmpty(java.lang.Object object)\nJavadoc: @return true if empty or null\nCondition: object.isEmpty() || object==null ? methodResultID==true\n\n###\n\nSignature: isNullOrEmpty(java.lang.String string)\nJavadoc: @return true if the string is null or is the empty string\nCondition: "
        },
        {
            "condition": "true?methodResultID.equals(s)",
            "parameters": [
                "'s'"
            ],
            "signature": "asRegex(java.lang.String s)",
            "tag": "@return its argument",
            "tag_type": "returnTag",
            "prompt": "Signature: lshift(int x,int y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: emptyBag()\nJavadoc: @return an empty Bag\nCondition: true ? methodResultID.equals(receiverObjectID.EMPTY_BAG)\n\n###\n\nSignature: forAllDo(java.lang.Iterable collection,org.apache.commons.collections4.Closure closure)\nJavadoc: @return closure\nCondition: true?methodResultID.equals(closure)\n\n###\n\nSignature: forAllDo(java.util.Iterator iterator,org.apache.commons.collections4.Closure closure)\nJavadoc: @return closure\nCondition: true?methodResultID.equals(closure)\n\n###\n\nSignature: rshiftSigned(long x,long y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: rshiftSigned(int x,int y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: getFromSet(java.util.Set set,java.lang.Object key)\nJavadoc: @return the object in this set that is equal to key, or null\nCondition: true?(methodResultID==key||methodResultID==null)\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference,java.lang.String errorMessageTemplate,java.lang.Object[] errorMessageArgs)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: firstNonNull(java.lang.Object first,java.lang.Object second)\nJavadoc: @return first if it is non-null; otherwise second if it is non-null\nCondition: first != null ? methodResultID == first ; first == null && second != null ? methodResultID == second\n\n###\n\nSignature: rshiftUnsigned(int x,int y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: rshiftUnsigned(long x,long y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: emptyToNull(java.lang.String string)\nJavadoc: @return string itself if it is nonempty; null if it is empty or null\nCondition: string==null || string.isEmpty() ? methodResultID==null : methodResultID.equals(string)\n\n###\n\nSignature: emptyIfNull(java.util.Collection collection)\nJavadoc: @return an empty collection if the argument is null\nCondition: collection==null ? methodResultID.equals(org.apache.commons.collections4.CollectionUtils.emptyCollection())\n\n###\n\nSignature: getType()\nJavadoc: @return This.\nCondition: true ? methodResultID==receiverObjectID\n\n###\n\nSignature: doBackward(java.lang.Object b)\nJavadoc: @return the converted instance; must not be null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: doForward(java.lang.Object a)\nJavadoc: @return the converted instance; must not be null\nCondition: true?(methodResultID==null)==false\n\n###\n\nSignature: getParameter(java.lang.String parameter)\nJavadoc: @return The parameter value (empty string if not set).\nCondition: !receiverObjectID.hasParameter(parameter) ? methodResultID.equals(\"\")\n\n###\n\nSignature: nullToEmpty(java.lang.String string)\nJavadoc: @return string itself if it is non-null; \"\" if it is null\nCondition: string!=null ? methodResultID.equals(string) : methodResultID.equals(\"\") \n\n###\n\nSignature: asRegex(java.lang.String s,int groups)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: asRegex(java.lang.String s)\nJavadoc: @return its argument\nCondition: "
        },
        {
            "condition": "a<=b ? methodResultID==a : methodResultID==b",
            "parameters": [
                "'a'",
                " 'b'"
            ],
            "signature": "min(float a,float b)",
            "tag": "@return a if a is lesser or equal to b, b otherwise",
            "tag_type": "returnTag",
            "prompt": "Signature: mod_positive(long x,long y)\nJavadoc: @return x % y, where the result is constrained to be positive\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: mod_positive(int x,int y)\nJavadoc: @return x % y, where the result is constrained to be positive\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: firstNonNull(java.lang.Object first,java.lang.Object second)\nJavadoc: @return first if it is non-null; otherwise second if it is non-null\nCondition: first != null ? methodResultID == first ; first == null && second != null ? methodResultID == second\n\n###\n\nSignature: rshiftUnsigned(int x,int y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: rshiftUnsigned(long x,long y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: bitwiseOr(int x,int y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseOr(long x,long y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: rshiftSigned(int x,int y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: rshiftSigned(long x,long y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: gte(double d1, double d2)\nJavadoc: @return whether d1 > d2.\nCondition: d1>d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: gt(double d1, double d2)\nJavadoc: @return whether d1 > d2.\nCondition: d1>d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: lte(double d1, double d2)\nJavadoc: @return whether d1 <= d2.\nCondition: d1<=d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: lt(double d1, double d2)\nJavadoc: @return whether d1 < d2.\nCondition: d1<d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: max(long a,long b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(float a,float b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(int a,int b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(double a,double b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: min(int a,int b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(double a,double b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(long a,long b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(float a,float b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: "
        },
        {
            "condition": "true ? (methodResultID==null)==false",
            "parameters": [
                "'key'"
            ],
            "signature": "load(java.lang.Object key)",
            "tag": "@return the value associated with key; must not be null",
            "tag_type": "returnTag",
            "prompt": "Signature: asRegex(java.lang.String s,int groups)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: asRegex(java.lang.String s)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: emptyBag()\nJavadoc: @return an empty Bag\nCondition: true ? methodResultID.equals(receiverObjectID.EMPTY_BAG)\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: getParameter(java.lang.String parameter)\nJavadoc: @return The parameter value (empty string if not set).\nCondition: !receiverObjectID.hasParameter(parameter) ? methodResultID.equals(\"\")\n\n###\n\nSignature: emptyToNull(java.lang.String string)\nJavadoc: @return string itself if it is nonempty; null if it is empty or null\nCondition: string==null || string.isEmpty() ? methodResultID==null : methodResultID.equals(string)\n\n###\n\nSignature: emptyIfNull(java.util.Collection collection)\nJavadoc: @return an empty collection if the argument is null\nCondition: collection==null ? methodResultID.equals(org.apache.commons.collections4.CollectionUtils.emptyCollection())\n\n###\n\nSignature: doBackward(java.lang.Object b)\nJavadoc: @return the converted instance; must not be null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: doForward(java.lang.Object a)\nJavadoc: @return the converted instance; must not be null\nCondition: true?(methodResultID==null)==false\n\n###\n\nSignature: nullToEmpty(java.lang.String string)\nJavadoc: @return string itself if it is non-null; \"\" if it is null\nCondition: string!=null ? methodResultID.equals(string) : methodResultID.equals(\"\") \n\n###\n\nSignature: verifyNotNull(java.lang.Object reference)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference,java.lang.String errorMessageTemplate,java.lang.Object[] errorMessageArgs)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: firstNonNull(java.lang.Object first,java.lang.Object second)\nJavadoc: @return first if it is non-null; otherwise second if it is non-null\nCondition: first != null ? methodResultID == first ; first == null && second != null ? methodResultID == second\n\n###\n\nSignature: getEuropeNameKey()\nJavadoc: @return A name key, or null if Europe is null.\nCondition: receiverObjectID.getEurope()==null ? methodResultID==null\n\n###\n\nSignature: convert(java.lang.Object a)\nJavadoc: @return the converted value; is null if and only if a is null\nCondition: a==null ? methodResultID==null : methodResultID!=null\n\n###\n\nSignature: get(java.lang.Object key)\nJavadoc: @return the value to which this map maps the specified key, or null if the map contains no mapping for this key.\nCondition: receiverObjectID.containsKey(key)==false ? methodResultID==null\n\n###\n\nSignature: reload(java.lang.Object key,java.lang.Object oldValue)\nJavadoc: @return the future new value associated with key; must not be null, must not return null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: getFromSet(java.util.Set set,java.lang.Object key)\nJavadoc: @return the object in this set that is equal to key, or null\nCondition: true?(methodResultID==key||methodResultID==null)\n\n###\n\nSignature: load(java.lang.Object key)\nJavadoc: @return the value associated with key; must not be null\nCondition: "
        },
        {
            "condition": "true?methodResultID==x%y",
            "parameters": [
                "'x'",
                " 'y'"
            ],
            "signature": "mod_positive(long x,long y)",
            "tag": "@return x % y, where the result is constrained to be positive",
            "tag_type": "returnTag",
            "prompt": "Signature: bitwiseAnd(int x,int y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: bitwiseOr(long x,long y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseOr(int x,int y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: min(float a,float b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(double a,double b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(long a,long b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(int a,int b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: max(double a,double b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(long a,long b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(float a,float b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(int a,int b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: mul(double x,double y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(long x,long y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(int x,int y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: div(double x,double y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(int x,int y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(long x,long y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: mod(long x,long y)\nJavadoc: @return x % y\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: mod(int x,int y)\nJavadoc: @return x % y\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: mod_positive(int x,int y)\nJavadoc: @return x % y, where the result is constrained to be positive\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: mod_positive(long x,long y)\nJavadoc: @return x % y, where the result is constrained to be positive\nCondition: "
        },
        {
            "condition": "true?methodResultID.equals(receiverObjectID.EMPTY_QUEUE)",
            "parameters": [
                ""
            ],
            "signature": "emptyQueue()",
            "tag": "@return an empty Queue",
            "tag_type": "returnTag",
            "prompt": "Signature: empty()\nJavadoc: @return a new empty FluentIterable\nCondition: true ? methodResultID.isEmpty()==true\n\n###\n\nSignature: firstNonNull(java.lang.Object first,java.lang.Object second)\nJavadoc: @return first if it is non-null; otherwise second if it is non-null\nCondition: first != null ? methodResultID == first ; first == null && second != null ? methodResultID == second\n\n###\n\nSignature: size(java.lang.Object object)\nJavadoc: @return the size of the specified collection or 0 if the object was null\nCondition: object==null ? methodResultID == 0\n\n###\n\nSignature: removeLRU(org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry entry)\nJavadoc: @return true\nCondition: true ? methodResultID==true\n\n###\n\nSignature: isEuropean()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: isREF()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference,java.lang.String errorMessageTemplate,java.lang.Object[] errorMessageArgs)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: emptyCollection()\nJavadoc: @return immutable empty collection\nCondition: true?methodResultID.equals(receiverObjectID.EMPTY_COLLECTION)\n\n###\n\nSignature: forAllDo(java.lang.Iterable collection,org.apache.commons.collections4.Closure closure)\nJavadoc: @return closure\nCondition: true?methodResultID.equals(closure)\n\n###\n\nSignature: forAllDo(java.util.Iterator iterator,org.apache.commons.collections4.Closure closure)\nJavadoc: @return closure\nCondition: true?methodResultID.equals(closure)\n\n###\n\nSignature: isEmpty(java.util.Collection coll)\nJavadoc: @return true if empty or null\nCondition: coll.isEmpty() || coll==null ? methodResultID==true\n\n###\n\nSignature: sizeIsEmpty(java.lang.Object object)\nJavadoc: @return true if empty or null\nCondition: object.isEmpty() || object==null ? methodResultID==true\n\n###\n\nSignature: nullToEmpty(java.lang.String string)\nJavadoc: @return string itself if it is non-null; \"\" if it is null\nCondition: string!=null ? methodResultID.equals(string) : methodResultID.equals(\"\") \n\n###\n\nSignature: emptyToNull(java.lang.String string)\nJavadoc: @return string itself if it is nonempty; null if it is empty or null\nCondition: string==null || string.isEmpty() ? methodResultID==null : methodResultID.equals(string)\n\n###\n\nSignature: empty()\nJavadoc: @return true if the stack is currently empty\nCondition: receiverObjectID.isEmpty() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: emptyIfNull(java.util.Collection collection)\nJavadoc: @return an empty collection if the argument is null\nCondition: collection==null ? methodResultID.equals(org.apache.commons.collections4.CollectionUtils.emptyCollection())\n\n###\n\nSignature: emptySortedBag()\nJavadoc: @return an empty sorted Bag\nCondition: true ? methodResultID.equals(receiverObjectID.EMPTY_SORTED_BAG)\n\n###\n\nSignature: emptyBag()\nJavadoc: @return an empty Bag\nCondition: true ? methodResultID.equals(receiverObjectID.EMPTY_BAG)\n\n###\n\nSignature: emptyQueue()\nJavadoc: @return an empty Queue\nCondition: "
        },
        {
            "condition": "object.isEmpty() || object==null ? methodResultID==true",
            "parameters": [
                "'object'"
            ],
            "signature": "sizeIsEmpty(java.lang.Object object)",
            "tag": "@return true if empty or null",
            "tag_type": "returnTag",
            "prompt": "Signature: firstNonNull(java.lang.Object first,java.lang.Object second)\nJavadoc: @return first if it is non-null; otherwise second if it is non-null\nCondition: first != null ? methodResultID == first ; first == null && second != null ? methodResultID == second\n\n###\n\nSignature: hasSpaceLeft()\nJavadoc: @return True if there is free space.\nCondition: receiverObjectID.getSpaceLeft() > 0 ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: nullToEmpty(java.lang.String string)\nJavadoc: @return string itself if it is non-null; \"\" if it is null\nCondition: string!=null ? methodResultID.equals(string) : methodResultID.equals(\"\") \n\n###\n\nSignature: add(E element)\nJavadoc: @return Always true.\nCondition: true? methodResultID==true\n\n###\n\nSignature: add(E object)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object, int count)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: emptyIfNull(java.util.Collection collection)\nJavadoc: @return an empty collection if the argument is null\nCondition: collection==null ? methodResultID.equals(org.apache.commons.collections4.CollectionUtils.emptyCollection())\n\n###\n\nSignature: empty()\nJavadoc: @return true if the stack is currently empty\nCondition: receiverObjectID.isEmpty() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: isIndian()\nJavadoc: @return True.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: isREF()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: isEuropean()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: emptyToNull(java.lang.String string)\nJavadoc: @return string itself if it is nonempty; null if it is empty or null\nCondition: string==null || string.isEmpty() ? methodResultID==null : methodResultID.equals(string)\n\n###\n\nSignature: removeLRU(org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry entry)\nJavadoc: @return true\nCondition: true ? methodResultID==true\n\n###\n\nSignature: all_null(java.util.List a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: a.stream().allMatch(e -> e==null) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: all_null(java.lang.Object[] a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: java.util.Arrays.asList(a).stream().allMatch(e -> e==null)?methodResultID==true : methodResultID==false\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: isNullOrEmpty(java.lang.String string)\nJavadoc: @return true if the string is null or is the empty string\nCondition: string==null || string.isEmpty() ? methodResultID==true\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: isEmpty(java.util.Collection coll)\nJavadoc: @return true if empty or null\nCondition: coll.isEmpty() || coll==null ? methodResultID==true\n\n###\n\nSignature: sizeIsEmpty(java.lang.Object object)\nJavadoc: @return true if empty or null\nCondition: "
        },
        {
            "condition": "true?methodResultID.equals(closure)",
            "parameters": [
                "'collection'",
                " 'closure'"
            ],
            "signature": "forAllDo(java.lang.Iterable collection,org.apache.commons.collections4.Closure closure)",
            "tag": "@return closure",
            "tag_type": "returnTag",
            "prompt": "Signature: forAllButLastDo(java.lang.Iterable collection,org.apache.commons.collections4.Closure closure)\nJavadoc: @return the last element in the collection, or null if either collection or closure is null\nCondition: (collection==null || closure==null) ? methodResultID==null : collection.get(collection.size() - 1)\n\n###\n\nSignature: add(E object)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object, int count)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: getType()\nJavadoc: @return This.\nCondition: true ? methodResultID==receiverObjectID\n\n###\n\nSignature: isREF()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: isEuropean()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: emptyBag()\nJavadoc: @return an empty Bag\nCondition: true ? methodResultID.equals(receiverObjectID.EMPTY_BAG)\n\n###\n\nSignature: getUnknownObjectBehavior()\nJavadoc: @return FixedOrderComparator.UnknownObjectBehavior\nCondition: true ? methodResultID.equals(org.apache.commons.collections4.comparators.FixedOrderComparator.UnknownObjectBehavior)\n\n###\n\nSignature: rshiftSigned(int x,int y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: rshiftSigned(long x,long y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: emptyQueue()\nJavadoc: @return an empty Queue\nCondition: true?methodResultID.equals(receiverObjectID.EMPTY_QUEUE)\n\n###\n\nSignature: lshift(int x,int y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: lshift(long x,long y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: add(E element)\nJavadoc: @return Always true.\nCondition: true? methodResultID==true\n\n###\n\nSignature: emptyCollection()\nJavadoc: @return immutable empty collection\nCondition: true?methodResultID.equals(receiverObjectID.EMPTY_COLLECTION)\n\n###\n\nSignature: asRegex(java.lang.String s,int groups)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: asRegex(java.lang.String s)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: isIndian()\nJavadoc: @return True.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: removeLRU(org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry entry)\nJavadoc: @return true\nCondition: true ? methodResultID==true\n\n###\n\nSignature: forAllDo(java.util.Iterator iterator,org.apache.commons.collections4.Closure closure)\nJavadoc: @return closure\nCondition: true?methodResultID.equals(closure)\n\n###\n\nSignature: forAllDo(java.lang.Iterable collection,org.apache.commons.collections4.Closure closure)\nJavadoc: @return closure\nCondition: "
        },
        {
            "condition": "true?methodResultID==x<<y",
            "parameters": [
                "'x'",
                " 'y'"
            ],
            "signature": "lshift(int x,int y)",
            "tag": "@return x << y",
            "tag_type": "returnTag",
            "prompt": "Signature: max(long a,long b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: mod(long x,long y)\nJavadoc: @return x % y\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: mod(int x,int y)\nJavadoc: @return x % y\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: div(int x,int y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(double x,double y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(long x,long y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: bitwiseXor(int x,int y)\nJavadoc: @return x ^ y\nCondition: true?methodResultID==(x^y)\n\n###\n\nSignature: bitwiseXor(long x,long y)\nJavadoc: @return x ^ y\nCondition: true?methodResultID==(x^y)\n\n###\n\nSignature: bitwiseAnd(long x,long y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: bitwiseAnd(int x,int y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: mul(long x,long y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(int x,int y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(double x,double y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: bitwiseOr(int x,int y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseOr(long x,long y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: rshiftUnsigned(long x,long y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: rshiftUnsigned(int x,int y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: rshiftSigned(int x,int y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: rshiftSigned(long x,long y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: lshift(long x,long y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: lshift(int x,int y)\nJavadoc: @return x << y\nCondition: "
        },
        {
            "condition": "receiverObjectID.contains(object) ? methodResultID==receiverObjectID.indexOf(object)+1 : methodResultID==-1",
            "parameters": [
                "'object'"
            ],
            "signature": "search(java.lang.Object object)",
            "tag": "@return the 1-based depth into the stack of the object, or -1 if not found",
            "tag_type": "returnTag",
            "prompt": "Signature: max(long a,long b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(float a,float b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: lt(double d1, double d2)\nJavadoc: @return whether d1 < d2.\nCondition: d1<d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: min(float a,float b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(int a,int b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(double a,double b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(long a,long b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: forAllButLastDo(java.util.Iterator iterator,org.apache.commons.collections4.Closure closure)\nJavadoc: @return the last element in the collection, or null if either iterator or closure is null\nCondition: iterator==null || closure==null ? methodResultID==null\n\n###\n\nSignature: asRegex(java.lang.String s,int groups)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: asRegex(java.lang.String s)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: evaluate(double[] values, int begin, int length)\nJavadoc: @return the sum of the values or 0 if length = 0.\nCondition: length==0 ? methodResultID==0\n\n###\n\nSignature: evaluate(double[] values, double[] weights, int begin, int length)\nJavadoc: @return the sum of the values or 0 if length = 0.\nCondition: length==0 ? methodResultID==0\n\n###\n\nSignature: size(java.lang.Object object)\nJavadoc: @return the size of the specified collection or 0 if the object was null\nCondition: object==null ? methodResultID == 0\n\n###\n\nSignature: forAllButLastDo(java.lang.Iterable collection,org.apache.commons.collections4.Closure closure)\nJavadoc: @return the last element in the collection, or null if either collection or closure is null\nCondition: (collection==null || closure==null) ? methodResultID==null : collection.get(collection.size() - 1)\n\n###\n\nSignature: getFromSet(java.util.Set set,java.lang.Object key)\nJavadoc: @return the object in this set that is equal to key, or null\nCondition: true?(methodResultID==key||methodResultID==null)\n\n###\n\nSignature: firstNonNull(java.lang.Object first,java.lang.Object second)\nJavadoc: @return first if it is non-null; otherwise second if it is non-null\nCondition: first != null ? methodResultID == first ; first == null && second != null ? methodResultID == second\n\n###\n\nSignature: side(org.apache.commons.math3.geometry.partitioning.Hyperplane<S> hyperplane)\nJavadoc: @return one of Side#PLUS Side.PLUS, Side#MINUS Side.MINUS, Side#BOTH Side.BOTH or Side#HYPER Side.HYPER (the latter result can occur only if the tree contains only one cut hyperplane).\nCondition: methodResultID.equals(Side.PLUS) || methodResultID.equals(Side.MINUS) || methodResultID.equals(Side.BOTH) || methodResultID.equals(Side.HYPER)\n\n###\n\nSignature: empty()\nJavadoc: @return true if the stack is currently empty\nCondition: receiverObjectID.isEmpty() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: peek()\nJavadoc: @return the top item on the stack\nCondition: true ? methodResultID.equals(receiverObjectID.peek())\n\n###\n\nSignature: peek(int n)\nJavadoc: @return the n'th item on the stack, zero relative\nCondition: true ? methodResultID.equals(receiverObjectID.get(receiverObjectID.size() - n)-1)\n\n###\n\nSignature: search(java.lang.Object object)\nJavadoc: @return the 1-based depth into the stack of the object, or -1 if not found\nCondition: "
        },
        {
            "condition": "count==0 ? methodResultID.equals(\"\")",
            "parameters": [
                "'string'",
                " 'count'"
            ],
            "signature": "repeat(java.lang.String string,int count)",
            "tag": "@return a string containing string repeated count times (the empty string if count is zero)",
            "tag_type": "returnTag",
            "prompt": "Signature: isEmpty(java.util.Collection coll)\nJavadoc: @return true if empty or null\nCondition: coll.isEmpty() || coll==null ? methodResultID==true\n\n###\n\nSignature: sizeIsEmpty(java.lang.Object object)\nJavadoc: @return true if empty or null\nCondition: object.isEmpty() || object==null ? methodResultID==true\n\n###\n\nSignature: bitwiseOr(long x,long y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseOr(int x,int y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: emptySortedBag()\nJavadoc: @return an empty sorted Bag\nCondition: true ? methodResultID.equals(receiverObjectID.EMPTY_SORTED_BAG)\n\n###\n\nSignature: emptyIfNull(java.util.Collection collection)\nJavadoc: @return an empty collection if the argument is null\nCondition: collection==null ? methodResultID.equals(org.apache.commons.collections4.CollectionUtils.emptyCollection())\n\n###\n\nSignature: convert(java.lang.Object a)\nJavadoc: @return the converted value; is null if and only if a is null\nCondition: a==null ? methodResultID==null : methodResultID!=null\n\n###\n\nSignature: all_null(java.util.List a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: a.stream().allMatch(e -> e==null) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: all_null(java.lang.Object[] a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: java.util.Arrays.asList(a).stream().allMatch(e -> e==null)?methodResultID==true : methodResultID==false\n\n###\n\nSignature: size(java.lang.Object object)\nJavadoc: @return the size of the specified collection or 0 if the object was null\nCondition: object==null ? methodResultID == 0\n\n###\n\nSignature: emptyBag()\nJavadoc: @return an empty Bag\nCondition: true ? methodResultID.equals(receiverObjectID.EMPTY_BAG)\n\n###\n\nSignature: getParameter(java.lang.String parameter)\nJavadoc: @return The parameter value (empty string if not set).\nCondition: !receiverObjectID.hasParameter(parameter) ? methodResultID.equals(\"\")\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: evaluate(double[] values, double[] weights, int begin, int length)\nJavadoc: @return the sum of the values or 0 if length = 0.\nCondition: length==0 ? methodResultID==0\n\n###\n\nSignature: evaluate(double[] values, int begin, int length)\nJavadoc: @return the sum of the values or 0 if length = 0.\nCondition: length==0 ? methodResultID==0\n\n###\n\nSignature: isNullOrEmpty(java.lang.String string)\nJavadoc: @return true if the string is null or is the empty string\nCondition: string==null || string.isEmpty() ? methodResultID==true\n\n###\n\nSignature: nullToEmpty(java.lang.String string)\nJavadoc: @return string itself if it is non-null; \"\" if it is null\nCondition: string!=null ? methodResultID.equals(string) : methodResultID.equals(\"\") \n\n###\n\nSignature: emptyToNull(java.lang.String string)\nJavadoc: @return string itself if it is nonempty; null if it is empty or null\nCondition: string==null || string.isEmpty() ? methodResultID==null : methodResultID.equals(string)\n\n###\n\nSignature: repeat(java.lang.String string,int count)\nJavadoc: @return a string containing string repeated count times (the empty string if count is zero)\nCondition: "
        },
        {
            "condition": "true ? methodResultID==false",
            "parameters": [
                ""
            ],
            "signature": "isREF()",
            "tag": "@return False.",
            "tag_type": "returnTag",
            "prompt": "Signature: intersectionCardinalityAtLeast(java.util.BitSet a,java.util.BitSet b,java.util.BitSet c,int i)\nJavadoc: @return true iff size(a intersect b intersect c) \u2265 i\nCondition: receiverObjectID.intersectionCardinality(a,b,c)>=i ? methodResultID==true\n\n###\n\nSignature: getUnitCapacity()\nJavadoc: @return Integer.MAX_VALUE, denoting no effective limit.\nCondition: true ? methodResultID==Integer.MAX_VALUE\n\n###\n\nSignature: isInDanger(int range,float threat)\nJavadoc: @return True if a threat was found.\nCondition: receiverObjectID.searchForDanger(range, threat)!=null ? methodResultID==true\n\n###\n\nSignature: intersectionCardinalityAtLeast(java.util.BitSet a,java.util.BitSet b,int i)\nJavadoc: @return true iff size(a intersect b) \u2265 i\nCondition: receiverObjectID.intersectionCardinality(a,b)>=i ? methodResultID==true\n\n###\n\nSignature: empty()\nJavadoc: @return true if the stack is currently empty\nCondition: receiverObjectID.isEmpty() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: all_null(java.lang.Object[] a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: java.util.Arrays.asList(a).stream().allMatch(e -> e==null)?methodResultID==true : methodResultID==false\n\n###\n\nSignature: all_null(java.util.List a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: a.stream().allMatch(e -> e==null) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: emptyCollection()\nJavadoc: @return immutable empty collection\nCondition: true?methodResultID.equals(receiverObjectID.EMPTY_COLLECTION)\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: isNullOrEmpty(java.lang.String string)\nJavadoc: @return true if the string is null or is the empty string\nCondition: string==null || string.isEmpty() ? methodResultID==true\n\n###\n\nSignature: sizeIsEmpty(java.lang.Object object)\nJavadoc: @return true if empty or null\nCondition: object.isEmpty() || object==null ? methodResultID==true\n\n###\n\nSignature: isEmpty(java.util.Collection coll)\nJavadoc: @return true if empty or null\nCondition: coll.isEmpty() || coll==null ? methodResultID==true\n\n###\n\nSignature: add(E object, int count)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E element)\nJavadoc: @return Always true.\nCondition: true? methodResultID==true\n\n###\n\nSignature: removeLRU(org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry entry)\nJavadoc: @return true\nCondition: true ? methodResultID==true\n\n###\n\nSignature: isIndian()\nJavadoc: @return True.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: isEuropean()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: isREF()\nJavadoc: @return False.\nCondition: "
        },
        {
            "condition": "length==0 ? methodResultID==0",
            "parameters": [
                "'values'",
                " 'weights'",
                " 'begin'",
                " 'length'"
            ],
            "signature": "evaluate(double[] values, double[] weights, int begin, int length)",
            "tag": "@return the sum of the values or 0 if length = 0.",
            "tag_type": "returnTag",
            "prompt": "Signature: logicalOr(long x,long y)\nJavadoc: @return the logical or of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalOr(int x,int y)\nJavadoc: @return the logical or of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: all_null(java.util.List a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: a.stream().allMatch(e -> e==null) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: all_null(java.lang.Object[] a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: java.util.Arrays.asList(a).stream().allMatch(e -> e==null)?methodResultID==true : methodResultID==false\n\n###\n\nSignature: convert(java.lang.Object a)\nJavadoc: @return the converted value; is null if and only if a is null\nCondition: a==null ? methodResultID==null : methodResultID!=null\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: max(float a,float b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(double a,double b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(long a,long b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(int a,int b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: min(int a,int b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(double a,double b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(float a,float b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(long a,long b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: repeat(java.lang.String string,int count)\nJavadoc: @return a string containing string repeated count times (the empty string if count is zero)\nCondition: count==0 ? methodResultID.equals(\"\")\n\n###\n\nSignature: size(java.lang.Object object)\nJavadoc: @return the size of the specified collection or 0 if the object was null\nCondition: object==null ? methodResultID == 0\n\n###\n\nSignature: addAndCheck(int x,int y)\nJavadoc: @return the sum x+y\nCondition: true ? methodResultID==x+y\n\n###\n\nSignature: addAndCheck(long a,long b)\nJavadoc: @return the sum a+b\nCondition: true ? methodResultID==a+b\n\n###\n\nSignature: evaluate(double[] values, int begin, int length)\nJavadoc: @return the sum of the values or 0 if length = 0.\nCondition: length==0 ? methodResultID==0\n\n###\n\nSignature: evaluate(double[] values, double[] weights, int begin, int length)\nJavadoc: @return the sum of the values or 0 if length = 0.\nCondition: "
        },
        {
            "condition": "true?methodResultID==x*y",
            "parameters": [
                "'x'",
                " 'y'"
            ],
            "signature": "mul(int x,int y)",
            "tag": "@return x * y",
            "tag_type": "returnTag",
            "prompt": "Signature: rshiftUnsigned(long x,long y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: rshiftUnsigned(int x,int y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: addAndCheck(int x,int y)\nJavadoc: @return the sum x+y\nCondition: true ? methodResultID==x+y\n\n###\n\nSignature: bitwiseOr(long x,long y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseOr(int x,int y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: mod(int x,int y)\nJavadoc: @return x % y\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: mod(long x,long y)\nJavadoc: @return x % y\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: lshift(int x,int y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: lshift(long x,long y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: div(int x,int y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(double x,double y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(long x,long y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: bitwiseXor(long x,long y)\nJavadoc: @return x ^ y\nCondition: true?methodResultID==(x^y)\n\n###\n\nSignature: bitwiseXor(int x,int y)\nJavadoc: @return x ^ y\nCondition: true?methodResultID==(x^y)\n\n###\n\nSignature: mulAndCheck(long a,long b)\nJavadoc: @return the product a * b.\nCondition: true ? methodResultID==a*b\n\n###\n\nSignature: bitwiseAnd(int x,int y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: bitwiseAnd(long x,long y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: mulAndCheck(int x,int y)\nJavadoc: @return the product x * y.\nCondition: true ? methodResultID==x*y\n\n###\n\nSignature: mul(long x,long y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(double x,double y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(int x,int y)\nJavadoc: @return x * y\nCondition: "
        },
        {
            "condition": "length==0 ? methodResultID==0",
            "parameters": [
                "'values'",
                " 'begin'",
                " 'length'"
            ],
            "signature": "evaluate(double[] values, int begin, int length)",
            "tag": "@return the sum of the values or 0 if length = 0.",
            "tag_type": "returnTag",
            "prompt": "Signature: logicalOr(long x,long y)\nJavadoc: @return the logical or of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalOr(int x,int y)\nJavadoc: @return the logical or of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: all_null(java.util.List a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: a.stream().allMatch(e -> e==null) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: all_null(java.lang.Object[] a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: java.util.Arrays.asList(a).stream().allMatch(e -> e==null)?methodResultID==true : methodResultID==false\n\n###\n\nSignature: convert(java.lang.Object a)\nJavadoc: @return the converted value; is null if and only if a is null\nCondition: a==null ? methodResultID==null : methodResultID!=null\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: max(float a,float b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(long a,long b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(double a,double b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(int a,int b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: min(float a,float b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(double a,double b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(int a,int b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(long a,long b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: repeat(java.lang.String string,int count)\nJavadoc: @return a string containing string repeated count times (the empty string if count is zero)\nCondition: count==0 ? methodResultID.equals(\"\")\n\n###\n\nSignature: size(java.lang.Object object)\nJavadoc: @return the size of the specified collection or 0 if the object was null\nCondition: object==null ? methodResultID == 0\n\n###\n\nSignature: addAndCheck(int x,int y)\nJavadoc: @return the sum x+y\nCondition: true ? methodResultID==x+y\n\n###\n\nSignature: addAndCheck(long a,long b)\nJavadoc: @return the sum a+b\nCondition: true ? methodResultID==a+b\n\n###\n\nSignature: evaluate(double[] values, double[] weights, int begin, int length)\nJavadoc: @return the sum of the values or 0 if length = 0.\nCondition: length==0 ? methodResultID==0\n\n###\n\nSignature: evaluate(double[] values, int begin, int length)\nJavadoc: @return the sum of the values or 0 if length = 0.\nCondition: "
        },
        {
            "condition": "true?(methodResultID==key||methodResultID==null)",
            "parameters": [
                "'set'",
                " 'key'"
            ],
            "signature": "getFromSet(java.util.Set set,java.lang.Object key)",
            "tag": "@return the object in this set that is equal to key, or null",
            "tag_type": "returnTag",
            "prompt": "Signature: asRegex(java.lang.String s,int groups)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: asRegex(java.lang.String s)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: forAllButLastDo(java.lang.Iterable collection,org.apache.commons.collections4.Closure closure)\nJavadoc: @return the last element in the collection, or null if either collection or closure is null\nCondition: (collection==null || closure==null) ? methodResultID==null : collection.get(collection.size() - 1)\n\n###\n\nSignature: emptyBag()\nJavadoc: @return an empty Bag\nCondition: true ? methodResultID.equals(receiverObjectID.EMPTY_BAG)\n\n###\n\nSignature: all_null(java.util.List a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: a.stream().allMatch(e -> e==null) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: all_null(java.lang.Object[] a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: java.util.Arrays.asList(a).stream().allMatch(e -> e==null)?methodResultID==true : methodResultID==false\n\n###\n\nSignature: nullToEmpty(java.lang.String string)\nJavadoc: @return string itself if it is non-null; \"\" if it is null\nCondition: string!=null ? methodResultID.equals(string) : methodResultID.equals(\"\") \n\n###\n\nSignature: getEuropeNameKey()\nJavadoc: @return A name key, or null if Europe is null.\nCondition: receiverObjectID.getEurope()==null ? methodResultID==null\n\n###\n\nSignature: size(java.lang.Object object)\nJavadoc: @return the size of the specified collection or 0 if the object was null\nCondition: object==null ? methodResultID == 0\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: doForward(java.lang.Object a)\nJavadoc: @return the converted instance; must not be null\nCondition: true?(methodResultID==null)==false\n\n###\n\nSignature: doBackward(java.lang.Object b)\nJavadoc: @return the converted instance; must not be null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: reload(java.lang.Object key,java.lang.Object oldValue)\nJavadoc: @return the future new value associated with key; must not be null, must not return null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference,java.lang.String errorMessageTemplate,java.lang.Object[] errorMessageArgs)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: emptyIfNull(java.util.Collection collection)\nJavadoc: @return an empty collection if the argument is null\nCondition: collection==null ? methodResultID.equals(org.apache.commons.collections4.CollectionUtils.emptyCollection())\n\n###\n\nSignature: firstNonNull(java.lang.Object first,java.lang.Object second)\nJavadoc: @return first if it is non-null; otherwise second if it is non-null\nCondition: first != null ? methodResultID == first ; first == null && second != null ? methodResultID == second\n\n###\n\nSignature: get(java.lang.Object key)\nJavadoc: @return the value to which this map maps the specified key, or null if the map contains no mapping for this key.\nCondition: receiverObjectID.containsKey(key)==false ? methodResultID==null\n\n###\n\nSignature: load(java.lang.Object key)\nJavadoc: @return the value associated with key; must not be null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: getFromSet(java.util.Set set,java.lang.Object key)\nJavadoc: @return the object in this set that is equal to key, or null\nCondition: "
        },
        {
            "condition": "true ? methodResultID==true",
            "parameters": [
                "'object'"
            ],
            "signature": "add(E object)",
            "tag": "@return true, always.",
            "tag_type": "returnTag",
            "prompt": "Signature: all_null(java.lang.Object[] a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: java.util.Arrays.asList(a).stream().allMatch(e -> e==null)?methodResultID==true : methodResultID==false\n\n###\n\nSignature: all_null(java.util.List a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: a.stream().allMatch(e -> e==null) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference,java.lang.String errorMessageTemplate,java.lang.Object[] errorMessageArgs)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: isNullOrEmpty(java.lang.String string)\nJavadoc: @return true if the string is null or is the empty string\nCondition: string==null || string.isEmpty() ? methodResultID==true\n\n###\n\nSignature: hasSpaceLeft()\nJavadoc: @return True if there is free space.\nCondition: receiverObjectID.getSpaceLeft() > 0 ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: owns(net.sf.freecol.common.model.Ownable ownable)\nJavadoc: @return True if the Ownable is ours.\nCondition: receiverObjectID.equals(ownable.getOwner()) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: empty()\nJavadoc: @return true if the stack is currently empty\nCondition: receiverObjectID.isEmpty() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: isInDanger(int range,float threat)\nJavadoc: @return True if a threat was found.\nCondition: receiverObjectID.searchForDanger(range, threat)!=null ? methodResultID==true\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: isEmpty(java.util.Collection coll)\nJavadoc: @return true if empty or null\nCondition: coll.isEmpty() || coll==null ? methodResultID==true\n\n###\n\nSignature: sizeIsEmpty(java.lang.Object object)\nJavadoc: @return true if empty or null\nCondition: object.isEmpty() || object==null ? methodResultID==true\n\n###\n\nSignature: isREF()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: isEuropean()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: removeLRU(org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry entry)\nJavadoc: @return true\nCondition: true ? methodResultID==true\n\n###\n\nSignature: isIndian()\nJavadoc: @return True.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E element)\nJavadoc: @return Always true.\nCondition: true? methodResultID==true\n\n###\n\nSignature: add(E object, int count)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object)\nJavadoc: @return true, always.\nCondition: "
        },
        {
            "condition": "true?methodResultID==x%y",
            "parameters": [
                "'x'",
                " 'y'"
            ],
            "signature": "mod(long x,long y)",
            "tag": "@return x % y",
            "tag_type": "returnTag",
            "prompt": "Signature: max(double a,double b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(float a,float b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(long a,long b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: bitwiseXor(long x,long y)\nJavadoc: @return x ^ y\nCondition: true?methodResultID==(x^y)\n\n###\n\nSignature: bitwiseXor(int x,int y)\nJavadoc: @return x ^ y\nCondition: true?methodResultID==(x^y)\n\n###\n\nSignature: lshift(int x,int y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: lshift(long x,long y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: bitwiseAnd(long x,long y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: bitwiseAnd(int x,int y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: bitwiseOr(long x,long y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseOr(int x,int y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: mul(double x,double y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(int x,int y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(long x,long y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: div(int x,int y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(long x,long y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(double x,double y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: mod_positive(long x,long y)\nJavadoc: @return x % y, where the result is constrained to be positive\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: mod_positive(int x,int y)\nJavadoc: @return x % y, where the result is constrained to be positive\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: mod(int x,int y)\nJavadoc: @return x % y\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: mod(long x,long y)\nJavadoc: @return x % y\nCondition: "
        },
        {
            "condition": "(coll==null)==false && (coll.isEmpty())==false ? true",
            "parameters": [
                "'coll'"
            ],
            "signature": "isNotEmpty(java.util.Collection coll)",
            "tag": "@return true if non-null and non-empty",
            "tag_type": "returnTag",
            "prompt": "Signature: hasSpaceLeft()\nJavadoc: @return True if there is free space.\nCondition: receiverObjectID.getSpaceLeft() > 0 ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference,java.lang.String errorMessageTemplate,java.lang.Object[] errorMessageArgs)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: add(E element)\nJavadoc: @return Always true.\nCondition: true? methodResultID==true\n\n###\n\nSignature: isIndian()\nJavadoc: @return True.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: removeLRU(org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry entry)\nJavadoc: @return true\nCondition: true ? methodResultID==true\n\n###\n\nSignature: empty()\nJavadoc: @return true if the stack is currently empty\nCondition: receiverObjectID.isEmpty() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: add(E object, int count)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: nullToEmpty(java.lang.String string)\nJavadoc: @return string itself if it is non-null; \"\" if it is null\nCondition: string!=null ? methodResultID.equals(string) : methodResultID.equals(\"\") \n\n###\n\nSignature: emptyIfNull(java.util.Collection collection)\nJavadoc: @return an empty collection if the argument is null\nCondition: collection==null ? methodResultID.equals(org.apache.commons.collections4.CollectionUtils.emptyCollection())\n\n###\n\nSignature: firstNonNull(java.lang.Object first,java.lang.Object second)\nJavadoc: @return first if it is non-null; otherwise second if it is non-null\nCondition: first != null ? methodResultID == first ; first == null && second != null ? methodResultID == second\n\n###\n\nSignature: emptyToNull(java.lang.String string)\nJavadoc: @return string itself if it is nonempty; null if it is empty or null\nCondition: string==null || string.isEmpty() ? methodResultID==null : methodResultID.equals(string)\n\n###\n\nSignature: all_null(java.util.List a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: a.stream().allMatch(e -> e==null) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: all_null(java.lang.Object[] a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: java.util.Arrays.asList(a).stream().allMatch(e -> e==null)?methodResultID==true : methodResultID==false\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: isNullOrEmpty(java.lang.String string)\nJavadoc: @return true if the string is null or is the empty string\nCondition: string==null || string.isEmpty() ? methodResultID==true\n\n###\n\nSignature: isEmpty(java.util.Collection coll)\nJavadoc: @return true if empty or null\nCondition: coll.isEmpty() || coll==null ? methodResultID==true\n\n###\n\nSignature: sizeIsEmpty(java.lang.Object object)\nJavadoc: @return true if empty or null\nCondition: object.isEmpty() || object==null ? methodResultID==true\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: "
        },
        {
            "condition": "n<2 ? methodResultID==false",
            "parameters": [
                "'n'"
            ],
            "signature": "isPrime(int n)",
            "tag": "@return true if n is prime. (All numbers < 2 return false).",
            "tag_type": "returnTag",
            "prompt": "Signature: isEmpty(java.util.Collection coll)\nJavadoc: @return true if empty or null\nCondition: coll.isEmpty() || coll==null ? methodResultID==true\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: isInDanger(int range,float threat)\nJavadoc: @return True if a threat was found.\nCondition: receiverObjectID.searchForDanger(range, threat)!=null ? methodResultID==true\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: intersectionCardinalityAtLeast(java.util.BitSet a,java.util.BitSet b,java.util.BitSet c,int i)\nJavadoc: @return true iff size(a intersect b intersect c) \u2265 i\nCondition: receiverObjectID.intersectionCardinality(a,b,c)>=i ? methodResultID==true\n\n###\n\nSignature: removeVertex(java.lang.Object v)\nJavadoc: @return true if the graph contained the specified vertex; false otherwise.\nCondition: receiverObjectID.containsVertex(v) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: contains(org.graphstream.graph.Edge edge)\nJavadoc: @return true if the path contains the edge.\nCondition: receiverObjectID.getEdgePath().contains(edge) ? methodResultID==true\n\n###\n\nSignature: intersectionCardinalityAtLeast(java.util.BitSet a,java.util.BitSet b,int i)\nJavadoc: @return true iff size(a intersect b) \u2265 i\nCondition: receiverObjectID.intersectionCardinality(a,b)>=i ? methodResultID==true\n\n###\n\nSignature: removeEdge(java.lang.Object e)\nJavadoc: @return true if and only if the graph contained the specified edge.\nCondition: receiverObjectID.containsEdge(e) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: contains(org.graphstream.graph.Node node)\nJavadoc: @return true if the path contains the node.\nCondition: receiverObjectID.getNodePath().contains(node) ? methodResultID==true\n\n###\n\nSignature: appliesTo(net.sf.freecol.common.model.Turn turn)\nJavadoc: @return True if the turn is null or not outside a valid time limit.\nCondition: turn==null ? methodResultID == true : methodResultID==false\n\n###\n\nSignature: removeLRU(org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry entry)\nJavadoc: @return true\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E element)\nJavadoc: @return Always true.\nCondition: true? methodResultID==true\n\n###\n\nSignature: isIndian()\nJavadoc: @return True.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: isREF()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: isEuropean()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: add(E object, int count)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: nextPrime(int n)\nJavadoc: @return the smallest prime greater than or equal to n.\nCondition: true?methodResultID>=n\n\n###\n\nSignature: isPrime(int n)\nJavadoc: @return true if n is prime. (All numbers < 2 return false).\nCondition: "
        },
        {
            "condition": " true ? (methodResultID==0 || methodResultID==1)",
            "parameters": [
                "'x'",
                " 'y'"
            ],
            "signature": "logicalOr(long x,long y)",
            "tag": "@return the logical or of x and y; the result is always 0 or 1",
            "tag_type": "returnTag",
            "prompt": "Signature: lte(double d1, double d2)\nJavadoc: @return whether d1 <= d2.\nCondition: d1<=d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: addAndCheck(int x,int y)\nJavadoc: @return the sum x+y\nCondition: true ? methodResultID==x+y\n\n###\n\nSignature: ne(double d1, double d2)\nJavadoc: @return whether d1 and d2 are non-equal.\nCondition: d1!=d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: min(double a,double b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(float a,float b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(long a,long b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(int a,int b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: max(long a,long b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(double a,double b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(float a,float b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(int a,int b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: bitwiseOr(long x,long y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseOr(int x,int y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseAnd(long x,long y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: bitwiseAnd(int x,int y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: logicalXor(long x,long y)\nJavadoc: @return the logical xor of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalXor(int x,int y)\nJavadoc: @return the logical xor of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalAnd(int x,int y)\nJavadoc: @return the logical and of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalAnd(long x,long y)\nJavadoc: @return the logical and of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalOr(int x,int y)\nJavadoc: @return the logical or of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalOr(long x,long y)\nJavadoc: @return the logical or of x and y; the result is always 0 or 1\nCondition: "
        },
        {
            "condition": "true?methodResultID==x<<y",
            "parameters": [
                "'x'",
                " 'y'"
            ],
            "signature": "lshift(long x,long y)",
            "tag": "@return x << y",
            "tag_type": "returnTag",
            "prompt": "Signature: max(long a,long b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: mod(long x,long y)\nJavadoc: @return x % y\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: mod(int x,int y)\nJavadoc: @return x % y\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: div(long x,long y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(double x,double y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(int x,int y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: bitwiseXor(int x,int y)\nJavadoc: @return x ^ y\nCondition: true?methodResultID==(x^y)\n\n###\n\nSignature: bitwiseXor(long x,long y)\nJavadoc: @return x ^ y\nCondition: true?methodResultID==(x^y)\n\n###\n\nSignature: bitwiseAnd(long x,long y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: bitwiseAnd(int x,int y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: mul(double x,double y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(long x,long y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(int x,int y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: bitwiseOr(long x,long y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseOr(int x,int y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: rshiftUnsigned(long x,long y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: rshiftUnsigned(int x,int y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: rshiftSigned(int x,int y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: rshiftSigned(long x,long y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: lshift(int x,int y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: lshift(long x,long y)\nJavadoc: @return x << y\nCondition: "
        },
        {
            "condition": "true ? methodResultID==true",
            "parameters": [
                "'object'",
                " 'count'"
            ],
            "signature": "add(E object, int count)",
            "tag": "@return true, always.",
            "tag_type": "returnTag",
            "prompt": "Signature: all_null(java.lang.Object[] a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: java.util.Arrays.asList(a).stream().allMatch(e -> e==null)?methodResultID==true : methodResultID==false\n\n###\n\nSignature: all_null(java.util.List a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: a.stream().allMatch(e -> e==null) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference,java.lang.String errorMessageTemplate,java.lang.Object[] errorMessageArgs)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: isNullOrEmpty(java.lang.String string)\nJavadoc: @return true if the string is null or is the empty string\nCondition: string==null || string.isEmpty() ? methodResultID==true\n\n###\n\nSignature: hasSpaceLeft()\nJavadoc: @return True if there is free space.\nCondition: receiverObjectID.getSpaceLeft() > 0 ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: owns(net.sf.freecol.common.model.Ownable ownable)\nJavadoc: @return True if the Ownable is ours.\nCondition: receiverObjectID.equals(ownable.getOwner()) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: empty()\nJavadoc: @return true if the stack is currently empty\nCondition: receiverObjectID.isEmpty() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: isInDanger(int range,float threat)\nJavadoc: @return True if a threat was found.\nCondition: receiverObjectID.searchForDanger(range, threat)!=null ? methodResultID==true\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: isEmpty(java.util.Collection coll)\nJavadoc: @return true if empty or null\nCondition: coll.isEmpty() || coll==null ? methodResultID==true\n\n###\n\nSignature: sizeIsEmpty(java.lang.Object object)\nJavadoc: @return true if empty or null\nCondition: object.isEmpty() || object==null ? methodResultID==true\n\n###\n\nSignature: isEuropean()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: isREF()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: removeLRU(org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry entry)\nJavadoc: @return true\nCondition: true ? methodResultID==true\n\n###\n\nSignature: isIndian()\nJavadoc: @return True.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E element)\nJavadoc: @return Always true.\nCondition: true? methodResultID==true\n\n###\n\nSignature: add(E object)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object, int count)\nJavadoc: @return true, always.\nCondition: "
        },
        {
            "condition": "iterator==null || closure==null ? methodResultID==null",
            "parameters": [
                "'iterator'",
                " 'closure'"
            ],
            "signature": "forAllButLastDo(java.util.Iterator iterator,org.apache.commons.collections4.Closure closure)",
            "tag": "@return the last element in the collection, or null if either iterator or closure is null",
            "tag_type": "returnTag",
            "prompt": "Signature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: getType()\nJavadoc: @return This.\nCondition: true ? methodResultID==receiverObjectID\n\n###\n\nSignature: load(java.lang.Object key)\nJavadoc: @return the value associated with key; must not be null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: reload(java.lang.Object key,java.lang.Object oldValue)\nJavadoc: @return the future new value associated with key; must not be null, must not return null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: emptyToNull(java.lang.String string)\nJavadoc: @return string itself if it is nonempty; null if it is empty or null\nCondition: string==null || string.isEmpty() ? methodResultID==null : methodResultID.equals(string)\n\n###\n\nSignature: nullToEmpty(java.lang.String string)\nJavadoc: @return string itself if it is non-null; \"\" if it is null\nCondition: string!=null ? methodResultID.equals(string) : methodResultID.equals(\"\") \n\n###\n\nSignature: emptyBag()\nJavadoc: @return an empty Bag\nCondition: true ? methodResultID.equals(receiverObjectID.EMPTY_BAG)\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,boolean includeDuplicates)\nJavadoc: @return a new sorted List, containing the elements of Collection a and b\nCondition: true ? result.containsAll(a)\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b)\nJavadoc: @return a new sorted List, containing the elements of Collection a and b\nCondition: true ? result.containsAll(a) && result.containsAll(b)\n\n###\n\nSignature: emptySortedBag()\nJavadoc: @return an empty sorted Bag\nCondition: true ? methodResultID.equals(receiverObjectID.EMPTY_SORTED_BAG)\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference,java.lang.String errorMessageTemplate,java.lang.Object[] errorMessageArgs)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: peek()\nJavadoc: @return the top item on the stack\nCondition: true ? methodResultID.equals(receiverObjectID.peek())\n\n###\n\nSignature: getFromSet(java.util.Set set,java.lang.Object key)\nJavadoc: @return the object in this set that is equal to key, or null\nCondition: true?(methodResultID==key||methodResultID==null)\n\n###\n\nSignature: peek(int n)\nJavadoc: @return the n'th item on the stack, zero relative\nCondition: true ? methodResultID.equals(receiverObjectID.get(receiverObjectID.size() - n)-1)\n\n###\n\nSignature: firstNonNull(java.lang.Object first,java.lang.Object second)\nJavadoc: @return first if it is non-null; otherwise second if it is non-null\nCondition: first != null ? methodResultID == first ; first == null && second != null ? methodResultID == second\n\n###\n\nSignature: size(java.lang.Object object)\nJavadoc: @return the size of the specified collection or 0 if the object was null\nCondition: object==null ? methodResultID == 0\n\n###\n\nSignature: emptyIfNull(java.util.Collection collection)\nJavadoc: @return an empty collection if the argument is null\nCondition: collection==null ? methodResultID.equals(org.apache.commons.collections4.CollectionUtils.emptyCollection())\n\n###\n\nSignature: forAllButLastDo(java.lang.Iterable collection,org.apache.commons.collections4.Closure closure)\nJavadoc: @return the last element in the collection, or null if either collection or closure is null\nCondition: (collection==null || closure==null) ? methodResultID==null : collection.get(collection.size() - 1)\n\n###\n\nSignature: forAllButLastDo(java.util.Iterator iterator,org.apache.commons.collections4.Closure closure)\nJavadoc: @return the last element in the collection, or null if either iterator or closure is null\nCondition: "
        },
        {
            "condition": "true?methodResultID.equals(s)",
            "parameters": [
                "'s'",
                " 'groups'"
            ],
            "signature": "asRegex(java.lang.String s,int groups)",
            "tag": "@return its argument",
            "tag_type": "returnTag",
            "prompt": "Signature: lshift(int x,int y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: emptyBag()\nJavadoc: @return an empty Bag\nCondition: true ? methodResultID.equals(receiverObjectID.EMPTY_BAG)\n\n###\n\nSignature: forAllDo(java.lang.Iterable collection,org.apache.commons.collections4.Closure closure)\nJavadoc: @return closure\nCondition: true?methodResultID.equals(closure)\n\n###\n\nSignature: forAllDo(java.util.Iterator iterator,org.apache.commons.collections4.Closure closure)\nJavadoc: @return closure\nCondition: true?methodResultID.equals(closure)\n\n###\n\nSignature: rshiftSigned(long x,long y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: rshiftSigned(int x,int y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: getFromSet(java.util.Set set,java.lang.Object key)\nJavadoc: @return the object in this set that is equal to key, or null\nCondition: true?(methodResultID==key||methodResultID==null)\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference,java.lang.String errorMessageTemplate,java.lang.Object[] errorMessageArgs)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: firstNonNull(java.lang.Object first,java.lang.Object second)\nJavadoc: @return first if it is non-null; otherwise second if it is non-null\nCondition: first != null ? methodResultID == first ; first == null && second != null ? methodResultID == second\n\n###\n\nSignature: rshiftUnsigned(long x,long y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: rshiftUnsigned(int x,int y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: emptyToNull(java.lang.String string)\nJavadoc: @return string itself if it is nonempty; null if it is empty or null\nCondition: string==null || string.isEmpty() ? methodResultID==null : methodResultID.equals(string)\n\n###\n\nSignature: emptyIfNull(java.util.Collection collection)\nJavadoc: @return an empty collection if the argument is null\nCondition: collection==null ? methodResultID.equals(org.apache.commons.collections4.CollectionUtils.emptyCollection())\n\n###\n\nSignature: getType()\nJavadoc: @return This.\nCondition: true ? methodResultID==receiverObjectID\n\n###\n\nSignature: doBackward(java.lang.Object b)\nJavadoc: @return the converted instance; must not be null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: doForward(java.lang.Object a)\nJavadoc: @return the converted instance; must not be null\nCondition: true?(methodResultID==null)==false\n\n###\n\nSignature: getParameter(java.lang.String parameter)\nJavadoc: @return The parameter value (empty string if not set).\nCondition: !receiverObjectID.hasParameter(parameter) ? methodResultID.equals(\"\")\n\n###\n\nSignature: nullToEmpty(java.lang.String string)\nJavadoc: @return string itself if it is non-null; \"\" if it is null\nCondition: string!=null ? methodResultID.equals(string) : methodResultID.equals(\"\") \n\n###\n\nSignature: asRegex(java.lang.String s)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: asRegex(java.lang.String s,int groups)\nJavadoc: @return its argument\nCondition: "
        },
        {
            "condition": "receiverObjectID.getTile()!=null ? methodResultID==true",
            "parameters": [
                ""
            ],
            "signature": "hasTile()",
            "tag": "@return True if this unit is on a tile.",
            "tag_type": "returnTag",
            "prompt": "Signature: isIndian()\nJavadoc: @return True.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E element)\nJavadoc: @return Always true.\nCondition: true? methodResultID==true\n\n###\n\nSignature: getEurope()\nJavadoc: @return The Europe object, or null if the player is not European or indpendent.\nCondition: (receiverObjectID.isEuropean())==false?methodResultID==null\n\n###\n\nSignature: intersectionCardinalityAtLeast(java.util.BitSet a,java.util.BitSet b,int i)\nJavadoc: @return true iff size(a intersect b) \u2265 i\nCondition: receiverObjectID.intersectionCardinality(a,b)>=i ? methodResultID==true\n\n###\n\nSignature: appliesTo(net.sf.freecol.common.model.Turn turn)\nJavadoc: @return True if the turn is null or not outside a valid time limit.\nCondition: turn==null ? methodResultID == true : methodResultID==false\n\n###\n\nSignature: owns(net.sf.freecol.common.model.Ownable ownable)\nJavadoc: @return True if the Ownable is ours.\nCondition: receiverObjectID.equals(ownable.getOwner()) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: hasSpaceLeft()\nJavadoc: @return True if there is free space.\nCondition: receiverObjectID.getSpaceLeft() > 0 ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: isInDanger(int range,float threat)\nJavadoc: @return True if a threat was found.\nCondition: receiverObjectID.searchForDanger(range, threat)!=null ? methodResultID==true\n\n###\n\nSignature: contains(org.graphstream.graph.Edge edge)\nJavadoc: @return true if the path contains the edge.\nCondition: receiverObjectID.getEdgePath().contains(edge) ? methodResultID==true\n\n###\n\nSignature: contains(org.graphstream.graph.Node node)\nJavadoc: @return true if the path contains the node.\nCondition: receiverObjectID.getNodePath().contains(node) ? methodResultID==true\n\n###\n\nSignature: getCarrier()\nJavadoc: @return The carrier this unit is aboard, or null if none.\nCondition: !receiverObjectID.isOnCarrier() ? methodResultID==null\n\n###\n\nSignature: add(E object, int count)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: hasGoodsCargo()\nJavadoc: @return True if the unit is carrying any goods cargo.\nCondition: receiverObjectID.getGoodsSpaceTaken() > 0 ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: hasCargo()\nJavadoc: @return True if the unit is carrying any cargo.\nCondition: receiverObjectID.getCargoSpaceTaken() > 0 ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: isCarrier()\nJavadoc: @return True if this unit can carry goods or other units.\nCondition: (receiverObjectID.canCarryGoods() || receiverObjectID.canCarryUnits()) ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: canMoveToEurope()\nJavadoc: @return True if this player has an instance of Europe.\nCondition: receiverObjectID.getEurope() != null ? methodResultID==true\n\n###\n\nSignature: obtains(net.sf.freecol.common.model.Unit unit)\nJavadoc: @return True if the unit can be moved.\nCondition: unit.couldMove() ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: hasExplored(net.sf.freecol.common.model.Tile tile)\nJavadoc: @return True if the Tile has been explored.\nCondition: tile.isExplored() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: hasHighSeasMove()\nJavadoc: @return True if the unit can either move immediately to the high seas or can make a move to a neighbouring high seas tile.\nCondition: receiverObjectID.canMoveToHighSeas() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: hasTile()\nJavadoc: @return True if this unit is on a tile.\nCondition: "
        },
        {
            "condition": "receiverObjectID.containsEdge(e) ? methodResultID==true : methodResultID==false",
            "parameters": [
                "'e'"
            ],
            "signature": "removeEdge(java.lang.Object e)",
            "tag": "@return true if and only if the graph contained the specified edge.",
            "tag_type": "returnTag",
            "prompt": "Signature: hasSpaceLeft()\nJavadoc: @return True if there is free space.\nCondition: receiverObjectID.getSpaceLeft() > 0 ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: isEmpty(java.util.Collection coll)\nJavadoc: @return true if empty or null\nCondition: coll.isEmpty() || coll==null ? methodResultID==true\n\n###\n\nSignature: sizeIsEmpty(java.lang.Object object)\nJavadoc: @return true if empty or null\nCondition: object.isEmpty() || object==null ? methodResultID==true\n\n###\n\nSignature: removeLRU(org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry entry)\nJavadoc: @return true\nCondition: true ? methodResultID==true\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: add(E element)\nJavadoc: @return Always true.\nCondition: true? methodResultID==true\n\n###\n\nSignature: isInDanger(int range,float threat)\nJavadoc: @return True if a threat was found.\nCondition: receiverObjectID.searchForDanger(range, threat)!=null ? methodResultID==true\n\n###\n\nSignature: isIndian()\nJavadoc: @return True.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: intersectionCardinalityAtLeast(java.util.BitSet a,java.util.BitSet b,int i)\nJavadoc: @return true iff size(a intersect b) \u2265 i\nCondition: receiverObjectID.intersectionCardinality(a,b)>=i ? methodResultID==true\n\n###\n\nSignature: add(E object, int count)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: intersectionCardinalityAtLeast(java.util.BitSet a,java.util.BitSet b,java.util.BitSet c,int i)\nJavadoc: @return true iff size(a intersect b intersect c) \u2265 i\nCondition: receiverObjectID.intersectionCardinality(a,b,c)>=i ? methodResultID==true\n\n###\n\nSignature: contains(org.graphstream.graph.Node node)\nJavadoc: @return true if the path contains the node.\nCondition: receiverObjectID.getNodePath().contains(node) ? methodResultID==true\n\n###\n\nSignature: contains(org.graphstream.graph.Edge edge)\nJavadoc: @return true if the path contains the edge.\nCondition: receiverObjectID.getEdgePath().contains(edge) ? methodResultID==true\n\n###\n\nSignature: addVertex(java.lang.Object v)\nJavadoc: @return true if this graph did not already contain the specified vertex.\nCondition: (receiverObjectID.containsVertex(v))==false ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: addEdgeWithVertices(org.jgrapht.Graph targetGraph,org.jgrapht.Graph sourceGraph,java.lang.Object edge)\nJavadoc: @return true if the target graph did not already contain the specified edge.\nCondition: (targetGraph.containsEdge(edge))==false?methodResultID==true:methodResultID==false\n\n###\n\nSignature: removeVertex(java.lang.Object v)\nJavadoc: @return true if the graph contained the specified vertex; false otherwise.\nCondition: receiverObjectID.containsVertex(v) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: addEdge(java.lang.Object sourceVertex,java.lang.Object targetVertex,java.lang.Object e)\nJavadoc: @return true if this graph did not already contain the specified edge.\nCondition: (receiverObjectID.containsEdge(sourceVertex,targetVertex))==false?methodResultID==true:methodResultID==false\n\n###\n\nSignature: removeEdge(java.lang.Object e)\nJavadoc: @return true if and only if the graph contained the specified edge.\nCondition: "
        },
        {
            "condition": "a<=b ? methodResultID==b : methodResultID==a",
            "parameters": [
                "'a'",
                " 'b'"
            ],
            "signature": "max(int a,int b)",
            "tag": "@return b if a is lesser or equal to b, a otherwise",
            "tag_type": "returnTag",
            "prompt": "Signature: div(int x,int y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: mod_positive(long x,long y)\nJavadoc: @return x % y, where the result is constrained to be positive\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: mod_positive(int x,int y)\nJavadoc: @return x % y, where the result is constrained to be positive\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: rshiftUnsigned(int x,int y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: rshiftUnsigned(long x,long y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: rshiftSigned(long x,long y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: rshiftSigned(int x,int y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: bitwiseOr(long x,long y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseOr(int x,int y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: gte(double d1, double d2)\nJavadoc: @return whether d1 > d2.\nCondition: d1>d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: gt(double d1, double d2)\nJavadoc: @return whether d1 > d2.\nCondition: d1>d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: lte(double d1, double d2)\nJavadoc: @return whether d1 <= d2.\nCondition: d1<=d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: lt(double d1, double d2)\nJavadoc: @return whether d1 < d2.\nCondition: d1<d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: min(int a,int b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(double a,double b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(float a,float b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(long a,long b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: max(double a,double b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(float a,float b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(long a,long b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(int a,int b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: "
        },
        {
            "condition": "string==null || string.isEmpty() ? methodResultID==null : methodResultID.equals(string)",
            "parameters": [
                "'string'"
            ],
            "signature": "emptyToNull(java.lang.String string)",
            "tag": "@return string itself if it is nonempty; null if it is empty or null",
            "tag_type": "returnTag",
            "prompt": "Signature: empty()\nJavadoc: @return true if the stack is currently empty\nCondition: receiverObjectID.isEmpty() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: asRegex(java.lang.String s)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: asRegex(java.lang.String s,int groups)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: emptyBag()\nJavadoc: @return an empty Bag\nCondition: true ? methodResultID.equals(receiverObjectID.EMPTY_BAG)\n\n###\n\nSignature: all_null(java.util.List a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: a.stream().allMatch(e -> e==null) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: all_null(java.lang.Object[] a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: java.util.Arrays.asList(a).stream().allMatch(e -> e==null)?methodResultID==true : methodResultID==false\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference,java.lang.String errorMessageTemplate,java.lang.Object[] errorMessageArgs)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: getParameter(java.lang.String parameter)\nJavadoc: @return The parameter value (empty string if not set).\nCondition: !receiverObjectID.hasParameter(parameter) ? methodResultID.equals(\"\")\n\n###\n\nSignature: convert(java.lang.Object a)\nJavadoc: @return the converted value; is null if and only if a is null\nCondition: a==null ? methodResultID==null : methodResultID!=null\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: firstNonNull(java.lang.Object first,java.lang.Object second)\nJavadoc: @return first if it is non-null; otherwise second if it is non-null\nCondition: first != null ? methodResultID == first ; first == null && second != null ? methodResultID == second\n\n###\n\nSignature: emptyIfNull(java.util.Collection collection)\nJavadoc: @return an empty collection if the argument is null\nCondition: collection==null ? methodResultID.equals(org.apache.commons.collections4.CollectionUtils.emptyCollection())\n\n###\n\nSignature: isEmpty(java.util.Collection coll)\nJavadoc: @return true if empty or null\nCondition: coll.isEmpty() || coll==null ? methodResultID==true\n\n###\n\nSignature: sizeIsEmpty(java.lang.Object object)\nJavadoc: @return true if empty or null\nCondition: object.isEmpty() || object==null ? methodResultID==true\n\n###\n\nSignature: repeat(java.lang.String string,int count)\nJavadoc: @return a string containing string repeated count times (the empty string if count is zero)\nCondition: count==0 ? methodResultID.equals(\"\")\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: isNullOrEmpty(java.lang.String string)\nJavadoc: @return true if the string is null or is the empty string\nCondition: string==null || string.isEmpty() ? methodResultID==true\n\n###\n\nSignature: nullToEmpty(java.lang.String string)\nJavadoc: @return string itself if it is non-null; \"\" if it is null\nCondition: string!=null ? methodResultID.equals(string) : methodResultID.equals(\"\") \n\n###\n\nSignature: emptyToNull(java.lang.String string)\nJavadoc: @return string itself if it is nonempty; null if it is empty or null\nCondition: "
        },
        {
            "condition": " true ? (methodResultID==0 || methodResultID==1)",
            "parameters": [
                "'x'",
                " 'y'"
            ],
            "signature": "logicalOr(int x,int y)",
            "tag": "@return the logical or of x and y; the result is always 0 or 1",
            "tag_type": "returnTag",
            "prompt": "Signature: lte(double d1, double d2)\nJavadoc: @return whether d1 <= d2.\nCondition: d1<=d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: addAndCheck(int x,int y)\nJavadoc: @return the sum x+y\nCondition: true ? methodResultID==x+y\n\n###\n\nSignature: ne(double d1, double d2)\nJavadoc: @return whether d1 and d2 are non-equal.\nCondition: d1!=d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: min(float a,float b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(double a,double b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(long a,long b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(int a,int b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: max(long a,long b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(float a,float b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(double a,double b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(int a,int b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: bitwiseOr(int x,int y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseOr(long x,long y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseAnd(int x,int y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: bitwiseAnd(long x,long y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: logicalXor(long x,long y)\nJavadoc: @return the logical xor of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalXor(int x,int y)\nJavadoc: @return the logical xor of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalAnd(int x,int y)\nJavadoc: @return the logical and of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalAnd(long x,long y)\nJavadoc: @return the logical and of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalOr(long x,long y)\nJavadoc: @return the logical or of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalOr(int x,int y)\nJavadoc: @return the logical or of x and y; the result is always 0 or 1\nCondition: "
        },
        {
            "condition": "true ? methodResultID==x+y",
            "parameters": [
                "'x'",
                " 'y'"
            ],
            "signature": "addAndCheck(int x,int y)",
            "tag": "@return the sum x+y",
            "tag_type": "returnTag",
            "prompt": "Signature: bitwiseXor(int x,int y)\nJavadoc: @return x ^ y\nCondition: true?methodResultID==(x^y)\n\n###\n\nSignature: mod(int x,int y)\nJavadoc: @return x % y\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: mod(long x,long y)\nJavadoc: @return x % y\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: subAndCheck(int x,int y)\nJavadoc: @return the difference x - y.\nCondition: true ? methodResultID==x-y\n\n###\n\nSignature: mulAndCheck(int x,int y)\nJavadoc: @return the product x * y.\nCondition: true ? methodResultID==x*y\n\n###\n\nSignature: logicalAnd(long x,long y)\nJavadoc: @return the logical and of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalAnd(int x,int y)\nJavadoc: @return the logical and of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalOr(long x,long y)\nJavadoc: @return the logical or of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalOr(int x,int y)\nJavadoc: @return the logical or of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: div(int x,int y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(long x,long y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(double x,double y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: mul(double x,double y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(int x,int y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(long x,long y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: bitwiseAnd(int x,int y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: bitwiseAnd(long x,long y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: evaluate(double[] values, double[] weights, int begin, int length)\nJavadoc: @return the sum of the values or 0 if length = 0.\nCondition: length==0 ? methodResultID==0\n\n###\n\nSignature: evaluate(double[] values, int begin, int length)\nJavadoc: @return the sum of the values or 0 if length = 0.\nCondition: length==0 ? methodResultID==0\n\n###\n\nSignature: addAndCheck(long a,long b)\nJavadoc: @return the sum a+b\nCondition: true ? methodResultID==a+b\n\n###\n\nSignature: addAndCheck(int x,int y)\nJavadoc: @return the sum x+y\nCondition: "
        },
        {
            "condition": "receiverObjectID.getEurope()==null ? methodResultID==null",
            "parameters": [
                ""
            ],
            "signature": "getEuropeNameKey()",
            "tag": "@return A name key, or null if Europe is null.",
            "tag_type": "returnTag",
            "prompt": "Signature: doBackward(java.lang.Object b)\nJavadoc: @return the converted instance; must not be null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: doForward(java.lang.Object a)\nJavadoc: @return the converted instance; must not be null\nCondition: true?(methodResultID==null)==false\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: convert(java.lang.Object a)\nJavadoc: @return the converted value; is null if and only if a is null\nCondition: a==null ? methodResultID==null : methodResultID!=null\n\n###\n\nSignature: all_null(java.util.List a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: a.stream().allMatch(e -> e==null) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: all_null(java.lang.Object[] a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: java.util.Arrays.asList(a).stream().allMatch(e -> e==null)?methodResultID==true : methodResultID==false\n\n###\n\nSignature: emptyToNull(java.lang.String string)\nJavadoc: @return string itself if it is nonempty; null if it is empty or null\nCondition: string==null || string.isEmpty() ? methodResultID==null : methodResultID.equals(string)\n\n###\n\nSignature: emptyIfNull(java.util.Collection collection)\nJavadoc: @return an empty collection if the argument is null\nCondition: collection==null ? methodResultID.equals(org.apache.commons.collections4.CollectionUtils.emptyCollection())\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: nullToEmpty(java.lang.String string)\nJavadoc: @return string itself if it is non-null; \"\" if it is null\nCondition: string!=null ? methodResultID.equals(string) : methodResultID.equals(\"\") \n\n###\n\nSignature: firstNonNull(java.lang.Object first,java.lang.Object second)\nJavadoc: @return first if it is non-null; otherwise second if it is non-null\nCondition: first != null ? methodResultID == first ; first == null && second != null ? methodResultID == second\n\n###\n\nSignature: reload(java.lang.Object key,java.lang.Object oldValue)\nJavadoc: @return the future new value associated with key; must not be null, must not return null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference,java.lang.String errorMessageTemplate,java.lang.Object[] errorMessageArgs)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: get(java.lang.Object key)\nJavadoc: @return the value to which this map maps the specified key, or null if the map contains no mapping for this key.\nCondition: receiverObjectID.containsKey(key)==false ? methodResultID==null\n\n###\n\nSignature: getFromSet(java.util.Set set,java.lang.Object key)\nJavadoc: @return the object in this set that is equal to key, or null\nCondition: true?(methodResultID==key||methodResultID==null)\n\n###\n\nSignature: canMoveToEurope()\nJavadoc: @return True if this player has an instance of Europe.\nCondition: receiverObjectID.getEurope() != null ? methodResultID==true\n\n###\n\nSignature: load(java.lang.Object key)\nJavadoc: @return the value associated with key; must not be null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: getEurope()\nJavadoc: @return The Europe object, or null if the player is not European or indpendent.\nCondition: (receiverObjectID.isEuropean())==false?methodResultID==null\n\n###\n\nSignature: getEuropeNameKey()\nJavadoc: @return A name key, or null if Europe is null.\nCondition: "
        },
        {
            "condition": "true ? methodResultID!=null",
            "parameters": [
                "'reference'",
                " 'errorMessageTemplate'",
                " 'errorMessageArgs'"
            ],
            "signature": "verifyNotNull(java.lang.Object reference,java.lang.String errorMessageTemplate,java.lang.Object[] errorMessageArgs)",
            "tag": "@return reference, guaranteed to be non-null, for convenience",
            "tag_type": "returnTag",
            "prompt": "Signature: reload(java.lang.Object key,java.lang.Object oldValue)\nJavadoc: @return the future new value associated with key; must not be null, must not return null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: add(E object)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object, int count)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: asRegex(java.lang.String s,int groups)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: asRegex(java.lang.String s)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: all_null(java.util.List a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: a.stream().allMatch(e -> e==null) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: all_null(java.lang.Object[] a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: java.util.Arrays.asList(a).stream().allMatch(e -> e==null)?methodResultID==true : methodResultID==false\n\n###\n\nSignature: load(java.lang.Object key)\nJavadoc: @return the value associated with key; must not be null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: convert(java.lang.Object a)\nJavadoc: @return the converted value; is null if and only if a is null\nCondition: a==null ? methodResultID==null : methodResultID!=null\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: doForward(java.lang.Object a)\nJavadoc: @return the converted instance; must not be null\nCondition: true?(methodResultID==null)==false\n\n###\n\nSignature: doBackward(java.lang.Object b)\nJavadoc: @return the converted instance; must not be null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: emptyToNull(java.lang.String string)\nJavadoc: @return string itself if it is nonempty; null if it is empty or null\nCondition: string==null || string.isEmpty() ? methodResultID==null : methodResultID.equals(string)\n\n###\n\nSignature: getFromSet(java.util.Set set,java.lang.Object key)\nJavadoc: @return the object in this set that is equal to key, or null\nCondition: true?(methodResultID==key||methodResultID==null)\n\n###\n\nSignature: emptyIfNull(java.util.Collection collection)\nJavadoc: @return an empty collection if the argument is null\nCondition: collection==null ? methodResultID.equals(org.apache.commons.collections4.CollectionUtils.emptyCollection())\n\n###\n\nSignature: nullToEmpty(java.lang.String string)\nJavadoc: @return string itself if it is non-null; \"\" if it is null\nCondition: string!=null ? methodResultID.equals(string) : methodResultID.equals(\"\") \n\n###\n\nSignature: firstNonNull(java.lang.Object first,java.lang.Object second)\nJavadoc: @return first if it is non-null; otherwise second if it is non-null\nCondition: first != null ? methodResultID == first ; first == null && second != null ? methodResultID == second\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference,java.lang.String errorMessageTemplate,java.lang.Object[] errorMessageArgs)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: "
        },
        {
            "condition": "receiverObjectID.containsKey(key)==false ? methodResultID==null",
            "parameters": [
                "'key'"
            ],
            "signature": "get(java.lang.Object key)",
            "tag": "@return the value to which this map maps the specified key, or null if the map contains no mapping for this key.",
            "tag_type": "returnTag",
            "prompt": "Signature: min(float a,float b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(double a,double b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(int a,int b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: emptyBag()\nJavadoc: @return an empty Bag\nCondition: true ? methodResultID.equals(receiverObjectID.EMPTY_BAG)\n\n###\n\nSignature: asRegex(java.lang.String s)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: asRegex(java.lang.String s,int groups)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: emptyToNull(java.lang.String string)\nJavadoc: @return string itself if it is nonempty; null if it is empty or null\nCondition: string==null || string.isEmpty() ? methodResultID==null : methodResultID.equals(string)\n\n###\n\nSignature: size(java.lang.Object object)\nJavadoc: @return the size of the specified collection or 0 if the object was null\nCondition: object==null ? methodResultID == 0\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference,java.lang.String errorMessageTemplate,java.lang.Object[] errorMessageArgs)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: emptyIfNull(java.util.Collection collection)\nJavadoc: @return an empty collection if the argument is null\nCondition: collection==null ? methodResultID.equals(org.apache.commons.collections4.CollectionUtils.emptyCollection())\n\n###\n\nSignature: nullToEmpty(java.lang.String string)\nJavadoc: @return string itself if it is non-null; \"\" if it is null\nCondition: string!=null ? methodResultID.equals(string) : methodResultID.equals(\"\") \n\n###\n\nSignature: doBackward(java.lang.Object b)\nJavadoc: @return the converted instance; must not be null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: doForward(java.lang.Object a)\nJavadoc: @return the converted instance; must not be null\nCondition: true?(methodResultID==null)==false\n\n###\n\nSignature: getEuropeNameKey()\nJavadoc: @return A name key, or null if Europe is null.\nCondition: receiverObjectID.getEurope()==null ? methodResultID==null\n\n###\n\nSignature: convert(java.lang.Object a)\nJavadoc: @return the converted value; is null if and only if a is null\nCondition: a==null ? methodResultID==null : methodResultID!=null\n\n###\n\nSignature: firstNonNull(java.lang.Object first,java.lang.Object second)\nJavadoc: @return first if it is non-null; otherwise second if it is non-null\nCondition: first != null ? methodResultID == first ; first == null && second != null ? methodResultID == second\n\n###\n\nSignature: reload(java.lang.Object key,java.lang.Object oldValue)\nJavadoc: @return the future new value associated with key; must not be null, must not return null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: getFromSet(java.util.Set set,java.lang.Object key)\nJavadoc: @return the object in this set that is equal to key, or null\nCondition: true?(methodResultID==key||methodResultID==null)\n\n###\n\nSignature: load(java.lang.Object key)\nJavadoc: @return the value associated with key; must not be null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: get(java.lang.Object key)\nJavadoc: @return the value to which this map maps the specified key, or null if the map contains no mapping for this key.\nCondition: "
        },
        {
            "condition": "first != null ? methodResultID == first ; first == null && second != null ? methodResultID == second",
            "parameters": [
                "'first'",
                " 'second'"
            ],
            "signature": "firstNonNull(java.lang.Object first,java.lang.Object second)",
            "tag": "@return first if it is non-null; otherwise second if it is non-null",
            "tag_type": "returnTag",
            "prompt": "Signature: max(double a,double b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(float a,float b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(long a,long b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: min(float a,float b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(double a,double b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(int a,int b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(long a,long b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: load(java.lang.Object key)\nJavadoc: @return the value associated with key; must not be null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: doForward(java.lang.Object a)\nJavadoc: @return the converted instance; must not be null\nCondition: true?(methodResultID==null)==false\n\n###\n\nSignature: doBackward(java.lang.Object b)\nJavadoc: @return the converted instance; must not be null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: getFromSet(java.util.Set set,java.lang.Object key)\nJavadoc: @return the object in this set that is equal to key, or null\nCondition: true?(methodResultID==key||methodResultID==null)\n\n###\n\nSignature: emptyIfNull(java.util.Collection collection)\nJavadoc: @return an empty collection if the argument is null\nCondition: collection==null ? methodResultID.equals(org.apache.commons.collections4.CollectionUtils.emptyCollection())\n\n###\n\nSignature: emptyToNull(java.lang.String string)\nJavadoc: @return string itself if it is nonempty; null if it is empty or null\nCondition: string==null || string.isEmpty() ? methodResultID==null : methodResultID.equals(string)\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: convert(java.lang.Object a)\nJavadoc: @return the converted value; is null if and only if a is null\nCondition: a==null ? methodResultID==null : methodResultID!=null\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference,java.lang.String errorMessageTemplate,java.lang.Object[] errorMessageArgs)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: nullToEmpty(java.lang.String string)\nJavadoc: @return string itself if it is non-null; \"\" if it is null\nCondition: string!=null ? methodResultID.equals(string) : methodResultID.equals(\"\") \n\n###\n\nSignature: firstNonNull(java.lang.Object first,java.lang.Object second)\nJavadoc: @return first if it is non-null; otherwise second if it is non-null\nCondition: "
        },
        {
            "condition": "a.stream().allMatch(e -> e==null) ? methodResultID==true : methodResultID==false",
            "parameters": [
                "'a'"
            ],
            "signature": "all_null(java.util.List a)",
            "tag": "@return true iff all elements of a are null (unspecified result if a is zero-sized)",
            "tag_type": "returnTag",
            "prompt": "Signature: isEuropean()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: add(E object)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object, int count)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: empty()\nJavadoc: @return true if the stack is currently empty\nCondition: receiverObjectID.isEmpty() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference,java.lang.String errorMessageTemplate,java.lang.Object[] errorMessageArgs)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: convert(java.lang.Object a)\nJavadoc: @return the converted value; is null if and only if a is null\nCondition: a==null ? methodResultID==null : methodResultID!=null\n\n###\n\nSignature: size(java.lang.Object object)\nJavadoc: @return the size of the specified collection or 0 if the object was null\nCondition: object==null ? methodResultID == 0\n\n###\n\nSignature: getFromSet(java.util.Set set,java.lang.Object key)\nJavadoc: @return the object in this set that is equal to key, or null\nCondition: true?(methodResultID==key||methodResultID==null)\n\n###\n\nSignature: firstNonNull(java.lang.Object first,java.lang.Object second)\nJavadoc: @return first if it is non-null; otherwise second if it is non-null\nCondition: first != null ? methodResultID == first ; first == null && second != null ? methodResultID == second\n\n###\n\nSignature: nullToEmpty(java.lang.String string)\nJavadoc: @return string itself if it is non-null; \"\" if it is null\nCondition: string!=null ? methodResultID.equals(string) : methodResultID.equals(\"\") \n\n###\n\nSignature: emptyToNull(java.lang.String string)\nJavadoc: @return string itself if it is nonempty; null if it is empty or null\nCondition: string==null || string.isEmpty() ? methodResultID==null : methodResultID.equals(string)\n\n###\n\nSignature: emptyIfNull(java.util.Collection collection)\nJavadoc: @return an empty collection if the argument is null\nCondition: collection==null ? methodResultID.equals(org.apache.commons.collections4.CollectionUtils.emptyCollection())\n\n###\n\nSignature: isNullOrEmpty(java.lang.String string)\nJavadoc: @return true if the string is null or is the empty string\nCondition: string==null || string.isEmpty() ? methodResultID==true\n\n###\n\nSignature: sizeIsEmpty(java.lang.Object object)\nJavadoc: @return true if empty or null\nCondition: object.isEmpty() || object==null ? methodResultID==true\n\n###\n\nSignature: isEmpty(java.util.Collection coll)\nJavadoc: @return true if empty or null\nCondition: coll.isEmpty() || coll==null ? methodResultID==true\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: all_null(java.lang.Object[] a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: java.util.Arrays.asList(a).stream().allMatch(e -> e==null)?methodResultID==true : methodResultID==false\n\n###\n\nSignature: all_null(java.util.List a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: "
        },
        {
            "condition": "true?methodResultID==x/y",
            "parameters": [
                "'x'",
                " 'y'"
            ],
            "signature": "div(double x,double y)",
            "tag": "@return x / y",
            "tag_type": "returnTag",
            "prompt": "Signature: rshiftUnsigned(long x,long y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: rshiftSigned(long x,long y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: rshiftSigned(int x,int y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: lshift(int x,int y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: lshift(long x,long y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: bitwiseXor(int x,int y)\nJavadoc: @return x ^ y\nCondition: true?methodResultID==(x^y)\n\n###\n\nSignature: bitwiseXor(long x,long y)\nJavadoc: @return x ^ y\nCondition: true?methodResultID==(x^y)\n\n###\n\nSignature: mod_positive(int x,int y)\nJavadoc: @return x % y, where the result is constrained to be positive\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: mod_positive(long x,long y)\nJavadoc: @return x % y, where the result is constrained to be positive\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: bitwiseOr(long x,long y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseOr(int x,int y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: mul(long x,long y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(int x,int y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(double x,double y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: bitwiseAnd(int x,int y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: bitwiseAnd(long x,long y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: mod(long x,long y)\nJavadoc: @return x % y\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: mod(int x,int y)\nJavadoc: @return x % y\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: div(int x,int y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(long x,long y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(double x,double y)\nJavadoc: @return x / y\nCondition: "
        },
        {
            "condition": "a<=b ? methodResultID==a : methodResultID==b",
            "parameters": [
                "'a'",
                " 'b'"
            ],
            "signature": "min(int a,int b)",
            "tag": "@return a if a is lesser or equal to b, b otherwise",
            "tag_type": "returnTag",
            "prompt": "Signature: mod_positive(long x,long y)\nJavadoc: @return x % y, where the result is constrained to be positive\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: mod_positive(int x,int y)\nJavadoc: @return x % y, where the result is constrained to be positive\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: firstNonNull(java.lang.Object first,java.lang.Object second)\nJavadoc: @return first if it is non-null; otherwise second if it is non-null\nCondition: first != null ? methodResultID == first ; first == null && second != null ? methodResultID == second\n\n###\n\nSignature: rshiftUnsigned(int x,int y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: rshiftUnsigned(long x,long y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: bitwiseOr(long x,long y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseOr(int x,int y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: rshiftSigned(int x,int y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: rshiftSigned(long x,long y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: gte(double d1, double d2)\nJavadoc: @return whether d1 > d2.\nCondition: d1>d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: gt(double d1, double d2)\nJavadoc: @return whether d1 > d2.\nCondition: d1>d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: lte(double d1, double d2)\nJavadoc: @return whether d1 <= d2.\nCondition: d1<=d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: lt(double d1, double d2)\nJavadoc: @return whether d1 < d2.\nCondition: d1<d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: max(float a,float b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(long a,long b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(double a,double b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(int a,int b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: min(float a,float b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(double a,double b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(long a,long b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(int a,int b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: "
        },
        {
            "condition": "true?methodResultID>=n",
            "parameters": [
                "'n'"
            ],
            "signature": "nextPrime(int n)",
            "tag": "@return the smallest prime greater than or equal to n.",
            "tag_type": "returnTag",
            "prompt": "Signature: forAllButLastDo(java.util.Iterator iterator,org.apache.commons.collections4.Closure closure)\nJavadoc: @return the last element in the collection, or null if either iterator or closure is null\nCondition: iterator==null || closure==null ? methodResultID==null\n\n###\n\nSignature: forAllButLastDo(java.lang.Iterable collection,org.apache.commons.collections4.Closure closure)\nJavadoc: @return the last element in the collection, or null if either collection or closure is null\nCondition: (collection==null || closure==null) ? methodResultID==null : collection.get(collection.size() - 1)\n\n###\n\nSignature: search(java.lang.Object object)\nJavadoc: @return the 1-based depth into the stack of the object, or -1 if not found\nCondition: receiverObjectID.contains(object) ? methodResultID==receiverObjectID.indexOf(object)+1 : methodResultID==-1\n\n###\n\nSignature: asRegex(java.lang.String s)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: asRegex(java.lang.String s,int groups)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: getFromSet(java.util.Set set,java.lang.Object key)\nJavadoc: @return the object in this set that is equal to key, or null\nCondition: true?(methodResultID==key||methodResultID==null)\n\n###\n\nSignature: firstNonNull(java.lang.Object first,java.lang.Object second)\nJavadoc: @return first if it is non-null; otherwise second if it is non-null\nCondition: first != null ? methodResultID == first ; first == null && second != null ? methodResultID == second\n\n###\n\nSignature: peek()\nJavadoc: @return the top item on the stack\nCondition: true ? methodResultID.equals(receiverObjectID.peek())\n\n###\n\nSignature: size(java.lang.Object object)\nJavadoc: @return the size of the specified collection or 0 if the object was null\nCondition: object==null ? methodResultID == 0\n\n###\n\nSignature: getSize()\nJavadoc: @return The size.\nCondition: true ? methodResultID.equals(receiverObjectID.size)\n\n###\n\nSignature: peek(int n)\nJavadoc: @return the n'th item on the stack, zero relative\nCondition: true ? methodResultID.equals(receiverObjectID.get(receiverObjectID.size() - n)-1)\n\n###\n\nSignature: max(double a,double b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(float a,float b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(long a,long b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(int a,int b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: min(double a,double b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(int a,int b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(float a,float b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(long a,long b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: isPrime(int n)\nJavadoc: @return true if n is prime. (All numbers < 2 return false).\nCondition: n<2 ? methodResultID==false\n\n###\n\nSignature: nextPrime(int n)\nJavadoc: @return the smallest prime greater than or equal to n.\nCondition: "
        },
        {
            "condition": "true ? methodResultID==x-y",
            "parameters": [
                "'x'",
                " 'y'"
            ],
            "signature": "subAndCheck(int x,int y)",
            "tag": "@return the difference x - y.",
            "tag_type": "returnTag",
            "prompt": "Signature: max(float a,float b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(long a,long b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(double a,double b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(int a,int b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: div(int x,int y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(double x,double y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(long x,long y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: min(float a,float b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(double a,double b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(int a,int b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(long a,long b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: gte(double d1, double d2)\nJavadoc: @return whether d1 > d2.\nCondition: d1>d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: gt(double d1, double d2)\nJavadoc: @return whether d1 > d2.\nCondition: d1>d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: lt(double d1, double d2)\nJavadoc: @return whether d1 < d2.\nCondition: d1<d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: bitwiseAnd(int x,int y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: bitwiseAnd(long x,long y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: addAndCheck(int x,int y)\nJavadoc: @return the sum x+y\nCondition: true ? methodResultID==x+y\n\n###\n\nSignature: ne(double d1, double d2)\nJavadoc: @return whether d1 and d2 are non-equal.\nCondition: d1!=d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: lte(double d1, double d2)\nJavadoc: @return whether d1 <= d2.\nCondition: d1<=d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: subAndCheck(long a,long b)\nJavadoc: @return the difference a - b.\nCondition: true ? methodResultID==a-b\n\n###\n\nSignature: subAndCheck(int x,int y)\nJavadoc: @return the difference x - y.\nCondition: "
        },
        {
            "condition": "object==null ? methodResultID == 0",
            "parameters": [
                "'object'"
            ],
            "signature": "size(java.lang.Object object)",
            "tag": "@return the size of the specified collection or 0 if the object was null",
            "tag_type": "returnTag",
            "prompt": "Signature: get(java.lang.Object key)\nJavadoc: @return the value to which this map maps the specified key, or null if the map contains no mapping for this key.\nCondition: receiverObjectID.containsKey(key)==false ? methodResultID==null\n\n###\n\nSignature: load(java.lang.Object key)\nJavadoc: @return the value associated with key; must not be null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: nullToEmpty(java.lang.String string)\nJavadoc: @return string itself if it is non-null; \"\" if it is null\nCondition: string!=null ? methodResultID.equals(string) : methodResultID.equals(\"\") \n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: emptySortedBag()\nJavadoc: @return an empty sorted Bag\nCondition: true ? methodResultID.equals(receiverObjectID.EMPTY_SORTED_BAG)\n\n###\n\nSignature: emptyToNull(java.lang.String string)\nJavadoc: @return string itself if it is nonempty; null if it is empty or null\nCondition: string==null || string.isEmpty() ? methodResultID==null : methodResultID.equals(string)\n\n###\n\nSignature: emptyBag()\nJavadoc: @return an empty Bag\nCondition: true ? methodResultID.equals(receiverObjectID.EMPTY_BAG)\n\n###\n\nSignature: evaluate(double[] values, double[] weights, int begin, int length)\nJavadoc: @return the sum of the values or 0 if length = 0.\nCondition: length==0 ? methodResultID==0\n\n###\n\nSignature: evaluate(double[] values, int begin, int length)\nJavadoc: @return the sum of the values or 0 if length = 0.\nCondition: length==0 ? methodResultID==0\n\n###\n\nSignature: hasSpaceLeft()\nJavadoc: @return True if there is free space.\nCondition: receiverObjectID.getSpaceLeft() > 0 ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: firstNonNull(java.lang.Object first,java.lang.Object second)\nJavadoc: @return first if it is non-null; otherwise second if it is non-null\nCondition: first != null ? methodResultID == first ; first == null && second != null ? methodResultID == second\n\n###\n\nSignature: forAllButLastDo(java.util.Iterator iterator,org.apache.commons.collections4.Closure closure)\nJavadoc: @return the last element in the collection, or null if either iterator or closure is null\nCondition: iterator==null || closure==null ? methodResultID==null\n\n###\n\nSignature: all_null(java.util.List a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: a.stream().allMatch(e -> e==null) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: all_null(java.lang.Object[] a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: java.util.Arrays.asList(a).stream().allMatch(e -> e==null)?methodResultID==true : methodResultID==false\n\n###\n\nSignature: forAllButLastDo(java.lang.Iterable collection,org.apache.commons.collections4.Closure closure)\nJavadoc: @return the last element in the collection, or null if either collection or closure is null\nCondition: (collection==null || closure==null) ? methodResultID==null : collection.get(collection.size() - 1)\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: getFromSet(java.util.Set set,java.lang.Object key)\nJavadoc: @return the object in this set that is equal to key, or null\nCondition: true?(methodResultID==key||methodResultID==null)\n\n###\n\nSignature: emptyIfNull(java.util.Collection collection)\nJavadoc: @return an empty collection if the argument is null\nCondition: collection==null ? methodResultID.equals(org.apache.commons.collections4.CollectionUtils.emptyCollection())\n\n###\n\nSignature: getSize()\nJavadoc: @return The size.\nCondition: true ? methodResultID.equals(receiverObjectID.size)\n\n###\n\nSignature: size(java.lang.Object object)\nJavadoc: @return the size of the specified collection or 0 if the object was null\nCondition: "
        },
        {
            "condition": "true ? methodResultID.equals(receiverObjectID.EMPTY_BAG)",
            "parameters": [
                ""
            ],
            "signature": "emptyBag()",
            "tag": "@return an empty Bag",
            "tag_type": "returnTag",
            "prompt": "Signature: doBackward(java.lang.Object b)\nJavadoc: @return the converted instance; must not be null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: firstNonNull(java.lang.Object first,java.lang.Object second)\nJavadoc: @return first if it is non-null; otherwise second if it is non-null\nCondition: first != null ? methodResultID == first ; first == null && second != null ? methodResultID == second\n\n###\n\nSignature: isEmpty(java.util.Collection coll)\nJavadoc: @return true if empty or null\nCondition: coll.isEmpty() || coll==null ? methodResultID==true\n\n###\n\nSignature: sizeIsEmpty(java.lang.Object object)\nJavadoc: @return true if empty or null\nCondition: object.isEmpty() || object==null ? methodResultID==true\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: asRegex(java.lang.String s)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: asRegex(java.lang.String s,int groups)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: getType()\nJavadoc: @return This.\nCondition: true ? methodResultID==receiverObjectID\n\n###\n\nSignature: load(java.lang.Object key)\nJavadoc: @return the value associated with key; must not be null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference,java.lang.String errorMessageTemplate,java.lang.Object[] errorMessageArgs)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: size(java.lang.Object object)\nJavadoc: @return the size of the specified collection or 0 if the object was null\nCondition: object==null ? methodResultID == 0\n\n###\n\nSignature: empty()\nJavadoc: @return a new empty FluentIterable\nCondition: true ? methodResultID.isEmpty()==true\n\n###\n\nSignature: emptyCollection()\nJavadoc: @return immutable empty collection\nCondition: true?methodResultID.equals(receiverObjectID.EMPTY_COLLECTION)\n\n###\n\nSignature: nullToEmpty(java.lang.String string)\nJavadoc: @return string itself if it is non-null; \"\" if it is null\nCondition: string!=null ? methodResultID.equals(string) : methodResultID.equals(\"\") \n\n###\n\nSignature: getFromSet(java.util.Set set,java.lang.Object key)\nJavadoc: @return the object in this set that is equal to key, or null\nCondition: true?(methodResultID==key||methodResultID==null)\n\n###\n\nSignature: emptyQueue()\nJavadoc: @return an empty Queue\nCondition: true?methodResultID.equals(receiverObjectID.EMPTY_QUEUE)\n\n###\n\nSignature: emptyToNull(java.lang.String string)\nJavadoc: @return string itself if it is nonempty; null if it is empty or null\nCondition: string==null || string.isEmpty() ? methodResultID==null : methodResultID.equals(string)\n\n###\n\nSignature: emptyIfNull(java.util.Collection collection)\nJavadoc: @return an empty collection if the argument is null\nCondition: collection==null ? methodResultID.equals(org.apache.commons.collections4.CollectionUtils.emptyCollection())\n\n###\n\nSignature: emptySortedBag()\nJavadoc: @return an empty sorted Bag\nCondition: true ? methodResultID.equals(receiverObjectID.EMPTY_SORTED_BAG)\n\n###\n\nSignature: emptyBag()\nJavadoc: @return an empty Bag\nCondition: "
        },
        {
            "condition": "coll.isEmpty() || coll==null ? methodResultID==true",
            "parameters": [
                "'coll'"
            ],
            "signature": "isEmpty(java.util.Collection coll)",
            "tag": "@return true if empty or null",
            "tag_type": "returnTag",
            "prompt": "Signature: firstNonNull(java.lang.Object first,java.lang.Object second)\nJavadoc: @return first if it is non-null; otherwise second if it is non-null\nCondition: first != null ? methodResultID == first ; first == null && second != null ? methodResultID == second\n\n###\n\nSignature: hasSpaceLeft()\nJavadoc: @return True if there is free space.\nCondition: receiverObjectID.getSpaceLeft() > 0 ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: nullToEmpty(java.lang.String string)\nJavadoc: @return string itself if it is non-null; \"\" if it is null\nCondition: string!=null ? methodResultID.equals(string) : methodResultID.equals(\"\") \n\n###\n\nSignature: add(E element)\nJavadoc: @return Always true.\nCondition: true? methodResultID==true\n\n###\n\nSignature: add(E object)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object, int count)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: emptyIfNull(java.util.Collection collection)\nJavadoc: @return an empty collection if the argument is null\nCondition: collection==null ? methodResultID.equals(org.apache.commons.collections4.CollectionUtils.emptyCollection())\n\n###\n\nSignature: empty()\nJavadoc: @return true if the stack is currently empty\nCondition: receiverObjectID.isEmpty() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: isIndian()\nJavadoc: @return True.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: isEuropean()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: isREF()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: emptyToNull(java.lang.String string)\nJavadoc: @return string itself if it is nonempty; null if it is empty or null\nCondition: string==null || string.isEmpty() ? methodResultID==null : methodResultID.equals(string)\n\n###\n\nSignature: removeLRU(org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry entry)\nJavadoc: @return true\nCondition: true ? methodResultID==true\n\n###\n\nSignature: all_null(java.lang.Object[] a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: java.util.Arrays.asList(a).stream().allMatch(e -> e==null)?methodResultID==true : methodResultID==false\n\n###\n\nSignature: all_null(java.util.List a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: a.stream().allMatch(e -> e==null) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: isNullOrEmpty(java.lang.String string)\nJavadoc: @return true if the string is null or is the empty string\nCondition: string==null || string.isEmpty() ? methodResultID==true\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: sizeIsEmpty(java.lang.Object object)\nJavadoc: @return true if empty or null\nCondition: object.isEmpty() || object==null ? methodResultID==true\n\n###\n\nSignature: isEmpty(java.util.Collection coll)\nJavadoc: @return true if empty or null\nCondition: "
        },
        {
            "condition": "true ? methodResultID==false",
            "parameters": [
                ""
            ],
            "signature": "isEuropean()",
            "tag": "@return False.",
            "tag_type": "returnTag",
            "prompt": "Signature: intersectionCardinalityAtLeast(java.util.BitSet a,java.util.BitSet b,java.util.BitSet c,int i)\nJavadoc: @return true iff size(a intersect b intersect c) \u2265 i\nCondition: receiverObjectID.intersectionCardinality(a,b,c)>=i ? methodResultID==true\n\n###\n\nSignature: getUnitCapacity()\nJavadoc: @return Integer.MAX_VALUE, denoting no effective limit.\nCondition: true ? methodResultID==Integer.MAX_VALUE\n\n###\n\nSignature: isInDanger(int range,float threat)\nJavadoc: @return True if a threat was found.\nCondition: receiverObjectID.searchForDanger(range, threat)!=null ? methodResultID==true\n\n###\n\nSignature: intersectionCardinalityAtLeast(java.util.BitSet a,java.util.BitSet b,int i)\nJavadoc: @return true iff size(a intersect b) \u2265 i\nCondition: receiverObjectID.intersectionCardinality(a,b)>=i ? methodResultID==true\n\n###\n\nSignature: empty()\nJavadoc: @return true if the stack is currently empty\nCondition: receiverObjectID.isEmpty() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: all_null(java.lang.Object[] a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: java.util.Arrays.asList(a).stream().allMatch(e -> e==null)?methodResultID==true : methodResultID==false\n\n###\n\nSignature: all_null(java.util.List a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: a.stream().allMatch(e -> e==null) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: emptyCollection()\nJavadoc: @return immutable empty collection\nCondition: true?methodResultID.equals(receiverObjectID.EMPTY_COLLECTION)\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: isNullOrEmpty(java.lang.String string)\nJavadoc: @return true if the string is null or is the empty string\nCondition: string==null || string.isEmpty() ? methodResultID==true\n\n###\n\nSignature: sizeIsEmpty(java.lang.Object object)\nJavadoc: @return true if empty or null\nCondition: object.isEmpty() || object==null ? methodResultID==true\n\n###\n\nSignature: isEmpty(java.util.Collection coll)\nJavadoc: @return true if empty or null\nCondition: coll.isEmpty() || coll==null ? methodResultID==true\n\n###\n\nSignature: add(E object, int count)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E element)\nJavadoc: @return Always true.\nCondition: true? methodResultID==true\n\n###\n\nSignature: removeLRU(org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry entry)\nJavadoc: @return true\nCondition: true ? methodResultID==true\n\n###\n\nSignature: isIndian()\nJavadoc: @return True.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: isREF()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: isEuropean()\nJavadoc: @return False.\nCondition: "
        },
        {
            "condition": "true?methodResultID==x/y",
            "parameters": [
                "'x'",
                " 'y'"
            ],
            "signature": "div(long x,long y)",
            "tag": "@return x / y",
            "tag_type": "returnTag",
            "prompt": "Signature: rshiftUnsigned(long x,long y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: rshiftSigned(long x,long y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: rshiftSigned(int x,int y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: lshift(int x,int y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: lshift(long x,long y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: bitwiseXor(int x,int y)\nJavadoc: @return x ^ y\nCondition: true?methodResultID==(x^y)\n\n###\n\nSignature: bitwiseXor(long x,long y)\nJavadoc: @return x ^ y\nCondition: true?methodResultID==(x^y)\n\n###\n\nSignature: mod_positive(int x,int y)\nJavadoc: @return x % y, where the result is constrained to be positive\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: mod_positive(long x,long y)\nJavadoc: @return x % y, where the result is constrained to be positive\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: bitwiseOr(long x,long y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseOr(int x,int y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: mul(long x,long y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(int x,int y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(double x,double y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: bitwiseAnd(int x,int y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: bitwiseAnd(long x,long y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: mod(long x,long y)\nJavadoc: @return x % y\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: mod(int x,int y)\nJavadoc: @return x % y\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: div(int x,int y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(double x,double y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(long x,long y)\nJavadoc: @return x / y\nCondition: "
        },
        {
            "condition": "true?methodResultID==x>>y",
            "parameters": [
                "'x'",
                " 'y'"
            ],
            "signature": "rshiftSigned(int x,int y)",
            "tag": "@return x >> y",
            "tag_type": "returnTag",
            "prompt": "Signature: mul(double x,double y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(long x,long y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(int x,int y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: min(float a,float b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(double a,double b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(long a,long b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(int a,int b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: bitwiseAnd(int x,int y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: bitwiseAnd(long x,long y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: max(float a,float b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(double a,double b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(int a,int b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(long a,long b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: bitwiseOr(int x,int y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseOr(long x,long y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: lshift(int x,int y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: lshift(long x,long y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: rshiftUnsigned(long x,long y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: rshiftUnsigned(int x,int y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: rshiftSigned(long x,long y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: rshiftSigned(int x,int y)\nJavadoc: @return x >> y\nCondition: "
        },
        {
            "condition": "true?methodResultID.equals(receiverObjectID.EMPTY_COLLECTION)",
            "parameters": [
                ""
            ],
            "signature": "emptyCollection()",
            "tag": "@return immutable empty collection",
            "tag_type": "returnTag",
            "prompt": "Signature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: emptyQueue()\nJavadoc: @return an empty Queue\nCondition: true?methodResultID.equals(receiverObjectID.EMPTY_QUEUE)\n\n###\n\nSignature: isNullOrEmpty(java.lang.String string)\nJavadoc: @return true if the string is null or is the empty string\nCondition: string==null || string.isEmpty() ? methodResultID==true\n\n###\n\nSignature: emptyToNull(java.lang.String string)\nJavadoc: @return string itself if it is nonempty; null if it is empty or null\nCondition: string==null || string.isEmpty() ? methodResultID==null : methodResultID.equals(string)\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: all_null(java.lang.Object[] a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: java.util.Arrays.asList(a).stream().allMatch(e -> e==null)?methodResultID==true : methodResultID==false\n\n###\n\nSignature: all_null(java.util.List a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: a.stream().allMatch(e -> e==null) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: isIndian()\nJavadoc: @return True.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: forAllDo(java.lang.Iterable collection,org.apache.commons.collections4.Closure closure)\nJavadoc: @return closure\nCondition: true?methodResultID.equals(closure)\n\n###\n\nSignature: forAllDo(java.util.Iterator iterator,org.apache.commons.collections4.Closure closure)\nJavadoc: @return closure\nCondition: true?methodResultID.equals(closure)\n\n###\n\nSignature: add(E element)\nJavadoc: @return Always true.\nCondition: true? methodResultID==true\n\n###\n\nSignature: removeLRU(org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry entry)\nJavadoc: @return true\nCondition: true ? methodResultID==true\n\n###\n\nSignature: isEmpty(java.util.Collection coll)\nJavadoc: @return true if empty or null\nCondition: coll.isEmpty() || coll==null ? methodResultID==true\n\n###\n\nSignature: sizeIsEmpty(java.lang.Object object)\nJavadoc: @return true if empty or null\nCondition: object.isEmpty() || object==null ? methodResultID==true\n\n###\n\nSignature: emptyBag()\nJavadoc: @return an empty Bag\nCondition: true ? methodResultID.equals(receiverObjectID.EMPTY_BAG)\n\n###\n\nSignature: isREF()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: isEuropean()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: emptySortedBag()\nJavadoc: @return an empty sorted Bag\nCondition: true ? methodResultID.equals(receiverObjectID.EMPTY_SORTED_BAG)\n\n###\n\nSignature: empty()\nJavadoc: @return a new empty FluentIterable\nCondition: true ? methodResultID.isEmpty()==true\n\n###\n\nSignature: emptyIfNull(java.util.Collection collection)\nJavadoc: @return an empty collection if the argument is null\nCondition: collection==null ? methodResultID.equals(org.apache.commons.collections4.CollectionUtils.emptyCollection())\n\n###\n\nSignature: emptyCollection()\nJavadoc: @return immutable empty collection\nCondition: "
        },
        {
            "condition": "true ? methodResultID==a+b",
            "parameters": [
                "'a'",
                " 'b'"
            ],
            "signature": "addAndCheck(long a,long b)",
            "tag": "@return the sum a+b",
            "tag_type": "returnTag",
            "prompt": "Signature: div(long x,long y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: subAndCheck(int x,int y)\nJavadoc: @return the difference x - y.\nCondition: true ? methodResultID==x-y\n\n###\n\nSignature: min(float a,float b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(double a,double b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(long a,long b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(int a,int b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: bitwiseAnd(int x,int y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: bitwiseAnd(long x,long y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: max(double a,double b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(long a,long b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(float a,float b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(int a,int b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: mulAndCheck(long a,long b)\nJavadoc: @return the product a * b.\nCondition: true ? methodResultID==a*b\n\n###\n\nSignature: mul(long x,long y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(int x,int y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(double x,double y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: subAndCheck(long a,long b)\nJavadoc: @return the difference a - b.\nCondition: true ? methodResultID==a-b\n\n###\n\nSignature: evaluate(double[] values, double[] weights, int begin, int length)\nJavadoc: @return the sum of the values or 0 if length = 0.\nCondition: length==0 ? methodResultID==0\n\n###\n\nSignature: evaluate(double[] values, int begin, int length)\nJavadoc: @return the sum of the values or 0 if length = 0.\nCondition: length==0 ? methodResultID==0\n\n###\n\nSignature: addAndCheck(int x,int y)\nJavadoc: @return the sum x+y\nCondition: true ? methodResultID==x+y\n\n###\n\nSignature: addAndCheck(long a,long b)\nJavadoc: @return the sum a+b\nCondition: "
        },
        {
            "condition": "true?(methodResultID==null)==false",
            "parameters": [
                "'a'"
            ],
            "signature": "doForward(java.lang.Object a)",
            "tag": "@return the converted instance; must not be null",
            "tag_type": "returnTag",
            "prompt": "Signature: rshiftUnsigned(long x,long y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: rshiftUnsigned(int x,int y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: get(java.lang.Object key)\nJavadoc: @return the value to which this map maps the specified key, or null if the map contains no mapping for this key.\nCondition: receiverObjectID.containsKey(key)==false ? methodResultID==null\n\n###\n\nSignature: emptyBag()\nJavadoc: @return an empty Bag\nCondition: true ? methodResultID.equals(receiverObjectID.EMPTY_BAG)\n\n###\n\nSignature: empty()\nJavadoc: @return a new empty FluentIterable\nCondition: true ? methodResultID.isEmpty()==true\n\n###\n\nSignature: reload(java.lang.Object key,java.lang.Object oldValue)\nJavadoc: @return the future new value associated with key; must not be null, must not return null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: of(java.lang.Object singleton)\nJavadoc: @return a new FluentIterable containing the singleton\nCondition: true ? methodResultID.contains(singleton)==true\n\n###\n\nSignature: emptyToNull(java.lang.String string)\nJavadoc: @return string itself if it is nonempty; null if it is empty or null\nCondition: string==null || string.isEmpty() ? methodResultID==null : methodResultID.equals(string)\n\n###\n\nSignature: getType()\nJavadoc: @return This.\nCondition: true ? methodResultID==receiverObjectID\n\n###\n\nSignature: load(java.lang.Object key)\nJavadoc: @return the value associated with key; must not be null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: nullToEmpty(java.lang.String string)\nJavadoc: @return string itself if it is non-null; \"\" if it is null\nCondition: string!=null ? methodResultID.equals(string) : methodResultID.equals(\"\") \n\n###\n\nSignature: emptyIfNull(java.util.Collection collection)\nJavadoc: @return an empty collection if the argument is null\nCondition: collection==null ? methodResultID.equals(org.apache.commons.collections4.CollectionUtils.emptyCollection())\n\n###\n\nSignature: asRegex(java.lang.String s,int groups)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: asRegex(java.lang.String s)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: getFromSet(java.util.Set set,java.lang.Object key)\nJavadoc: @return the object in this set that is equal to key, or null\nCondition: true?(methodResultID==key||methodResultID==null)\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference,java.lang.String errorMessageTemplate,java.lang.Object[] errorMessageArgs)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: firstNonNull(java.lang.Object first,java.lang.Object second)\nJavadoc: @return first if it is non-null; otherwise second if it is non-null\nCondition: first != null ? methodResultID == first ; first == null && second != null ? methodResultID == second\n\n###\n\nSignature: convert(java.lang.Object a)\nJavadoc: @return the converted value; is null if and only if a is null\nCondition: a==null ? methodResultID==null : methodResultID!=null\n\n###\n\nSignature: doBackward(java.lang.Object b)\nJavadoc: @return the converted instance; must not be null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: doForward(java.lang.Object a)\nJavadoc: @return the converted instance; must not be null\nCondition: "
        },
        {
            "condition": "true?methodResultID==x>>>y",
            "parameters": [
                "'x'",
                " 'y'"
            ],
            "signature": "rshiftUnsigned(int x,int y)",
            "tag": "@return x >>> y",
            "tag_type": "returnTag",
            "prompt": "Signature: min(double a,double b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(int a,int b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(float a,float b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(long a,long b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: max(float a,float b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(long a,long b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(double a,double b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(int a,int b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: mul(long x,long y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(double x,double y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(int x,int y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: bitwiseAnd(int x,int y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: bitwiseAnd(long x,long y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: bitwiseOr(int x,int y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseOr(long x,long y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: lshift(int x,int y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: lshift(long x,long y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: rshiftSigned(int x,int y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: rshiftSigned(long x,long y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: rshiftUnsigned(long x,long y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: rshiftUnsigned(int x,int y)\nJavadoc: @return x >>> y\nCondition: "
        },
        {
            "condition": "!receiverObjectID.isOnCarrier() ? methodResultID==null",
            "parameters": [
                ""
            ],
            "signature": "getCarrier()",
            "tag": "@return The carrier this unit is aboard, or null if none.",
            "tag_type": "returnTag",
            "prompt": "Signature: get(java.lang.Object key)\nJavadoc: @return the value to which this map maps the specified key, or null if the map contains no mapping for this key.\nCondition: receiverObjectID.containsKey(key)==false ? methodResultID==null\n\n###\n\nSignature: canMoveToEurope()\nJavadoc: @return True if this player has an instance of Europe.\nCondition: receiverObjectID.getEurope() != null ? methodResultID==true\n\n###\n\nSignature: emptyToNull(java.lang.String string)\nJavadoc: @return string itself if it is nonempty; null if it is empty or null\nCondition: string==null || string.isEmpty() ? methodResultID==null : methodResultID.equals(string)\n\n###\n\nSignature: hasHighSeasMove()\nJavadoc: @return True if the unit can either move immediately to the high seas or can make a move to a neighbouring high seas tile.\nCondition: receiverObjectID.canMoveToHighSeas() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference,java.lang.String errorMessageTemplate,java.lang.Object[] errorMessageArgs)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: getType()\nJavadoc: @return This.\nCondition: true ? methodResultID==receiverObjectID\n\n###\n\nSignature: getEurope()\nJavadoc: @return The Europe object, or null if the player is not European or indpendent.\nCondition: (receiverObjectID.isEuropean())==false?methodResultID==null\n\n###\n\nSignature: nullToEmpty(java.lang.String string)\nJavadoc: @return string itself if it is non-null; \"\" if it is null\nCondition: string!=null ? methodResultID.equals(string) : methodResultID.equals(\"\") \n\n###\n\nSignature: doForward(java.lang.Object a)\nJavadoc: @return the converted instance; must not be null\nCondition: true?(methodResultID==null)==false\n\n###\n\nSignature: doBackward(java.lang.Object b)\nJavadoc: @return the converted instance; must not be null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: obtains(net.sf.freecol.common.model.Unit unit)\nJavadoc: @return True if the unit can be moved.\nCondition: unit.couldMove() ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: asRegex(java.lang.String s)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: asRegex(java.lang.String s,int groups)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: getFromSet(java.util.Set set,java.lang.Object key)\nJavadoc: @return the object in this set that is equal to key, or null\nCondition: true?(methodResultID==key||methodResultID==null)\n\n###\n\nSignature: firstNonNull(java.lang.Object first,java.lang.Object second)\nJavadoc: @return first if it is non-null; otherwise second if it is non-null\nCondition: first != null ? methodResultID == first ; first == null && second != null ? methodResultID == second\n\n###\n\nSignature: hasTile()\nJavadoc: @return True if this unit is on a tile.\nCondition: receiverObjectID.getTile()!=null ? methodResultID==true\n\n###\n\nSignature: isCarrier()\nJavadoc: @return True if this unit can carry goods or other units.\nCondition: (receiverObjectID.canCarryGoods() || receiverObjectID.canCarryUnits()) ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: hasGoodsCargo()\nJavadoc: @return True if the unit is carrying any goods cargo.\nCondition: receiverObjectID.getGoodsSpaceTaken() > 0 ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: hasCargo()\nJavadoc: @return True if the unit is carrying any cargo.\nCondition: receiverObjectID.getCargoSpaceTaken() > 0 ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: getCarrier()\nJavadoc: @return The carrier this unit is aboard, or null if none.\nCondition: "
        },
        {
            "condition": "receiverObjectID.getCargoSpaceTaken() > 0 ? methodResultID == true : methodResultID == false",
            "parameters": [
                ""
            ],
            "signature": "hasCargo()",
            "tag": "@return True if the unit is carrying any cargo.",
            "tag_type": "returnTag",
            "prompt": "Signature: owns(net.sf.freecol.common.model.Ownable ownable)\nJavadoc: @return True if the Ownable is ours.\nCondition: receiverObjectID.equals(ownable.getOwner()) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: canMoveToEurope()\nJavadoc: @return True if this player has an instance of Europe.\nCondition: receiverObjectID.getEurope() != null ? methodResultID==true\n\n###\n\nSignature: empty()\nJavadoc: @return true if the stack is currently empty\nCondition: receiverObjectID.isEmpty() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: all_null(java.lang.Object[] a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: java.util.Arrays.asList(a).stream().allMatch(e -> e==null)?methodResultID==true : methodResultID==false\n\n###\n\nSignature: all_null(java.util.List a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: a.stream().allMatch(e -> e==null) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: emptyBag()\nJavadoc: @return an empty Bag\nCondition: true ? methodResultID.equals(receiverObjectID.EMPTY_BAG)\n\n###\n\nSignature: sizeIsEmpty(java.lang.Object object)\nJavadoc: @return true if empty or null\nCondition: object.isEmpty() || object==null ? methodResultID==true\n\n###\n\nSignature: isEmpty(java.util.Collection coll)\nJavadoc: @return true if empty or null\nCondition: coll.isEmpty() || coll==null ? methodResultID==true\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: hasTile()\nJavadoc: @return True if this unit is on a tile.\nCondition: receiverObjectID.getTile()!=null ? methodResultID==true\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: hasHighSeasMove()\nJavadoc: @return True if the unit can either move immediately to the high seas or can make a move to a neighbouring high seas tile.\nCondition: receiverObjectID.canMoveToHighSeas() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: add(E object)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object, int count)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: hasSpaceLeft()\nJavadoc: @return True if there is free space.\nCondition: receiverObjectID.getSpaceLeft() > 0 ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: obtains(net.sf.freecol.common.model.Unit unit)\nJavadoc: @return True if the unit can be moved.\nCondition: unit.couldMove() ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: getCarrier()\nJavadoc: @return The carrier this unit is aboard, or null if none.\nCondition: !receiverObjectID.isOnCarrier() ? methodResultID==null\n\n###\n\nSignature: isCarrier()\nJavadoc: @return True if this unit can carry goods or other units.\nCondition: (receiverObjectID.canCarryGoods() || receiverObjectID.canCarryUnits()) ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: hasGoodsCargo()\nJavadoc: @return True if the unit is carrying any goods cargo.\nCondition: receiverObjectID.getGoodsSpaceTaken() > 0 ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: hasCargo()\nJavadoc: @return True if the unit is carrying any cargo.\nCondition: "
        },
        {
            "condition": "true ? methodResultID.equals(receiverObjectID.peek())",
            "parameters": [
                ""
            ],
            "signature": "peek()",
            "tag": "@return the top item on the stack",
            "tag_type": "returnTag",
            "prompt": "Signature: rshiftUnsigned(long x,long y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: min(int a,int b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(double a,double b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(float a,float b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(long a,long b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: emptyToNull(java.lang.String string)\nJavadoc: @return string itself if it is nonempty; null if it is empty or null\nCondition: string==null || string.isEmpty() ? methodResultID==null : methodResultID.equals(string)\n\n###\n\nSignature: nullToEmpty(java.lang.String string)\nJavadoc: @return string itself if it is non-null; \"\" if it is null\nCondition: string!=null ? methodResultID.equals(string) : methodResultID.equals(\"\") \n\n###\n\nSignature: emptyBag()\nJavadoc: @return an empty Bag\nCondition: true ? methodResultID.equals(receiverObjectID.EMPTY_BAG)\n\n###\n\nSignature: emptySortedBag()\nJavadoc: @return an empty sorted Bag\nCondition: true ? methodResultID.equals(receiverObjectID.EMPTY_SORTED_BAG)\n\n###\n\nSignature: firstNonNull(java.lang.Object first,java.lang.Object second)\nJavadoc: @return first if it is non-null; otherwise second if it is non-null\nCondition: first != null ? methodResultID == first ; first == null && second != null ? methodResultID == second\n\n###\n\nSignature: getType()\nJavadoc: @return This.\nCondition: true ? methodResultID==receiverObjectID\n\n###\n\nSignature: getFromSet(java.util.Set set,java.lang.Object key)\nJavadoc: @return the object in this set that is equal to key, or null\nCondition: true?(methodResultID==key||methodResultID==null)\n\n###\n\nSignature: forAllButLastDo(java.lang.Iterable collection,org.apache.commons.collections4.Closure closure)\nJavadoc: @return the last element in the collection, or null if either collection or closure is null\nCondition: (collection==null || closure==null) ? methodResultID==null : collection.get(collection.size() - 1)\n\n###\n\nSignature: asRegex(java.lang.String s,int groups)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: asRegex(java.lang.String s)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: forAllButLastDo(java.util.Iterator iterator,org.apache.commons.collections4.Closure closure)\nJavadoc: @return the last element in the collection, or null if either iterator or closure is null\nCondition: iterator==null || closure==null ? methodResultID==null\n\n###\n\nSignature: push(java.lang.Object item)\nJavadoc: @return the item just pushed\nCondition: true ? methodResultID.equals(item)\n\n###\n\nSignature: empty()\nJavadoc: @return true if the stack is currently empty\nCondition: receiverObjectID.isEmpty() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: search(java.lang.Object object)\nJavadoc: @return the 1-based depth into the stack of the object, or -1 if not found\nCondition: receiverObjectID.contains(object) ? methodResultID==receiverObjectID.indexOf(object)+1 : methodResultID==-1\n\n###\n\nSignature: peek(int n)\nJavadoc: @return the n'th item on the stack, zero relative\nCondition: true ? methodResultID.equals(receiverObjectID.get(receiverObjectID.size() - n)-1)\n\n###\n\nSignature: peek()\nJavadoc: @return the top item on the stack\nCondition: "
        },
        {
            "condition": "a<=b ? methodResultID==b : methodResultID==a",
            "parameters": [
                "'a'",
                " 'b'"
            ],
            "signature": "max(float a,float b)",
            "tag": "@return b if a is lesser or equal to b, a otherwise",
            "tag_type": "returnTag",
            "prompt": "Signature: div(int x,int y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: mod_positive(long x,long y)\nJavadoc: @return x % y, where the result is constrained to be positive\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: mod_positive(int x,int y)\nJavadoc: @return x % y, where the result is constrained to be positive\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: rshiftUnsigned(int x,int y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: rshiftUnsigned(long x,long y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: rshiftSigned(long x,long y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: rshiftSigned(int x,int y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: bitwiseOr(int x,int y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseOr(long x,long y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: gte(double d1, double d2)\nJavadoc: @return whether d1 > d2.\nCondition: d1>d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: gt(double d1, double d2)\nJavadoc: @return whether d1 > d2.\nCondition: d1>d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: lte(double d1, double d2)\nJavadoc: @return whether d1 <= d2.\nCondition: d1<=d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: lt(double d1, double d2)\nJavadoc: @return whether d1 < d2.\nCondition: d1<d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: min(int a,int b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(double a,double b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(float a,float b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(long a,long b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: max(long a,long b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(double a,double b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(int a,int b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(float a,float b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: "
        },
        {
            "condition": "true?methodResultID==(x&y)",
            "parameters": [
                "'x'",
                " 'y'"
            ],
            "signature": "bitwiseAnd(long x,long y)",
            "tag": "@return x & y",
            "tag_type": "returnTag",
            "prompt": "Signature: rshiftSigned(int x,int y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: rshiftSigned(long x,long y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: lshift(int x,int y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: lshift(long x,long y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: addAndCheck(int x,int y)\nJavadoc: @return the sum x+y\nCondition: true ? methodResultID==x+y\n\n###\n\nSignature: logicalOr(int x,int y)\nJavadoc: @return the logical or of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalOr(long x,long y)\nJavadoc: @return the logical or of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalAnd(int x,int y)\nJavadoc: @return the logical and of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalAnd(long x,long y)\nJavadoc: @return the logical and of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: bitwiseXor(long x,long y)\nJavadoc: @return x ^ y\nCondition: true?methodResultID==(x^y)\n\n###\n\nSignature: bitwiseXor(int x,int y)\nJavadoc: @return x ^ y\nCondition: true?methodResultID==(x^y)\n\n###\n\nSignature: bitwiseOr(int x,int y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseOr(long x,long y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: div(int x,int y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(double x,double y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(long x,long y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: mul(long x,long y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(double x,double y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(int x,int y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: bitwiseAnd(int x,int y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: bitwiseAnd(long x,long y)\nJavadoc: @return x & y\nCondition: "
        },
        {
            "condition": "(receiverObjectID.containsVertex(v))==false ? methodResultID==true:methodResultID==false",
            "parameters": [
                "'v'"
            ],
            "signature": "addVertex(java.lang.Object v)",
            "tag": "@return true if this graph did not already contain the specified vertex.",
            "tag_type": "returnTag",
            "prompt": "Signature: findSimpleCycles()\nJavadoc: @return The list of all simple cycles. Possibly empty but never null.\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: all_null(java.util.List a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: a.stream().allMatch(e -> e==null) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: all_null(java.lang.Object[] a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: java.util.Arrays.asList(a).stream().allMatch(e -> e==null)?methodResultID==true : methodResultID==false\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: empty()\nJavadoc: @return true if the stack is currently empty\nCondition: receiverObjectID.isEmpty() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: isEmpty(java.util.Collection coll)\nJavadoc: @return true if empty or null\nCondition: coll.isEmpty() || coll==null ? methodResultID==true\n\n###\n\nSignature: sizeIsEmpty(java.lang.Object object)\nJavadoc: @return true if empty or null\nCondition: object.isEmpty() || object==null ? methodResultID==true\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: add(E object, int count)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: intersectionCardinalityAtLeast(java.util.BitSet a,java.util.BitSet b,int i)\nJavadoc: @return true iff size(a intersect b) \u2265 i\nCondition: receiverObjectID.intersectionCardinality(a,b)>=i ? methodResultID==true\n\n###\n\nSignature: hasSpaceLeft()\nJavadoc: @return True if there is free space.\nCondition: receiverObjectID.getSpaceLeft() > 0 ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: intersectionCardinalityAtLeast(java.util.BitSet a,java.util.BitSet b,java.util.BitSet c,int i)\nJavadoc: @return true iff size(a intersect b intersect c) \u2265 i\nCondition: receiverObjectID.intersectionCardinality(a,b,c)>=i ? methodResultID==true\n\n###\n\nSignature: contains(org.graphstream.graph.Node node)\nJavadoc: @return true if the path contains the node.\nCondition: receiverObjectID.getNodePath().contains(node) ? methodResultID==true\n\n###\n\nSignature: contains(org.graphstream.graph.Edge edge)\nJavadoc: @return true if the path contains the edge.\nCondition: receiverObjectID.getEdgePath().contains(edge) ? methodResultID==true\n\n###\n\nSignature: removeEdge(java.lang.Object e)\nJavadoc: @return true if and only if the graph contained the specified edge.\nCondition: receiverObjectID.containsEdge(e) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: addEdgeWithVertices(org.jgrapht.Graph targetGraph,org.jgrapht.Graph sourceGraph,java.lang.Object edge)\nJavadoc: @return true if the target graph did not already contain the specified edge.\nCondition: (targetGraph.containsEdge(edge))==false?methodResultID==true:methodResultID==false\n\n###\n\nSignature: removeVertex(java.lang.Object v)\nJavadoc: @return true if the graph contained the specified vertex; false otherwise.\nCondition: receiverObjectID.containsVertex(v) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: addEdge(java.lang.Object sourceVertex,java.lang.Object targetVertex,java.lang.Object e)\nJavadoc: @return true if this graph did not already contain the specified edge.\nCondition: (receiverObjectID.containsEdge(sourceVertex,targetVertex))==false?methodResultID==true:methodResultID==false\n\n###\n\nSignature: addVertex(java.lang.Object v)\nJavadoc: @return true if this graph did not already contain the specified vertex.\nCondition: "
        },
        {
            "condition": "turn==null ? methodResultID == true : methodResultID==false",
            "parameters": [
                "'turn'"
            ],
            "signature": "appliesTo(net.sf.freecol.common.model.Turn turn)",
            "tag": "@return True if the turn is null or not outside a valid time limit.",
            "tag_type": "returnTag",
            "prompt": "Signature: getDead()\nJavadoc: @return True if this Player is dead.\nCondition: receiverObjectID.isDead()?methodResultID==true:methodResultID==false\n\n###\n\nSignature: removeLRU(org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry entry)\nJavadoc: @return true\nCondition: true ? methodResultID==true\n\n###\n\nSignature: convert(java.lang.Object a)\nJavadoc: @return the converted value; is null if and only if a is null\nCondition: a==null ? methodResultID==null : methodResultID!=null\n\n###\n\nSignature: isREF()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: isEuropean()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: all_null(java.lang.Object[] a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: java.util.Arrays.asList(a).stream().allMatch(e -> e==null)?methodResultID==true : methodResultID==false\n\n###\n\nSignature: all_null(java.util.List a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: a.stream().allMatch(e -> e==null) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: hasExplored(net.sf.freecol.common.model.Tile tile)\nJavadoc: @return True if the Tile has been explored.\nCondition: tile.isExplored() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: isIndian()\nJavadoc: @return True.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: firstNonNull(java.lang.Object first,java.lang.Object second)\nJavadoc: @return first if it is non-null; otherwise second if it is non-null\nCondition: first != null ? methodResultID == first ; first == null && second != null ? methodResultID == second\n\n###\n\nSignature: add(E element)\nJavadoc: @return Always true.\nCondition: true? methodResultID==true\n\n###\n\nSignature: isNullOrEmpty(java.lang.String string)\nJavadoc: @return true if the string is null or is the empty string\nCondition: string==null || string.isEmpty() ? methodResultID==true\n\n###\n\nSignature: add(E object)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object, int count)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: empty()\nJavadoc: @return true if the stack is currently empty\nCondition: receiverObjectID.isEmpty() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: isEmpty(java.util.Collection coll)\nJavadoc: @return true if empty or null\nCondition: coll.isEmpty() || coll==null ? methodResultID==true\n\n###\n\nSignature: sizeIsEmpty(java.lang.Object object)\nJavadoc: @return true if empty or null\nCondition: object.isEmpty() || object==null ? methodResultID==true\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: appliesTo(net.sf.freecol.common.model.Turn turn)\nJavadoc: @return True if the turn is null or not outside a valid time limit.\nCondition: "
        },
        {
            "condition": "true?methodResultID==(x^y)",
            "parameters": [
                "'x'",
                " 'y'"
            ],
            "signature": "bitwiseXor(int x,int y)",
            "tag": "@return x ^ y",
            "tag_type": "returnTag",
            "prompt": "Signature: mod(long x,long y)\nJavadoc: @return x % y\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: mulAndCheck(long a,long b)\nJavadoc: @return the product a * b.\nCondition: true ? methodResultID==a*b\n\n###\n\nSignature: rshiftSigned(long x,long y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: rshiftSigned(int x,int y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: rshiftUnsigned(int x,int y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: rshiftUnsigned(long x,long y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: bitwiseOr(int x,int y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseOr(long x,long y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: lshift(int x,int y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: lshift(long x,long y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: div(int x,int y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(long x,long y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(double x,double y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: mulAndCheck(int x,int y)\nJavadoc: @return the product x * y.\nCondition: true ? methodResultID==x*y\n\n###\n\nSignature: bitwiseAnd(int x,int y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: bitwiseAnd(long x,long y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: mul(long x,long y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(double x,double y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(int x,int y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: bitwiseXor(long x,long y)\nJavadoc: @return x ^ y\nCondition: true?methodResultID==(x^y)\n\n###\n\nSignature: bitwiseXor(int x,int y)\nJavadoc: @return x ^ y\nCondition: "
        },
        {
            "condition": "(receiverObjectID.canCarryGoods() || receiverObjectID.canCarryUnits()) ? methodResultID==true:methodResultID==false",
            "parameters": [
                ""
            ],
            "signature": "isCarrier()",
            "tag": "@return True if this unit can carry goods or other units.",
            "tag_type": "returnTag",
            "prompt": "Signature: all_null(java.lang.Object[] a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: java.util.Arrays.asList(a).stream().allMatch(e -> e==null)?methodResultID==true : methodResultID==false\n\n###\n\nSignature: firstNonNull(java.lang.Object first,java.lang.Object second)\nJavadoc: @return first if it is non-null; otherwise second if it is non-null\nCondition: first != null ? methodResultID == first ; first == null && second != null ? methodResultID == second\n\n###\n\nSignature: intersectionCardinalityAtLeast(java.util.BitSet a,java.util.BitSet b,java.util.BitSet c,int i)\nJavadoc: @return true iff size(a intersect b intersect c) \u2265 i\nCondition: receiverObjectID.intersectionCardinality(a,b,c)>=i ? methodResultID==true\n\n###\n\nSignature: isIndian()\nJavadoc: @return True.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference,java.lang.String errorMessageTemplate,java.lang.Object[] errorMessageArgs)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: owns(net.sf.freecol.common.model.Ownable ownable)\nJavadoc: @return True if the Ownable is ours.\nCondition: receiverObjectID.equals(ownable.getOwner()) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: emptyBag()\nJavadoc: @return an empty Bag\nCondition: true ? methodResultID.equals(receiverObjectID.EMPTY_BAG)\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: hasSpaceLeft()\nJavadoc: @return True if there is free space.\nCondition: receiverObjectID.getSpaceLeft() > 0 ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: add(E object)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object, int count)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: hasTile()\nJavadoc: @return True if this unit is on a tile.\nCondition: receiverObjectID.getTile()!=null ? methodResultID==true\n\n###\n\nSignature: hasHighSeasMove()\nJavadoc: @return True if the unit can either move immediately to the high seas or can make a move to a neighbouring high seas tile.\nCondition: receiverObjectID.canMoveToHighSeas() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: getCarrier()\nJavadoc: @return The carrier this unit is aboard, or null if none.\nCondition: !receiverObjectID.isOnCarrier() ? methodResultID==null\n\n###\n\nSignature: obtains(net.sf.freecol.common.model.Unit unit)\nJavadoc: @return True if the unit can be moved.\nCondition: unit.couldMove() ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: hasCargo()\nJavadoc: @return True if the unit is carrying any cargo.\nCondition: receiverObjectID.getCargoSpaceTaken() > 0 ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: hasGoodsCargo()\nJavadoc: @return True if the unit is carrying any goods cargo.\nCondition: receiverObjectID.getGoodsSpaceTaken() > 0 ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: isCarrier()\nJavadoc: @return True if this unit can carry goods or other units.\nCondition: "
        },
        {
            "condition": "receiverObjectID.equals(ownable.getOwner()) ? methodResultID==true : methodResultID==false",
            "parameters": [
                "'ownable'"
            ],
            "signature": "owns(net.sf.freecol.common.model.Ownable ownable)",
            "tag": "@return True if the Ownable is ours.",
            "tag_type": "returnTag",
            "prompt": "Signature: hasExplored(net.sf.freecol.common.model.Tile tile)\nJavadoc: @return True if the Tile has been explored.\nCondition: tile.isExplored() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: hasSpaceLeft()\nJavadoc: @return True if there is free space.\nCondition: receiverObjectID.getSpaceLeft() > 0 ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: hasTile()\nJavadoc: @return True if this unit is on a tile.\nCondition: receiverObjectID.getTile()!=null ? methodResultID==true\n\n###\n\nSignature: hasGoodsCargo()\nJavadoc: @return True if the unit is carrying any goods cargo.\nCondition: receiverObjectID.getGoodsSpaceTaken() > 0 ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: hasCargo()\nJavadoc: @return True if the unit is carrying any cargo.\nCondition: receiverObjectID.getCargoSpaceTaken() > 0 ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: sizeIsEmpty(java.lang.Object object)\nJavadoc: @return true if empty or null\nCondition: object.isEmpty() || object==null ? methodResultID==true\n\n###\n\nSignature: isEmpty(java.util.Collection coll)\nJavadoc: @return true if empty or null\nCondition: coll.isEmpty() || coll==null ? methodResultID==true\n\n###\n\nSignature: isCarrier()\nJavadoc: @return True if this unit can carry goods or other units.\nCondition: (receiverObjectID.canCarryGoods() || receiverObjectID.canCarryUnits()) ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: obtains(net.sf.freecol.common.model.Unit unit)\nJavadoc: @return True if the unit can be moved.\nCondition: unit.couldMove() ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: isEuropean()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: isREF()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: canMoveToEurope()\nJavadoc: @return True if this player has an instance of Europe.\nCondition: receiverObjectID.getEurope() != null ? methodResultID==true\n\n###\n\nSignature: add(E element)\nJavadoc: @return Always true.\nCondition: true? methodResultID==true\n\n###\n\nSignature: removeLRU(org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry entry)\nJavadoc: @return true\nCondition: true ? methodResultID==true\n\n###\n\nSignature: isIndian()\nJavadoc: @return True.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object, int count)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: owns(net.sf.freecol.common.model.Ownable ownable)\nJavadoc: @return True if the Ownable is ours.\nCondition: "
        },
        {
            "condition": "(collection==null || closure==null) ? methodResultID==null : collection.get(collection.size() - 1)",
            "parameters": [
                "'collection'",
                " 'closure'"
            ],
            "signature": "forAllButLastDo(java.lang.Iterable collection,org.apache.commons.collections4.Closure closure)",
            "tag": "@return the last element in the collection, or null if either collection or closure is null",
            "tag_type": "returnTag",
            "prompt": "Signature: getType()\nJavadoc: @return This.\nCondition: true ? methodResultID==receiverObjectID\n\n###\n\nSignature: reload(java.lang.Object key,java.lang.Object oldValue)\nJavadoc: @return the future new value associated with key; must not be null, must not return null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: forAllDo(java.lang.Iterable collection,org.apache.commons.collections4.Closure closure)\nJavadoc: @return closure\nCondition: true?methodResultID.equals(closure)\n\n###\n\nSignature: forAllDo(java.util.Iterator iterator,org.apache.commons.collections4.Closure closure)\nJavadoc: @return closure\nCondition: true?methodResultID.equals(closure)\n\n###\n\nSignature: load(java.lang.Object key)\nJavadoc: @return the value associated with key; must not be null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: emptyToNull(java.lang.String string)\nJavadoc: @return string itself if it is nonempty; null if it is empty or null\nCondition: string==null || string.isEmpty() ? methodResultID==null : methodResultID.equals(string)\n\n###\n\nSignature: nullToEmpty(java.lang.String string)\nJavadoc: @return string itself if it is non-null; \"\" if it is null\nCondition: string!=null ? methodResultID.equals(string) : methodResultID.equals(\"\") \n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b)\nJavadoc: @return a new sorted List, containing the elements of Collection a and b\nCondition: true ? result.containsAll(a) && result.containsAll(b)\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,boolean includeDuplicates)\nJavadoc: @return a new sorted List, containing the elements of Collection a and b\nCondition: true ? result.containsAll(a)\n\n###\n\nSignature: emptyBag()\nJavadoc: @return an empty Bag\nCondition: true ? methodResultID.equals(receiverObjectID.EMPTY_BAG)\n\n###\n\nSignature: emptySortedBag()\nJavadoc: @return an empty sorted Bag\nCondition: true ? methodResultID.equals(receiverObjectID.EMPTY_SORTED_BAG)\n\n###\n\nSignature: peek()\nJavadoc: @return the top item on the stack\nCondition: true ? methodResultID.equals(receiverObjectID.peek())\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference,java.lang.String errorMessageTemplate,java.lang.Object[] errorMessageArgs)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: peek(int n)\nJavadoc: @return the n'th item on the stack, zero relative\nCondition: true ? methodResultID.equals(receiverObjectID.get(receiverObjectID.size() - n)-1)\n\n###\n\nSignature: firstNonNull(java.lang.Object first,java.lang.Object second)\nJavadoc: @return first if it is non-null; otherwise second if it is non-null\nCondition: first != null ? methodResultID == first ; first == null && second != null ? methodResultID == second\n\n###\n\nSignature: getFromSet(java.util.Set set,java.lang.Object key)\nJavadoc: @return the object in this set that is equal to key, or null\nCondition: true?(methodResultID==key||methodResultID==null)\n\n###\n\nSignature: size(java.lang.Object object)\nJavadoc: @return the size of the specified collection or 0 if the object was null\nCondition: object==null ? methodResultID == 0\n\n###\n\nSignature: emptyIfNull(java.util.Collection collection)\nJavadoc: @return an empty collection if the argument is null\nCondition: collection==null ? methodResultID.equals(org.apache.commons.collections4.CollectionUtils.emptyCollection())\n\n###\n\nSignature: forAllButLastDo(java.util.Iterator iterator,org.apache.commons.collections4.Closure closure)\nJavadoc: @return the last element in the collection, or null if either iterator or closure is null\nCondition: iterator==null || closure==null ? methodResultID==null\n\n###\n\nSignature: forAllButLastDo(java.lang.Iterable collection,org.apache.commons.collections4.Closure closure)\nJavadoc: @return the last element in the collection, or null if either collection or closure is null\nCondition: "
        },
        {
            "condition": "methodResultID.equals(receiverObjectID)",
            "parameters": [
                ""
            ],
            "signature": "copy()",
            "tag": "@return a copy of this.",
            "tag_type": "returnTag",
            "prompt": "Signature: mul(long x,long y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: getDiagonal()\nJavadoc: @return The diagonal.\nCondition: true ? methodResultID == receiverObjectID.diagonal\n\n###\n\nSignature: nullToEmpty(java.lang.String string)\nJavadoc: @return string itself if it is non-null; \"\" if it is null\nCondition: string!=null ? methodResultID.equals(string) : methodResultID.equals(\"\") \n\n###\n\nSignature: bitwiseAnd(int x,int y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: bitwiseAnd(long x,long y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: lshift(long x,long y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: lshift(int x,int y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: add(E object)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object, int count)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: rshiftSigned(long x,long y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: rshiftSigned(int x,int y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference,java.lang.String errorMessageTemplate,java.lang.Object[] errorMessageArgs)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: bitwiseXor(int x,int y)\nJavadoc: @return x ^ y\nCondition: true?methodResultID==(x^y)\n\n###\n\nSignature: bitwiseXor(long x,long y)\nJavadoc: @return x ^ y\nCondition: true?methodResultID==(x^y)\n\n###\n\nSignature: asRegex(java.lang.String s,int groups)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: asRegex(java.lang.String s)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: rshiftUnsigned(long x,long y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: rshiftUnsigned(int x,int y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: getType()\nJavadoc: @return This.\nCondition: true ? methodResultID==receiverObjectID\n\n###\n\nSignature: copy()\nJavadoc: @return a copy of this.\nCondition: "
        },
        {
            "condition": "unit.couldMove() ? methodResultID == true : methodResultID == false",
            "parameters": [
                "'unit'"
            ],
            "signature": "obtains(net.sf.freecol.common.model.Unit unit)",
            "tag": "@return True if the unit can be moved.",
            "tag_type": "returnTag",
            "prompt": "Signature: intersectionCardinalityAtLeast(java.util.BitSet a,java.util.BitSet b,int i)\nJavadoc: @return true iff size(a intersect b) \u2265 i\nCondition: receiverObjectID.intersectionCardinality(a,b)>=i ? methodResultID==true\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: isInDanger(int range,float threat)\nJavadoc: @return True if a threat was found.\nCondition: receiverObjectID.searchForDanger(range, threat)!=null ? methodResultID==true\n\n###\n\nSignature: isEuropean()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: isREF()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: getCarrier()\nJavadoc: @return The carrier this unit is aboard, or null if none.\nCondition: !receiverObjectID.isOnCarrier() ? methodResultID==null\n\n###\n\nSignature: add(E element)\nJavadoc: @return Always true.\nCondition: true? methodResultID==true\n\n###\n\nSignature: canMoveToEurope()\nJavadoc: @return True if this player has an instance of Europe.\nCondition: receiverObjectID.getEurope() != null ? methodResultID==true\n\n###\n\nSignature: removeLRU(org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry entry)\nJavadoc: @return true\nCondition: true ? methodResultID==true\n\n###\n\nSignature: owns(net.sf.freecol.common.model.Ownable ownable)\nJavadoc: @return True if the Ownable is ours.\nCondition: receiverObjectID.equals(ownable.getOwner()) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: isIndian()\nJavadoc: @return True.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: hasSpaceLeft()\nJavadoc: @return True if there is free space.\nCondition: receiverObjectID.getSpaceLeft() > 0 ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: add(E object, int count)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: hasGoodsCargo()\nJavadoc: @return True if the unit is carrying any goods cargo.\nCondition: receiverObjectID.getGoodsSpaceTaken() > 0 ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: hasCargo()\nJavadoc: @return True if the unit is carrying any cargo.\nCondition: receiverObjectID.getCargoSpaceTaken() > 0 ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: hasTile()\nJavadoc: @return True if this unit is on a tile.\nCondition: receiverObjectID.getTile()!=null ? methodResultID==true\n\n###\n\nSignature: isCarrier()\nJavadoc: @return True if this unit can carry goods or other units.\nCondition: (receiverObjectID.canCarryGoods() || receiverObjectID.canCarryUnits()) ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: hasHighSeasMove()\nJavadoc: @return True if the unit can either move immediately to the high seas or can make a move to a neighbouring high seas tile.\nCondition: receiverObjectID.canMoveToHighSeas() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: obtains(net.sf.freecol.common.model.Unit unit)\nJavadoc: @return True if the unit can be moved.\nCondition: "
        },
        {
            "condition": "true ? methodResultID==x*y",
            "parameters": [
                "'x'",
                " 'y'"
            ],
            "signature": "mulAndCheck(int x,int y)",
            "tag": "@return the product x * y.",
            "tag_type": "returnTag",
            "prompt": "Signature: lshift(int x,int y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: lshift(long x,long y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: logicalXor(long x,long y)\nJavadoc: @return the logical xor of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalXor(int x,int y)\nJavadoc: @return the logical xor of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalOr(int x,int y)\nJavadoc: @return the logical or of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalOr(long x,long y)\nJavadoc: @return the logical or of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalAnd(int x,int y)\nJavadoc: @return the logical and of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalAnd(long x,long y)\nJavadoc: @return the logical and of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: div(double x,double y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(int x,int y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(long x,long y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: addAndCheck(int x,int y)\nJavadoc: @return the sum x+y\nCondition: true ? methodResultID==x+y\n\n###\n\nSignature: bitwiseAnd(long x,long y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: bitwiseAnd(int x,int y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: bitwiseXor(int x,int y)\nJavadoc: @return x ^ y\nCondition: true?methodResultID==(x^y)\n\n###\n\nSignature: bitwiseXor(long x,long y)\nJavadoc: @return x ^ y\nCondition: true?methodResultID==(x^y)\n\n###\n\nSignature: mul(double x,double y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(long x,long y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(int x,int y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mulAndCheck(long a,long b)\nJavadoc: @return the product a * b.\nCondition: true ? methodResultID==a*b\n\n###\n\nSignature: mulAndCheck(int x,int y)\nJavadoc: @return the product x * y.\nCondition: "
        },
        {
            "condition": "true ? methodResultID.equals(receiverObjectID.size)",
            "parameters": [
                ""
            ],
            "signature": "getSize()",
            "tag": "@return The size.",
            "tag_type": "returnTag",
            "prompt": "Signature: getParameter(java.lang.String parameter)\nJavadoc: @return The parameter value (empty string if not set).\nCondition: !receiverObjectID.hasParameter(parameter) ? methodResultID.equals(\"\")\n\n###\n\nSignature: getType()\nJavadoc: @return This.\nCondition: true ? methodResultID==receiverObjectID\n\n###\n\nSignature: bitwiseAnd(long x,long y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: bitwiseAnd(int x,int y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: mul(double x,double y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(int x,int y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(long x,long y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mod(long x,long y)\nJavadoc: @return x % y\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: mod(int x,int y)\nJavadoc: @return x % y\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: evaluate(double[] values, double[] weights, int begin, int length)\nJavadoc: @return the sum of the values or 0 if length = 0.\nCondition: length==0 ? methodResultID==0\n\n###\n\nSignature: evaluate(double[] values, int begin, int length)\nJavadoc: @return the sum of the values or 0 if length = 0.\nCondition: length==0 ? methodResultID==0\n\n###\n\nSignature: intersectionCardinalityAtLeast(java.util.BitSet a,java.util.BitSet b,java.util.BitSet c,int i)\nJavadoc: @return true iff size(a intersect b intersect c) \u2265 i\nCondition: receiverObjectID.intersectionCardinality(a,b,c)>=i ? methodResultID==true\n\n###\n\nSignature: hasSpaceLeft()\nJavadoc: @return True if there is free space.\nCondition: receiverObjectID.getSpaceLeft() > 0 ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: asRegex(java.lang.String s,int groups)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: asRegex(java.lang.String s)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: intersectionCardinalityAtLeast(java.util.BitSet a,java.util.BitSet b,int i)\nJavadoc: @return true iff size(a intersect b) \u2265 i\nCondition: receiverObjectID.intersectionCardinality(a,b)>=i ? methodResultID==true\n\n###\n\nSignature: div(long x,long y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(int x,int y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(double x,double y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: size(java.lang.Object object)\nJavadoc: @return the size of the specified collection or 0 if the object was null\nCondition: object==null ? methodResultID == 0\n\n###\n\nSignature: getSize()\nJavadoc: @return The size.\nCondition: "
        },
        {
            "condition": "true?methodResultID==x%y",
            "parameters": [
                "'x'",
                " 'y'"
            ],
            "signature": "mod_positive(int x,int y)",
            "tag": "@return x % y, where the result is constrained to be positive",
            "tag_type": "returnTag",
            "prompt": "Signature: bitwiseAnd(int x,int y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: bitwiseOr(long x,long y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseOr(int x,int y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: min(float a,float b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(double a,double b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(long a,long b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(int a,int b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: max(double a,double b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(float a,float b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(long a,long b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(int a,int b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: mul(double x,double y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(long x,long y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(int x,int y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: div(double x,double y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(int x,int y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(long x,long y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: mod(long x,long y)\nJavadoc: @return x % y\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: mod(int x,int y)\nJavadoc: @return x % y\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: mod_positive(long x,long y)\nJavadoc: @return x % y, where the result is constrained to be positive\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: mod_positive(int x,int y)\nJavadoc: @return x % y, where the result is constrained to be positive\nCondition: "
        },
        {
            "condition": "receiverObjectID.containsVertex(v) ? methodResultID==true : methodResultID==false",
            "parameters": [
                "'v'"
            ],
            "signature": "removeVertex(java.lang.Object v)",
            "tag": "@return true if the graph contained the specified vertex; false otherwise.",
            "tag_type": "returnTag",
            "prompt": "Signature: isEuropean()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: isInDanger(int range,float threat)\nJavadoc: @return True if a threat was found.\nCondition: receiverObjectID.searchForDanger(range, threat)!=null ? methodResultID==true\n\n###\n\nSignature: isIndian()\nJavadoc: @return True.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: findSimpleCycles()\nJavadoc: @return The list of all simple cycles. Possibly empty but never null.\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: hasSpaceLeft()\nJavadoc: @return True if there is free space.\nCondition: receiverObjectID.getSpaceLeft() > 0 ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: isEmpty(java.util.Collection coll)\nJavadoc: @return true if empty or null\nCondition: coll.isEmpty() || coll==null ? methodResultID==true\n\n###\n\nSignature: sizeIsEmpty(java.lang.Object object)\nJavadoc: @return true if empty or null\nCondition: object.isEmpty() || object==null ? methodResultID==true\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: intersectionCardinalityAtLeast(java.util.BitSet a,java.util.BitSet b,int i)\nJavadoc: @return true iff size(a intersect b) \u2265 i\nCondition: receiverObjectID.intersectionCardinality(a,b)>=i ? methodResultID==true\n\n###\n\nSignature: add(E object, int count)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: intersectionCardinalityAtLeast(java.util.BitSet a,java.util.BitSet b,java.util.BitSet c,int i)\nJavadoc: @return true iff size(a intersect b intersect c) \u2265 i\nCondition: receiverObjectID.intersectionCardinality(a,b,c)>=i ? methodResultID==true\n\n###\n\nSignature: contains(org.graphstream.graph.Node node)\nJavadoc: @return true if the path contains the node.\nCondition: receiverObjectID.getNodePath().contains(node) ? methodResultID==true\n\n###\n\nSignature: contains(org.graphstream.graph.Edge edge)\nJavadoc: @return true if the path contains the edge.\nCondition: receiverObjectID.getEdgePath().contains(edge) ? methodResultID==true\n\n###\n\nSignature: addEdgeWithVertices(org.jgrapht.Graph targetGraph,org.jgrapht.Graph sourceGraph,java.lang.Object edge)\nJavadoc: @return true if the target graph did not already contain the specified edge.\nCondition: (targetGraph.containsEdge(edge))==false?methodResultID==true:methodResultID==false\n\n###\n\nSignature: addEdge(java.lang.Object sourceVertex,java.lang.Object targetVertex,java.lang.Object e)\nJavadoc: @return true if this graph did not already contain the specified edge.\nCondition: (receiverObjectID.containsEdge(sourceVertex,targetVertex))==false?methodResultID==true:methodResultID==false\n\n###\n\nSignature: removeEdge(java.lang.Object e)\nJavadoc: @return true if and only if the graph contained the specified edge.\nCondition: receiverObjectID.containsEdge(e) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: addVertex(java.lang.Object v)\nJavadoc: @return true if this graph did not already contain the specified vertex.\nCondition: (receiverObjectID.containsVertex(v))==false ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: removeVertex(java.lang.Object v)\nJavadoc: @return true if the graph contained the specified vertex; false otherwise.\nCondition: "
        },
        {
            "condition": "d1>d2 ? methodResultID==true:methodResultID==false",
            "parameters": [
                "'d1'",
                " 'd2'"
            ],
            "signature": "gt(double d1, double d2)",
            "tag": "@return whether d1 > d2.",
            "tag_type": "returnTag",
            "prompt": "Signature: rshiftSigned(int x,int y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: rshiftSigned(long x,long y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: subAndCheck(int x,int y)\nJavadoc: @return the difference x - y.\nCondition: true ? methodResultID==x-y\n\n###\n\nSignature: logicalOr(long x,long y)\nJavadoc: @return the logical or of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalOr(int x,int y)\nJavadoc: @return the logical or of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: rshiftUnsigned(long x,long y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: rshiftUnsigned(int x,int y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: subAndCheck(long a,long b)\nJavadoc: @return the difference a - b.\nCondition: true ? methodResultID==a-b\n\n###\n\nSignature: min(double a,double b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(float a,float b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(int a,int b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(long a,long b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: max(float a,float b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(long a,long b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(int a,int b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(double a,double b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: ne(double d1, double d2)\nJavadoc: @return whether d1 and d2 are non-equal.\nCondition: d1!=d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: lte(double d1, double d2)\nJavadoc: @return whether d1 <= d2.\nCondition: d1<=d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: lt(double d1, double d2)\nJavadoc: @return whether d1 < d2.\nCondition: d1<d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: gte(double d1, double d2)\nJavadoc: @return whether d1 > d2.\nCondition: d1>d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: gt(double d1, double d2)\nJavadoc: @return whether d1 > d2.\nCondition: "
        },
        {
            "condition": "true ? methodResultID!=null",
            "parameters": [
                "'reference'"
            ],
            "signature": "verifyNotNull(java.lang.Object reference)",
            "tag": "@return reference, guaranteed to be non-null, for convenience",
            "tag_type": "returnTag",
            "prompt": "Signature: reload(java.lang.Object key,java.lang.Object oldValue)\nJavadoc: @return the future new value associated with key; must not be null, must not return null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: add(E object)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object, int count)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: asRegex(java.lang.String s,int groups)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: asRegex(java.lang.String s)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: all_null(java.util.List a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: a.stream().allMatch(e -> e==null) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: all_null(java.lang.Object[] a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: java.util.Arrays.asList(a).stream().allMatch(e -> e==null)?methodResultID==true : methodResultID==false\n\n###\n\nSignature: load(java.lang.Object key)\nJavadoc: @return the value associated with key; must not be null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: convert(java.lang.Object a)\nJavadoc: @return the converted value; is null if and only if a is null\nCondition: a==null ? methodResultID==null : methodResultID!=null\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: doForward(java.lang.Object a)\nJavadoc: @return the converted instance; must not be null\nCondition: true?(methodResultID==null)==false\n\n###\n\nSignature: doBackward(java.lang.Object b)\nJavadoc: @return the converted instance; must not be null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: emptyToNull(java.lang.String string)\nJavadoc: @return string itself if it is nonempty; null if it is empty or null\nCondition: string==null || string.isEmpty() ? methodResultID==null : methodResultID.equals(string)\n\n###\n\nSignature: getFromSet(java.util.Set set,java.lang.Object key)\nJavadoc: @return the object in this set that is equal to key, or null\nCondition: true?(methodResultID==key||methodResultID==null)\n\n###\n\nSignature: emptyIfNull(java.util.Collection collection)\nJavadoc: @return an empty collection if the argument is null\nCondition: collection==null ? methodResultID.equals(org.apache.commons.collections4.CollectionUtils.emptyCollection())\n\n###\n\nSignature: nullToEmpty(java.lang.String string)\nJavadoc: @return string itself if it is non-null; \"\" if it is null\nCondition: string!=null ? methodResultID.equals(string) : methodResultID.equals(\"\") \n\n###\n\nSignature: firstNonNull(java.lang.Object first,java.lang.Object second)\nJavadoc: @return first if it is non-null; otherwise second if it is non-null\nCondition: first != null ? methodResultID == first ; first == null && second != null ? methodResultID == second\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference,java.lang.String errorMessageTemplate,java.lang.Object[] errorMessageArgs)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: "
        },
        {
            "condition": "true ? methodResultID.equals(item)",
            "parameters": [
                "'item'"
            ],
            "signature": "push(java.lang.Object item)",
            "tag": "@return the item just pushed",
            "tag_type": "returnTag",
            "prompt": "Signature: search(java.lang.Object object)\nJavadoc: @return the 1-based depth into the stack of the object, or -1 if not found\nCondition: receiverObjectID.contains(object) ? methodResultID==receiverObjectID.indexOf(object)+1 : methodResultID==-1\n\n###\n\nSignature: mulAndCheck(long a,long b)\nJavadoc: @return the product a * b.\nCondition: true ? methodResultID==a*b\n\n###\n\nSignature: firstNonNull(java.lang.Object first,java.lang.Object second)\nJavadoc: @return first if it is non-null; otherwise second if it is non-null\nCondition: first != null ? methodResultID == first ; first == null && second != null ? methodResultID == second\n\n###\n\nSignature: obtains(net.sf.freecol.common.model.Unit unit)\nJavadoc: @return True if the unit can be moved.\nCondition: unit.couldMove() ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: reload(java.lang.Object key,java.lang.Object oldValue)\nJavadoc: @return the future new value associated with key; must not be null, must not return null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: doForward(java.lang.Object a)\nJavadoc: @return the converted instance; must not be null\nCondition: true?(methodResultID==null)==false\n\n###\n\nSignature: doBackward(java.lang.Object b)\nJavadoc: @return the converted instance; must not be null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: emptyQueue()\nJavadoc: @return an empty Queue\nCondition: true?methodResultID.equals(receiverObjectID.EMPTY_QUEUE)\n\n###\n\nSignature: empty()\nJavadoc: @return true if the stack is currently empty\nCondition: receiverObjectID.isEmpty() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: emptyBag()\nJavadoc: @return an empty Bag\nCondition: true ? methodResultID.equals(receiverObjectID.EMPTY_BAG)\n\n###\n\nSignature: load(java.lang.Object key)\nJavadoc: @return the value associated with key; must not be null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: copy()\nJavadoc: @return a copy of this.\nCondition: methodResultID.equals(receiverObjectID)\n\n###\n\nSignature: forAllButLastDo(java.util.Iterator iterator,org.apache.commons.collections4.Closure closure)\nJavadoc: @return the last element in the collection, or null if either iterator or closure is null\nCondition: iterator==null || closure==null ? methodResultID==null\n\n###\n\nSignature: getFromSet(java.util.Set set,java.lang.Object key)\nJavadoc: @return the object in this set that is equal to key, or null\nCondition: true?(methodResultID==key||methodResultID==null)\n\n###\n\nSignature: forAllButLastDo(java.lang.Iterable collection,org.apache.commons.collections4.Closure closure)\nJavadoc: @return the last element in the collection, or null if either collection or closure is null\nCondition: (collection==null || closure==null) ? methodResultID==null : collection.get(collection.size() - 1)\n\n###\n\nSignature: getType()\nJavadoc: @return This.\nCondition: true ? methodResultID==receiverObjectID\n\n###\n\nSignature: asRegex(java.lang.String s,int groups)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: asRegex(java.lang.String s)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: peek(int n)\nJavadoc: @return the n'th item on the stack, zero relative\nCondition: true ? methodResultID.equals(receiverObjectID.get(receiverObjectID.size() - n)-1)\n\n###\n\nSignature: peek()\nJavadoc: @return the top item on the stack\nCondition: true ? methodResultID.equals(receiverObjectID.peek())\n\n###\n\nSignature: push(java.lang.Object item)\nJavadoc: @return the item just pushed\nCondition: "
        },
        {
            "condition": " true ? (methodResultID==0 || methodResultID==1)",
            "parameters": [
                "'x'",
                " 'y'"
            ],
            "signature": "logicalAnd(long x,long y)",
            "tag": "@return the logical and of x and y; the result is always 0 or 1",
            "tag_type": "returnTag",
            "prompt": "Signature: rshiftSigned(int x,int y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: mulAndCheck(int x,int y)\nJavadoc: @return the product x * y.\nCondition: true ? methodResultID==x*y\n\n###\n\nSignature: lte(double d1, double d2)\nJavadoc: @return whether d1 <= d2.\nCondition: d1<=d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: div(int x,int y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(double x,double y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(long x,long y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: ne(double d1, double d2)\nJavadoc: @return whether d1 and d2 are non-equal.\nCondition: d1!=d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: mul(long x,long y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(double x,double y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(int x,int y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: addAndCheck(int x,int y)\nJavadoc: @return the sum x+y\nCondition: true ? methodResultID==x+y\n\n###\n\nSignature: bitwiseOr(int x,int y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseOr(long x,long y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseAnd(long x,long y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: bitwiseAnd(int x,int y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: logicalXor(long x,long y)\nJavadoc: @return the logical xor of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalXor(int x,int y)\nJavadoc: @return the logical xor of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalOr(long x,long y)\nJavadoc: @return the logical or of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalOr(int x,int y)\nJavadoc: @return the logical or of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalAnd(int x,int y)\nJavadoc: @return the logical and of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalAnd(long x,long y)\nJavadoc: @return the logical and of x and y; the result is always 0 or 1\nCondition: "
        },
        {
            "condition": "true ? (methodResultID==null)==false",
            "parameters": [
                "'key'",
                " 'oldValue'"
            ],
            "signature": "reload(java.lang.Object key,java.lang.Object oldValue)",
            "tag": "@return the future new value associated with key; must not be null, must not return null",
            "tag_type": "returnTag",
            "prompt": "Signature: forAllButLastDo(java.lang.Iterable collection,org.apache.commons.collections4.Closure closure)\nJavadoc: @return the last element in the collection, or null if either collection or closure is null\nCondition: (collection==null || closure==null) ? methodResultID==null : collection.get(collection.size() - 1)\n\n###\n\nSignature: max(long a,long b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(double a,double b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(int a,int b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(float a,float b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: min(double a,double b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(int a,int b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(float a,float b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(long a,long b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: nullToEmpty(java.lang.String string)\nJavadoc: @return string itself if it is non-null; \"\" if it is null\nCondition: string!=null ? methodResultID.equals(string) : methodResultID.equals(\"\") \n\n###\n\nSignature: doBackward(java.lang.Object b)\nJavadoc: @return the converted instance; must not be null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: doForward(java.lang.Object a)\nJavadoc: @return the converted instance; must not be null\nCondition: true?(methodResultID==null)==false\n\n###\n\nSignature: getEuropeNameKey()\nJavadoc: @return A name key, or null if Europe is null.\nCondition: receiverObjectID.getEurope()==null ? methodResultID==null\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference,java.lang.String errorMessageTemplate,java.lang.Object[] errorMessageArgs)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: firstNonNull(java.lang.Object first,java.lang.Object second)\nJavadoc: @return first if it is non-null; otherwise second if it is non-null\nCondition: first != null ? methodResultID == first ; first == null && second != null ? methodResultID == second\n\n###\n\nSignature: convert(java.lang.Object a)\nJavadoc: @return the converted value; is null if and only if a is null\nCondition: a==null ? methodResultID==null : methodResultID!=null\n\n###\n\nSignature: get(java.lang.Object key)\nJavadoc: @return the value to which this map maps the specified key, or null if the map contains no mapping for this key.\nCondition: receiverObjectID.containsKey(key)==false ? methodResultID==null\n\n###\n\nSignature: getFromSet(java.util.Set set,java.lang.Object key)\nJavadoc: @return the object in this set that is equal to key, or null\nCondition: true?(methodResultID==key||methodResultID==null)\n\n###\n\nSignature: load(java.lang.Object key)\nJavadoc: @return the value associated with key; must not be null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: reload(java.lang.Object key,java.lang.Object oldValue)\nJavadoc: @return the future new value associated with key; must not be null, must not return null\nCondition: "
        },
        {
            "condition": "d1<d2 ? methodResultID==true:methodResultID==false",
            "parameters": [
                "'d1'",
                " 'd2'"
            ],
            "signature": "lt(double d1, double d2)",
            "tag": "@return whether d1 < d2.",
            "tag_type": "returnTag",
            "prompt": "Signature: rshiftSigned(int x,int y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: rshiftSigned(long x,long y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: rshiftUnsigned(long x,long y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: rshiftUnsigned(int x,int y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: logicalOr(long x,long y)\nJavadoc: @return the logical or of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalOr(int x,int y)\nJavadoc: @return the logical or of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: subAndCheck(int x,int y)\nJavadoc: @return the difference x - y.\nCondition: true ? methodResultID==x-y\n\n###\n\nSignature: subAndCheck(long a,long b)\nJavadoc: @return the difference a - b.\nCondition: true ? methodResultID==a-b\n\n###\n\nSignature: min(float a,float b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(double a,double b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(int a,int b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(long a,long b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: max(float a,float b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(long a,long b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(double a,double b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(int a,int b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: ne(double d1, double d2)\nJavadoc: @return whether d1 and d2 are non-equal.\nCondition: d1!=d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: lte(double d1, double d2)\nJavadoc: @return whether d1 <= d2.\nCondition: d1<=d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: gt(double d1, double d2)\nJavadoc: @return whether d1 > d2.\nCondition: d1>d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: gte(double d1, double d2)\nJavadoc: @return whether d1 > d2.\nCondition: d1>d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: lt(double d1, double d2)\nJavadoc: @return whether d1 < d2.\nCondition: "
        },
        {
            "condition": "receiverObjectID.getGoodsSpaceTaken() > 0 ? methodResultID == true : methodResultID == false",
            "parameters": [
                ""
            ],
            "signature": "hasGoodsCargo()",
            "tag": "@return True if the unit is carrying any goods cargo.",
            "tag_type": "returnTag",
            "prompt": "Signature: all_null(java.lang.Object[] a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: java.util.Arrays.asList(a).stream().allMatch(e -> e==null)?methodResultID==true : methodResultID==false\n\n###\n\nSignature: all_null(java.util.List a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: a.stream().allMatch(e -> e==null) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: sizeIsEmpty(java.lang.Object object)\nJavadoc: @return true if empty or null\nCondition: object.isEmpty() || object==null ? methodResultID==true\n\n###\n\nSignature: isEmpty(java.util.Collection coll)\nJavadoc: @return true if empty or null\nCondition: coll.isEmpty() || coll==null ? methodResultID==true\n\n###\n\nSignature: intersectionCardinalityAtLeast(java.util.BitSet a,java.util.BitSet b,java.util.BitSet c,int i)\nJavadoc: @return true iff size(a intersect b intersect c) \u2265 i\nCondition: receiverObjectID.intersectionCardinality(a,b,c)>=i ? methodResultID==true\n\n###\n\nSignature: canMoveToEurope()\nJavadoc: @return True if this player has an instance of Europe.\nCondition: receiverObjectID.getEurope() != null ? methodResultID==true\n\n###\n\nSignature: owns(net.sf.freecol.common.model.Ownable ownable)\nJavadoc: @return True if the Ownable is ours.\nCondition: receiverObjectID.equals(ownable.getOwner()) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: emptyBag()\nJavadoc: @return an empty Bag\nCondition: true ? methodResultID.equals(receiverObjectID.EMPTY_BAG)\n\n###\n\nSignature: hasSpaceLeft()\nJavadoc: @return True if there is free space.\nCondition: receiverObjectID.getSpaceLeft() > 0 ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: hasTile()\nJavadoc: @return True if this unit is on a tile.\nCondition: receiverObjectID.getTile()!=null ? methodResultID==true\n\n###\n\nSignature: add(E object)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object, int count)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: hasHighSeasMove()\nJavadoc: @return True if the unit can either move immediately to the high seas or can make a move to a neighbouring high seas tile.\nCondition: receiverObjectID.canMoveToHighSeas() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: obtains(net.sf.freecol.common.model.Unit unit)\nJavadoc: @return True if the unit can be moved.\nCondition: unit.couldMove() ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: getCarrier()\nJavadoc: @return The carrier this unit is aboard, or null if none.\nCondition: !receiverObjectID.isOnCarrier() ? methodResultID==null\n\n###\n\nSignature: isCarrier()\nJavadoc: @return True if this unit can carry goods or other units.\nCondition: (receiverObjectID.canCarryGoods() || receiverObjectID.canCarryUnits()) ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: hasCargo()\nJavadoc: @return True if the unit is carrying any cargo.\nCondition: receiverObjectID.getCargoSpaceTaken() > 0 ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: hasGoodsCargo()\nJavadoc: @return True if the unit is carrying any goods cargo.\nCondition: "
        },
        {
            "condition": "true?methodResultID==(x^y)",
            "parameters": [
                "'x'",
                " 'y'"
            ],
            "signature": "bitwiseXor(long x,long y)",
            "tag": "@return x ^ y",
            "tag_type": "returnTag",
            "prompt": "Signature: mod(long x,long y)\nJavadoc: @return x % y\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: mulAndCheck(long a,long b)\nJavadoc: @return the product a * b.\nCondition: true ? methodResultID==a*b\n\n###\n\nSignature: rshiftSigned(long x,long y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: rshiftSigned(int x,int y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: rshiftUnsigned(int x,int y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: rshiftUnsigned(long x,long y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: bitwiseOr(int x,int y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseOr(long x,long y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: lshift(int x,int y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: lshift(long x,long y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: div(long x,long y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(int x,int y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(double x,double y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: mulAndCheck(int x,int y)\nJavadoc: @return the product x * y.\nCondition: true ? methodResultID==x*y\n\n###\n\nSignature: bitwiseAnd(int x,int y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: bitwiseAnd(long x,long y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: mul(double x,double y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(int x,int y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(long x,long y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: bitwiseXor(int x,int y)\nJavadoc: @return x ^ y\nCondition: true?methodResultID==(x^y)\n\n###\n\nSignature: bitwiseXor(long x,long y)\nJavadoc: @return x ^ y\nCondition: "
        },
        {
            "condition": "true ? methodResultID==receiverObjectID.GLOBAL_ENV",
            "parameters": [
                ""
            ],
            "signature": "getGlobalEnvironment()",
            "tag": "@return A singleton instance of the global environment.",
            "tag_type": "returnTag",
            "prompt": "Signature: emptyToNull(java.lang.String string)\nJavadoc: @return string itself if it is nonempty; null if it is empty or null\nCondition: string==null || string.isEmpty() ? methodResultID==null : methodResultID.equals(string)\n\n###\n\nSignature: removeLRU(org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry entry)\nJavadoc: @return true\nCondition: true ? methodResultID==true\n\n###\n\nSignature: getEurope()\nJavadoc: @return The Europe object, or null if the player is not European or indpendent.\nCondition: (receiverObjectID.isEuropean())==false?methodResultID==null\n\n###\n\nSignature: copy()\nJavadoc: @return a copy of this.\nCondition: methodResultID.equals(receiverObjectID)\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference,java.lang.String errorMessageTemplate,java.lang.Object[] errorMessageArgs)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: emptyQueue()\nJavadoc: @return an empty Queue\nCondition: true?methodResultID.equals(receiverObjectID.EMPTY_QUEUE)\n\n###\n\nSignature: isIndian()\nJavadoc: @return True.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: empty()\nJavadoc: @return true if the stack is currently empty\nCondition: receiverObjectID.isEmpty() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: asRegex(java.lang.String s,int groups)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: asRegex(java.lang.String s)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: emptyBag()\nJavadoc: @return an empty Bag\nCondition: true ? methodResultID.equals(receiverObjectID.EMPTY_BAG)\n\n###\n\nSignature: add(E object, int count)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: getType()\nJavadoc: @return This.\nCondition: true ? methodResultID==receiverObjectID\n\n###\n\nSignature: add(E element)\nJavadoc: @return Always true.\nCondition: true? methodResultID==true\n\n###\n\nSignature: forAllDo(java.lang.Iterable collection,org.apache.commons.collections4.Closure closure)\nJavadoc: @return closure\nCondition: true?methodResultID.equals(closure)\n\n###\n\nSignature: forAllDo(java.util.Iterator iterator,org.apache.commons.collections4.Closure closure)\nJavadoc: @return closure\nCondition: true?methodResultID.equals(closure)\n\n###\n\nSignature: canMoveToEurope()\nJavadoc: @return True if this player has an instance of Europe.\nCondition: receiverObjectID.getEurope() != null ? methodResultID==true\n\n###\n\nSignature: of(java.lang.Object singleton)\nJavadoc: @return a new FluentIterable containing the singleton\nCondition: true ? methodResultID.contains(singleton)==true\n\n###\n\nSignature: getGlobalEnvironment()\nJavadoc: @return A singleton instance of the global environment.\nCondition: "
        },
        {
            "condition": "a<=b ? methodResultID==a : methodResultID==b",
            "parameters": [
                "'a'",
                " 'b'"
            ],
            "signature": "min(double a,double b)",
            "tag": "@return a if a is lesser or equal to b, b otherwise",
            "tag_type": "returnTag",
            "prompt": "Signature: mod_positive(long x,long y)\nJavadoc: @return x % y, where the result is constrained to be positive\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: mod_positive(int x,int y)\nJavadoc: @return x % y, where the result is constrained to be positive\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: firstNonNull(java.lang.Object first,java.lang.Object second)\nJavadoc: @return first if it is non-null; otherwise second if it is non-null\nCondition: first != null ? methodResultID == first ; first == null && second != null ? methodResultID == second\n\n###\n\nSignature: rshiftUnsigned(int x,int y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: rshiftUnsigned(long x,long y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: bitwiseOr(int x,int y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseOr(long x,long y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: rshiftSigned(int x,int y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: rshiftSigned(long x,long y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: gte(double d1, double d2)\nJavadoc: @return whether d1 > d2.\nCondition: d1>d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: gt(double d1, double d2)\nJavadoc: @return whether d1 > d2.\nCondition: d1>d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: lte(double d1, double d2)\nJavadoc: @return whether d1 <= d2.\nCondition: d1<=d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: lt(double d1, double d2)\nJavadoc: @return whether d1 < d2.\nCondition: d1<d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: max(long a,long b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(float a,float b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(int a,int b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(double a,double b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: min(int a,int b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(float a,float b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(long a,long b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(double a,double b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition:"
        },
        {
            "condition": "true?methodResultID==x%y",
            "parameters": [
                "'x'",
                " 'y'"
            ],
            "signature": "mod(int x,int y)",
            "tag": "@return x % y",
            "tag_type": "returnTag",
            "prompt": "Signature: max(double a,double b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(float a,float b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(long a,long b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: bitwiseXor(long x,long y)\nJavadoc: @return x ^ y\nCondition: true?methodResultID==(x^y)\n\n###\n\nSignature: bitwiseXor(int x,int y)\nJavadoc: @return x ^ y\nCondition: true?methodResultID==(x^y)\n\n###\n\nSignature: lshift(int x,int y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: lshift(long x,long y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: bitwiseAnd(long x,long y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: bitwiseAnd(int x,int y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: bitwiseOr(long x,long y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseOr(int x,int y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: mul(double x,double y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(int x,int y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(long x,long y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: div(int x,int y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(long x,long y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(double x,double y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: mod_positive(long x,long y)\nJavadoc: @return x % y, where the result is constrained to be positive\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: mod_positive(int x,int y)\nJavadoc: @return x % y, where the result is constrained to be positive\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: mod(long x,long y)\nJavadoc: @return x % y\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: mod(int x,int y)\nJavadoc: @return x % y\nCondition:"
        },
        {
            "condition": "receiverObjectID.intersectionCardinality(a,b,c)>=i ? methodResultID==true",
            "parameters": [
                "'a'",
                " 'b'",
                " 'c'",
                " 'i'"
            ],
            "signature": "intersectionCardinalityAtLeast(java.util.BitSet a,java.util.BitSet b,java.util.BitSet c,int i)",
            "tag": "@return true iff size(a intersect b intersect c) \u2265 i",
            "tag_type": "returnTag",
            "prompt": "Signature: isEmpty(java.util.Collection coll)\nJavadoc: @return true if empty or null\nCondition: coll.isEmpty() || coll==null ? methodResultID==true\n\n###\n\nSignature: bitwiseOr(long x,long y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseOr(int x,int y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: add(E element)\nJavadoc: @return Always true.\nCondition: true? methodResultID==true\n\n###\n\nSignature: addVertex(java.lang.Object v)\nJavadoc: @return true if this graph did not already contain the specified vertex.\nCondition: (receiverObjectID.containsVertex(v))==false ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: addEdge(java.lang.Object sourceVertex,java.lang.Object targetVertex,java.lang.Object e)\nJavadoc: @return true if this graph did not already contain the specified edge.\nCondition: (receiverObjectID.containsEdge(sourceVertex,targetVertex))==false?methodResultID==true:methodResultID==false\n\n###\n\nSignature: contains(org.graphstream.graph.Edge edge)\nJavadoc: @return true if the path contains the edge.\nCondition: receiverObjectID.getEdgePath().contains(edge) ? methodResultID==true\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: removeLRU(org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry entry)\nJavadoc: @return true\nCondition: true ? methodResultID==true\n\n###\n\nSignature: hasSpaceLeft()\nJavadoc: @return True if there is free space.\nCondition: receiverObjectID.getSpaceLeft() > 0 ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: removeVertex(java.lang.Object v)\nJavadoc: @return true if the graph contained the specified vertex; false otherwise.\nCondition: receiverObjectID.containsVertex(v) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: add(E object, int count)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: all_null(java.lang.Object[] a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: java.util.Arrays.asList(a).stream().allMatch(e -> e==null)?methodResultID==true : methodResultID==false\n\n###\n\nSignature: all_null(java.util.List a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: a.stream().allMatch(e -> e==null) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: removeEdge(java.lang.Object e)\nJavadoc: @return true if and only if the graph contained the specified edge.\nCondition: receiverObjectID.containsEdge(e) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: isIndian()\nJavadoc: @return True.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: intersectionCardinalityAtLeast(java.util.BitSet a,java.util.BitSet b,int i)\nJavadoc: @return true iff size(a intersect b) \u2265 i\nCondition: receiverObjectID.intersectionCardinality(a,b)>=i ? methodResultID==true\n\n###\n\nSignature: intersectionCardinalityAtLeast(java.util.BitSet a,java.util.BitSet b,java.util.BitSet c,int i)\nJavadoc: @return true iff size(a intersect b intersect c) \u2265 i\nCondition:"
        },
        {
            "condition": "true ? (methodResultID==null)==false",
            "parameters": [
                "'b'"
            ],
            "signature": "doBackward(java.lang.Object b)",
            "tag": "@return the converted instance; must not be null",
            "tag_type": "returnTag",
            "prompt": "Signature: rshiftUnsigned(long x,long y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: rshiftUnsigned(int x,int y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: get(java.lang.Object key)\nJavadoc: @return the value to which this map maps the specified key, or null if the map contains no mapping for this key.\nCondition: receiverObjectID.containsKey(key)==false ? methodResultID==null\n\n###\n\nSignature: emptyBag()\nJavadoc: @return an empty Bag\nCondition: true ? methodResultID.equals(receiverObjectID.EMPTY_BAG)\n\n###\n\nSignature: empty()\nJavadoc: @return a new empty FluentIterable\nCondition: true ? methodResultID.isEmpty()==true\n\n###\n\nSignature: reload(java.lang.Object key,java.lang.Object oldValue)\nJavadoc: @return the future new value associated with key; must not be null, must not return null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: of(java.lang.Object singleton)\nJavadoc: @return a new FluentIterable containing the singleton\nCondition: true ? methodResultID.contains(singleton)==true\n\n###\n\nSignature: emptyToNull(java.lang.String string)\nJavadoc: @return string itself if it is nonempty; null if it is empty or null\nCondition: string==null || string.isEmpty() ? methodResultID==null : methodResultID.equals(string)\n\n###\n\nSignature: getType()\nJavadoc: @return This.\nCondition: true ? methodResultID==receiverObjectID\n\n###\n\nSignature: load(java.lang.Object key)\nJavadoc: @return the value associated with key; must not be null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: nullToEmpty(java.lang.String string)\nJavadoc: @return string itself if it is non-null; \"\" if it is null\nCondition: string!=null ? methodResultID.equals(string) : methodResultID.equals(\"\") \n\n###\n\nSignature: emptyIfNull(java.util.Collection collection)\nJavadoc: @return an empty collection if the argument is null\nCondition: collection==null ? methodResultID.equals(org.apache.commons.collections4.CollectionUtils.emptyCollection())\n\n###\n\nSignature: asRegex(java.lang.String s,int groups)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: asRegex(java.lang.String s)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: getFromSet(java.util.Set set,java.lang.Object key)\nJavadoc: @return the object in this set that is equal to key, or null\nCondition: true?(methodResultID==key||methodResultID==null)\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference,java.lang.String errorMessageTemplate,java.lang.Object[] errorMessageArgs)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: firstNonNull(java.lang.Object first,java.lang.Object second)\nJavadoc: @return first if it is non-null; otherwise second if it is non-null\nCondition: first != null ? methodResultID == first ; first == null && second != null ? methodResultID == second\n\n###\n\nSignature: convert(java.lang.Object a)\nJavadoc: @return the converted value; is null if and only if a is null\nCondition: a==null ? methodResultID==null : methodResultID!=null\n\n###\n\nSignature: doForward(java.lang.Object a)\nJavadoc: @return the converted instance; must not be null\nCondition: true?(methodResultID==null)==false\n\n###\n\nSignature: doBackward(java.lang.Object b)\nJavadoc: @return the converted instance; must not be null\nCondition:"
        },
        {
            "condition": "true?methodResultID==x/y",
            "parameters": [
                "'x'",
                " 'y'"
            ],
            "signature": "div(int x,int y)",
            "tag": "@return x / y",
            "tag_type": "returnTag",
            "prompt": "Signature: rshiftUnsigned(long x,long y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: rshiftSigned(long x,long y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: rshiftSigned(int x,int y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: lshift(long x,long y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: lshift(int x,int y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: bitwiseXor(long x,long y)\nJavadoc: @return x ^ y\nCondition: true?methodResultID==(x^y)\n\n###\n\nSignature: bitwiseXor(int x,int y)\nJavadoc: @return x ^ y\nCondition: true?methodResultID==(x^y)\n\n###\n\nSignature: mod_positive(int x,int y)\nJavadoc: @return x % y, where the result is constrained to be positive\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: mod_positive(long x,long y)\nJavadoc: @return x % y, where the result is constrained to be positive\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: bitwiseOr(long x,long y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseOr(int x,int y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: mul(long x,long y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(int x,int y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(double x,double y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: bitwiseAnd(long x,long y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: bitwiseAnd(int x,int y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: mod(long x,long y)\nJavadoc: @return x % y\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: mod(int x,int y)\nJavadoc: @return x % y\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: div(long x,long y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(double x,double y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(int x,int y)\nJavadoc: @return x / y\nCondition:"
        },
        {
            "condition": "tile.isExplored() ? methodResultID==true:methodResultID==false",
            "parameters": [
                "'tile'"
            ],
            "signature": "hasExplored(net.sf.freecol.common.model.Tile tile)",
            "tag": "@return True if the Tile has been explored.",
            "tag_type": "returnTag",
            "prompt": "Signature: addEdge(java.lang.Object sourceVertex,java.lang.Object targetVertex,java.lang.Object e)\nJavadoc: @return true if this graph did not already contain the specified edge.\nCondition: (receiverObjectID.containsEdge(sourceVertex,targetVertex))==false?methodResultID==true:methodResultID==false\n\n###\n\nSignature: addVertex(java.lang.Object v)\nJavadoc: @return true if this graph did not already contain the specified vertex.\nCondition: (receiverObjectID.containsVertex(v))==false ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: removeVertex(java.lang.Object v)\nJavadoc: @return true if the graph contained the specified vertex; false otherwise.\nCondition: receiverObjectID.containsVertex(v) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: add(E element)\nJavadoc: @return Always true.\nCondition: true? methodResultID==true\n\n###\n\nSignature: isDead()\nJavadoc: @return True if this Player is dead.\nCondition: receiverObjectID.getDead()?methodResultID==true:methodResultID==false\n\n###\n\nSignature: getDead()\nJavadoc: @return True if this Player is dead.\nCondition: receiverObjectID.isDead()?methodResultID==true:methodResultID==false\n\n###\n\nSignature: owns(net.sf.freecol.common.model.Ownable ownable)\nJavadoc: @return True if the Ownable is ours.\nCondition: receiverObjectID.equals(ownable.getOwner()) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: empty()\nJavadoc: @return true if the stack is currently empty\nCondition: receiverObjectID.isEmpty() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: isInDanger(int range,float threat)\nJavadoc: @return True if a threat was found.\nCondition: receiverObjectID.searchForDanger(range, threat)!=null ? methodResultID==true\n\n###\n\nSignature: isIndian()\nJavadoc: @return True.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: canMoveToEurope()\nJavadoc: @return True if this player has an instance of Europe.\nCondition: receiverObjectID.getEurope() != null ? methodResultID==true\n\n###\n\nSignature: appliesTo(net.sf.freecol.common.model.Turn turn)\nJavadoc: @return True if the turn is null or not outside a valid time limit.\nCondition: turn==null ? methodResultID == true : methodResultID==false\n\n###\n\nSignature: contains(org.graphstream.graph.Node node)\nJavadoc: @return true if the path contains the node.\nCondition: receiverObjectID.getNodePath().contains(node) ? methodResultID==true\n\n###\n\nSignature: add(E object, int count)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: hasSpaceLeft()\nJavadoc: @return True if there is free space.\nCondition: receiverObjectID.getSpaceLeft() > 0 ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: contains(org.graphstream.graph.Edge edge)\nJavadoc: @return true if the path contains the edge.\nCondition: receiverObjectID.getEdgePath().contains(edge) ? methodResultID==true\n\n###\n\nSignature: hasHighSeasMove()\nJavadoc: @return True if the unit can either move immediately to the high seas or can make a move to a neighbouring high seas tile.\nCondition: receiverObjectID.canMoveToHighSeas() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: hasTile()\nJavadoc: @return True if this unit is on a tile.\nCondition: receiverObjectID.getTile()!=null ? methodResultID==true\n\n###\n\nSignature: hasExplored(net.sf.freecol.common.model.Tile tile)\nJavadoc: @return True if the Tile has been explored.\nCondition:"
        },
        {
            "condition": "string!=null ? methodResultID.equals(string) : methodResultID.equals(\"\") ",
            "parameters": [
                "'string'"
            ],
            "signature": "nullToEmpty(java.lang.String string)",
            "tag": "@return string itself if it is non-null; \"\" if it is null",
            "tag_type": "returnTag",
            "prompt": "Signature: all_null(java.lang.Object[] a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: java.util.Arrays.asList(a).stream().allMatch(e -> e==null)?methodResultID==true : methodResultID==false\n\n###\n\nSignature: all_null(java.util.List a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: a.stream().allMatch(e -> e==null) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: doBackward(java.lang.Object b)\nJavadoc: @return the converted instance; must not be null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: doForward(java.lang.Object a)\nJavadoc: @return the converted instance; must not be null\nCondition: true?(methodResultID==null)==false\n\n###\n\nSignature: sizeIsEmpty(java.lang.Object object)\nJavadoc: @return true if empty or null\nCondition: object.isEmpty() || object==null ? methodResultID==true\n\n###\n\nSignature: isEmpty(java.util.Collection coll)\nJavadoc: @return true if empty or null\nCondition: coll.isEmpty() || coll==null ? methodResultID==true\n\n###\n\nSignature: getParameter(java.lang.String parameter)\nJavadoc: @return The parameter value (empty string if not set).\nCondition: !receiverObjectID.hasParameter(parameter) ? methodResultID.equals(\"\")\n\n###\n\nSignature: asRegex(java.lang.String s,int groups)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: asRegex(java.lang.String s)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: repeat(java.lang.String string,int count)\nJavadoc: @return a string containing string repeated count times (the empty string if count is zero)\nCondition: count==0 ? methodResultID.equals(\"\")\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: emptyIfNull(java.util.Collection collection)\nJavadoc: @return an empty collection if the argument is null\nCondition: collection==null ? methodResultID.equals(org.apache.commons.collections4.CollectionUtils.emptyCollection())\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference,java.lang.String errorMessageTemplate,java.lang.Object[] errorMessageArgs)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: convert(java.lang.Object a)\nJavadoc: @return the converted value; is null if and only if a is null\nCondition: a==null ? methodResultID==null : methodResultID!=null\n\n###\n\nSignature: isNullOrEmpty(java.lang.String string)\nJavadoc: @return true if the string is null or is the empty string\nCondition: string==null || string.isEmpty() ? methodResultID==true\n\n###\n\nSignature: firstNonNull(java.lang.Object first,java.lang.Object second)\nJavadoc: @return first if it is non-null; otherwise second if it is non-null\nCondition: first != null ? methodResultID == first ; first == null && second != null ? methodResultID == second\n\n###\n\nSignature: emptyToNull(java.lang.String string)\nJavadoc: @return string itself if it is nonempty; null if it is empty or null\nCondition: string==null || string.isEmpty() ? methodResultID==null : methodResultID.equals(string)\n\n###\n\nSignature: nullToEmpty(java.lang.String string)\nJavadoc: @return string itself if it is non-null; \"\" if it is null\nCondition:"
        },
        {
            "condition": "true ? methodResultID==true",
            "parameters": [
                "'entry'"
            ],
            "signature": "removeLRU(org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry entry)",
            "tag": "@return true",
            "tag_type": "returnTag",
            "prompt": "Signature: emptyCollection()\nJavadoc: @return immutable empty collection\nCondition: true?methodResultID.equals(receiverObjectID.EMPTY_COLLECTION)\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: empty()\nJavadoc: @return true if the stack is currently empty\nCondition: receiverObjectID.isEmpty() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: rshiftSigned(long x,long y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: rshiftSigned(int x,int y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: bitwiseOr(int x,int y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseOr(long x,long y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: isNullOrEmpty(java.lang.String string)\nJavadoc: @return true if the string is null or is the empty string\nCondition: string==null || string.isEmpty() ? methodResultID==true\n\n###\n\nSignature: forAllDo(java.lang.Iterable collection,org.apache.commons.collections4.Closure closure)\nJavadoc: @return closure\nCondition: true?methodResultID.equals(closure)\n\n###\n\nSignature: forAllDo(java.util.Iterator iterator,org.apache.commons.collections4.Closure closure)\nJavadoc: @return closure\nCondition: true?methodResultID.equals(closure)\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: sizeIsEmpty(java.lang.Object object)\nJavadoc: @return true if empty or null\nCondition: object.isEmpty() || object==null ? methodResultID==true\n\n###\n\nSignature: isEmpty(java.util.Collection coll)\nJavadoc: @return true if empty or null\nCondition: coll.isEmpty() || coll==null ? methodResultID==true\n\n###\n\nSignature: isEuropean()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: isREF()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: add(E object, int count)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E element)\nJavadoc: @return Always true.\nCondition: true? methodResultID==true\n\n###\n\nSignature: isIndian()\nJavadoc: @return True.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: removeLRU(org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry entry)\nJavadoc: @return true\nCondition:"
        },
        {
            "condition": "true ? methodResultID==a*b",
            "parameters": [
                "'a'",
                " 'b'"
            ],
            "signature": "mulAndCheck(long a,long b)",
            "tag": "@return the product a * b.",
            "tag_type": "returnTag",
            "prompt": "Signature: mod_positive(long x,long y)\nJavadoc: @return x % y, where the result is constrained to be positive\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: addAndCheck(int x,int y)\nJavadoc: @return the sum x+y\nCondition: true ? methodResultID==x+y\n\n###\n\nSignature: mod(int x,int y)\nJavadoc: @return x % y\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: mod(long x,long y)\nJavadoc: @return x % y\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: lshift(long x,long y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: lshift(int x,int y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: rshiftUnsigned(int x,int y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: rshiftUnsigned(long x,long y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: div(int x,int y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(long x,long y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(double x,double y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: addAndCheck(long a,long b)\nJavadoc: @return the sum a+b\nCondition: true ? methodResultID==a+b\n\n###\n\nSignature: bitwiseAnd(long x,long y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: bitwiseAnd(int x,int y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: bitwiseXor(int x,int y)\nJavadoc: @return x ^ y\nCondition: true?methodResultID==(x^y)\n\n###\n\nSignature: bitwiseXor(long x,long y)\nJavadoc: @return x ^ y\nCondition: true?methodResultID==(x^y)\n\n###\n\nSignature: mul(double x,double y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(long x,long y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(int x,int y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mulAndCheck(int x,int y)\nJavadoc: @return the product x * y.\nCondition: true ? methodResultID==x*y\n\n###\n\nSignature: mulAndCheck(long a,long b)\nJavadoc: @return the product a * b.\nCondition:"
        },
        {
            "condition": "methodResultID.equals(Location.INSIDE) || methodResultID.equals(Location.OUTSIDE) || methodResultID.equals(Location.BOUNDARY)",
            "parameters": [
                "'point'",
                " 'tolerance'"
            ],
            "signature": "checkPoint(double point, double tolerance)",
            "tag": "@return a code representing the point status: either Location#INSIDE, Location#OUTSIDE or Location#BOUNDARY.",
            "tag_type": "returnTag",
            "prompt": "Signature: copy()\nJavadoc: @return a copy of this.\nCondition: methodResultID.equals(receiverObjectID)\n\n###\n\nSignature: hasExplored(net.sf.freecol.common.model.Tile tile)\nJavadoc: @return True if the Tile has been explored.\nCondition: tile.isExplored() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: bitwiseOr(int x,int y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseOr(long x,long y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseAnd(long x,long y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: bitwiseAnd(int x,int y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: getDiagonal()\nJavadoc: @return The diagonal.\nCondition: true ? methodResultID == receiverObjectID.diagonal\n\n###\n\nSignature: hasTile()\nJavadoc: @return True if this unit is on a tile.\nCondition: receiverObjectID.getTile()!=null ? methodResultID==true\n\n###\n\nSignature: hasHighSeasMove()\nJavadoc: @return True if the unit can either move immediately to the high seas or can make a move to a neighbouring high seas tile.\nCondition: receiverObjectID.canMoveToHighSeas() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: contains(org.graphstream.graph.Edge edge)\nJavadoc: @return true if the path contains the edge.\nCondition: receiverObjectID.getEdgePath().contains(edge) ? methodResultID==true\n\n###\n\nSignature: max(double a,double b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(long a,long b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(float a,float b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(int a,int b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: side(org.apache.commons.math3.geometry.partitioning.Hyperplane<S> hyperplane)\nJavadoc: @return one of Side#PLUS Side.PLUS, Side#MINUS Side.MINUS, Side#BOTH Side.BOTH or Side#HYPER Side.HYPER (the latter result can occur only if the tree contains only one cut hyperplane).\nCondition: methodResultID.equals(Side.PLUS) || methodResultID.equals(Side.MINUS) || methodResultID.equals(Side.BOTH) || methodResultID.equals(Side.HYPER)\n\n###\n\nSignature: min(int a,int b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(double a,double b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(float a,float b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(long a,long b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: checkPoint(org.apache.commons.math3.geometry.Point<S> point)\nJavadoc: @return a code representing the point status: either Location#INSIDE, Location#OUTSIDE or Location#BOUNDARY.\nCondition: methodResultID.equals(Location.INSIDE) || methodResultID.equals(Location.OUTSIDE) || methodResultID.equals(Location.BOUNDARY)\n\n###\n\nSignature: checkPoint(double point, double tolerance)\nJavadoc: @return a code representing the point status: either Location#INSIDE, Location#OUTSIDE or Location#BOUNDARY.\nCondition:"
        },
        {
            "condition": "true ? methodResultID.equals(receiverObjectID.EMPTY_SORTED_BAG)",
            "parameters": [
                ""
            ],
            "signature": "emptySortedBag()",
            "tag": "@return an empty sorted Bag",
            "tag_type": "returnTag",
            "prompt": "Signature: isEmpty(java.util.Collection coll)\nJavadoc: @return true if empty or null\nCondition: coll.isEmpty() || coll==null ? methodResultID==true\n\n###\n\nSignature: firstNonNull(java.lang.Object first,java.lang.Object second)\nJavadoc: @return first if it is non-null; otherwise second if it is non-null\nCondition: first != null ? methodResultID == first ; first == null && second != null ? methodResultID == second\n\n###\n\nSignature: forAllButLastDo(java.lang.Iterable collection,org.apache.commons.collections4.Closure closure)\nJavadoc: @return the last element in the collection, or null if either collection or closure is null\nCondition: (collection==null || closure==null) ? methodResultID==null : collection.get(collection.size() - 1)\n\n###\n\nSignature: empty()\nJavadoc: @return a new empty FluentIterable\nCondition: true ? methodResultID.isEmpty()==true\n\n###\n\nSignature: size(java.lang.Object object)\nJavadoc: @return the size of the specified collection or 0 if the object was null\nCondition: object==null ? methodResultID == 0\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: all_null(java.lang.Object[] a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: java.util.Arrays.asList(a).stream().allMatch(e -> e==null)?methodResultID==true : methodResultID==false\n\n###\n\nSignature: all_null(java.util.List a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: a.stream().allMatch(e -> e==null) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: nullToEmpty(java.lang.String string)\nJavadoc: @return string itself if it is non-null; \"\" if it is null\nCondition: string!=null ? methodResultID.equals(string) : methodResultID.equals(\"\") \n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: getFromSet(java.util.Set set,java.lang.Object key)\nJavadoc: @return the object in this set that is equal to key, or null\nCondition: true?(methodResultID==key||methodResultID==null)\n\n###\n\nSignature: getUnknownObjectBehavior()\nJavadoc: @return FixedOrderComparator.UnknownObjectBehavior\nCondition: true ? methodResultID.equals(org.apache.commons.collections4.comparators.FixedOrderComparator.UnknownObjectBehavior)\n\n###\n\nSignature: emptyToNull(java.lang.String string)\nJavadoc: @return string itself if it is nonempty; null if it is empty or null\nCondition: string==null || string.isEmpty() ? methodResultID==null : methodResultID.equals(string)\n\n###\n\nSignature: emptyCollection()\nJavadoc: @return immutable empty collection\nCondition: true?methodResultID.equals(receiverObjectID.EMPTY_COLLECTION)\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,boolean includeDuplicates)\nJavadoc: @return a new sorted List, containing the elements of Collection a and b\nCondition: true ? result.containsAll(a)\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b)\nJavadoc: @return a new sorted List, containing the elements of Collection a and b\nCondition: true ? result.containsAll(a) && result.containsAll(b)\n\n###\n\nSignature: emptyQueue()\nJavadoc: @return an empty Queue\nCondition: true?methodResultID.equals(receiverObjectID.EMPTY_QUEUE)\n\n###\n\nSignature: emptyIfNull(java.util.Collection collection)\nJavadoc: @return an empty collection if the argument is null\nCondition: collection==null ? methodResultID.equals(org.apache.commons.collections4.CollectionUtils.emptyCollection())\n\n###\n\nSignature: emptyBag()\nJavadoc: @return an empty Bag\nCondition: true ? methodResultID.equals(receiverObjectID.EMPTY_BAG)\n\n###\n\nSignature: emptySortedBag()\nJavadoc: @return an empty sorted Bag\nCondition:"
        },
        {
            "condition": "receiverObjectID.canMoveToHighSeas() ? methodResultID==true:methodResultID==false",
            "parameters": [
                ""
            ],
            "signature": "hasHighSeasMove()",
            "tag": "@return True if the unit can either move immediately to the high seas or can make a move to a neighbouring high seas tile.",
            "tag_type": "returnTag",
            "prompt": "Signature: lte(double d1, double d2)\nJavadoc: @return whether d1 <= d2.\nCondition: d1<=d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: intersectionCardinalityAtLeast(java.util.BitSet a,java.util.BitSet b,int i)\nJavadoc: @return true iff size(a intersect b) \u2265 i\nCondition: receiverObjectID.intersectionCardinality(a,b)>=i ? methodResultID==true\n\n###\n\nSignature: contains(org.graphstream.graph.Node node)\nJavadoc: @return true if the path contains the node.\nCondition: receiverObjectID.getNodePath().contains(node) ? methodResultID==true\n\n###\n\nSignature: intersectionCardinalityAtLeast(java.util.BitSet a,java.util.BitSet b,java.util.BitSet c,int i)\nJavadoc: @return true iff size(a intersect b intersect c) \u2265 i\nCondition: receiverObjectID.intersectionCardinality(a,b,c)>=i ? methodResultID==true\n\n###\n\nSignature: contains(org.graphstream.graph.Edge edge)\nJavadoc: @return true if the path contains the edge.\nCondition: receiverObjectID.getEdgePath().contains(edge) ? methodResultID==true\n\n###\n\nSignature: isInDanger(int range,float threat)\nJavadoc: @return True if a threat was found.\nCondition: receiverObjectID.searchForDanger(range, threat)!=null ? methodResultID==true\n\n###\n\nSignature: hasSpaceLeft()\nJavadoc: @return True if there is free space.\nCondition: receiverObjectID.getSpaceLeft() > 0 ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: getCarrier()\nJavadoc: @return The carrier this unit is aboard, or null if none.\nCondition: !receiverObjectID.isOnCarrier() ? methodResultID==null\n\n###\n\nSignature: checkPoint(double point, double tolerance)\nJavadoc: @return a code representing the point status: either Location#INSIDE, Location#OUTSIDE or Location#BOUNDARY.\nCondition: methodResultID.equals(Location.INSIDE) || methodResultID.equals(Location.OUTSIDE) || methodResultID.equals(Location.BOUNDARY)\n\n###\n\nSignature: checkPoint(org.apache.commons.math3.geometry.Point<S> point)\nJavadoc: @return a code representing the point status: either Location#INSIDE, Location#OUTSIDE or Location#BOUNDARY.\nCondition: methodResultID.equals(Location.INSIDE) || methodResultID.equals(Location.OUTSIDE) || methodResultID.equals(Location.BOUNDARY)\n\n###\n\nSignature: appliesTo(net.sf.freecol.common.model.Turn turn)\nJavadoc: @return True if the turn is null or not outside a valid time limit.\nCondition: turn==null ? methodResultID == true : methodResultID==false\n\n###\n\nSignature: add(E object, int count)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: canMoveToEurope()\nJavadoc: @return True if this player has an instance of Europe.\nCondition: receiverObjectID.getEurope() != null ? methodResultID==true\n\n###\n\nSignature: hasExplored(net.sf.freecol.common.model.Tile tile)\nJavadoc: @return True if the Tile has been explored.\nCondition: tile.isExplored() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: hasCargo()\nJavadoc: @return True if the unit is carrying any cargo.\nCondition: receiverObjectID.getCargoSpaceTaken() > 0 ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: isCarrier()\nJavadoc: @return True if this unit can carry goods or other units.\nCondition: (receiverObjectID.canCarryGoods() || receiverObjectID.canCarryUnits()) ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: hasGoodsCargo()\nJavadoc: @return True if the unit is carrying any goods cargo.\nCondition: receiverObjectID.getGoodsSpaceTaken() > 0 ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: hasTile()\nJavadoc: @return True if this unit is on a tile.\nCondition: receiverObjectID.getTile()!=null ? methodResultID==true\n\n###\n\nSignature: obtains(net.sf.freecol.common.model.Unit unit)\nJavadoc: @return True if the unit can be moved.\nCondition: unit.couldMove() ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: hasHighSeasMove()\nJavadoc: @return True if the unit can either move immediately to the high seas or can make a move to a neighbouring high seas tile.\nCondition:"
        },
        {
            "condition": "receiverObjectID.getEurope() != null ? methodResultID==true",
            "parameters": [
                ""
            ],
            "signature": "canMoveToEurope()",
            "tag": "@return True if this player has an instance of Europe.",
            "tag_type": "returnTag",
            "prompt": "Signature: empty()\nJavadoc: @return true if the stack is currently empty\nCondition: receiverObjectID.isEmpty() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: hasSpaceLeft()\nJavadoc: @return True if there is free space.\nCondition: receiverObjectID.getSpaceLeft() > 0 ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: hasCargo()\nJavadoc: @return True if the unit is carrying any cargo.\nCondition: receiverObjectID.getCargoSpaceTaken() > 0 ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: contains(org.graphstream.graph.Edge edge)\nJavadoc: @return true if the path contains the edge.\nCondition: receiverObjectID.getEdgePath().contains(edge) ? methodResultID==true\n\n###\n\nSignature: hasHighSeasMove()\nJavadoc: @return True if the unit can either move immediately to the high seas or can make a move to a neighbouring high seas tile.\nCondition: receiverObjectID.canMoveToHighSeas() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: isInDanger(int range,float threat)\nJavadoc: @return True if a threat was found.\nCondition: receiverObjectID.searchForDanger(range, threat)!=null ? methodResultID==true\n\n###\n\nSignature: hasExplored(net.sf.freecol.common.model.Tile tile)\nJavadoc: @return True if the Tile has been explored.\nCondition: tile.isExplored() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: obtains(net.sf.freecol.common.model.Unit unit)\nJavadoc: @return True if the unit can be moved.\nCondition: unit.couldMove() ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: removeLRU(org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry entry)\nJavadoc: @return true\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E element)\nJavadoc: @return Always true.\nCondition: true? methodResultID==true\n\n###\n\nSignature: getDead()\nJavadoc: @return True if this Player is dead.\nCondition: receiverObjectID.isDead()?methodResultID==true:methodResultID==false\n\n###\n\nSignature: isDead()\nJavadoc: @return True if this Player is dead.\nCondition: receiverObjectID.getDead()?methodResultID==true:methodResultID==false\n\n###\n\nSignature: owns(net.sf.freecol.common.model.Ownable ownable)\nJavadoc: @return True if the Ownable is ours.\nCondition: receiverObjectID.equals(ownable.getOwner()) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: isIndian()\nJavadoc: @return True.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object, int count)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: hasTile()\nJavadoc: @return True if this unit is on a tile.\nCondition: receiverObjectID.getTile()!=null ? methodResultID==true\n\n###\n\nSignature: getEuropeNameKey()\nJavadoc: @return A name key, or null if Europe is null.\nCondition: receiverObjectID.getEurope()==null ? methodResultID==null\n\n###\n\nSignature: getEurope()\nJavadoc: @return The Europe object, or null if the player is not European or indpendent.\nCondition: (receiverObjectID.isEuropean())==false?methodResultID==null\n\n###\n\nSignature: canMoveToEurope()\nJavadoc: @return True if this player has an instance of Europe.\nCondition:"
        },
        {
            "condition": "true ? methodResultID.equals(receiverObjectID.style)",
            "parameters": [
                ""
            ],
            "signature": "getStyle()",
            "tag": "@return The style group corresponding to this element.",
            "tag_type": "returnTag",
            "prompt": "Signature: emptyToNull(java.lang.String string)\nJavadoc: @return string itself if it is nonempty; null if it is empty or null\nCondition: string==null || string.isEmpty() ? methodResultID==null : methodResultID.equals(string)\n\n###\n\nSignature: firstNonNull(java.lang.Object first,java.lang.Object second)\nJavadoc: @return first if it is non-null; otherwise second if it is non-null\nCondition: first != null ? methodResultID == first ; first == null && second != null ? methodResultID == second\n\n###\n\nSignature: convert(java.lang.Object a)\nJavadoc: @return the converted value; is null if and only if a is null\nCondition: a==null ? methodResultID==null : methodResultID!=null\n\n###\n\nSignature: doBackward(java.lang.Object b)\nJavadoc: @return the converted instance; must not be null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: doForward(java.lang.Object a)\nJavadoc: @return the converted instance; must not be null\nCondition: true?(methodResultID==null)==false\n\n###\n\nSignature: contains(org.graphstream.graph.Edge edge)\nJavadoc: @return true if the path contains the edge.\nCondition: receiverObjectID.getEdgePath().contains(edge) ? methodResultID==true\n\n###\n\nSignature: getParameter(java.lang.String parameter)\nJavadoc: @return The parameter value (empty string if not set).\nCondition: !receiverObjectID.hasParameter(parameter) ? methodResultID.equals(\"\")\n\n###\n\nSignature: load(java.lang.Object key)\nJavadoc: @return the value associated with key; must not be null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: getDiagonal()\nJavadoc: @return The diagonal.\nCondition: true ? methodResultID == receiverObjectID.diagonal\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: get(java.lang.Object key)\nJavadoc: @return the value to which this map maps the specified key, or null if the map contains no mapping for this key.\nCondition: receiverObjectID.containsKey(key)==false ? methodResultID==null\n\n###\n\nSignature: nullToEmpty(java.lang.String string)\nJavadoc: @return string itself if it is non-null; \"\" if it is null\nCondition: string!=null ? methodResultID.equals(string) : methodResultID.equals(\"\") \n\n###\n\nSignature: size(java.lang.Object object)\nJavadoc: @return the size of the specified collection or 0 if the object was null\nCondition: object==null ? methodResultID == 0\n\n###\n\nSignature: contains(org.graphstream.graph.Node node)\nJavadoc: @return true if the path contains the node.\nCondition: receiverObjectID.getNodePath().contains(node) ? methodResultID==true\n\n###\n\nSignature: findSimpleCycles()\nJavadoc: @return The list of all simple cycles. Possibly empty but never null.\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: getFromSet(java.util.Set set,java.lang.Object key)\nJavadoc: @return the object in this set that is equal to key, or null\nCondition: true?(methodResultID==key||methodResultID==null)\n\n###\n\nSignature: asRegex(java.lang.String s,int groups)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: asRegex(java.lang.String s)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: getSize()\nJavadoc: @return The size.\nCondition: true ? methodResultID.equals(receiverObjectID.size)\n\n###\n\nSignature: getStyle()\nJavadoc: @return The style group corresponding to this element.\nCondition:"
        },
        {
            "condition": "true?methodResultID==x*y",
            "parameters": [
                "'x'",
                " 'y'"
            ],
            "signature": "mul(long x,long y)",
            "tag": "@return x * y",
            "tag_type": "returnTag",
            "prompt": "Signature: rshiftUnsigned(long x,long y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: rshiftUnsigned(int x,int y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: addAndCheck(int x,int y)\nJavadoc: @return the sum x+y\nCondition: true ? methodResultID==x+y\n\n###\n\nSignature: bitwiseOr(long x,long y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseOr(int x,int y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: mod(int x,int y)\nJavadoc: @return x % y\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: mod(long x,long y)\nJavadoc: @return x % y\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: lshift(int x,int y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: lshift(long x,long y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: div(int x,int y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(double x,double y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(long x,long y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: bitwiseXor(int x,int y)\nJavadoc: @return x ^ y\nCondition: true?methodResultID==(x^y)\n\n###\n\nSignature: bitwiseXor(long x,long y)\nJavadoc: @return x ^ y\nCondition: true?methodResultID==(x^y)\n\n###\n\nSignature: mulAndCheck(long a,long b)\nJavadoc: @return the product a * b.\nCondition: true ? methodResultID==a*b\n\n###\n\nSignature: bitwiseAnd(int x,int y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: bitwiseAnd(long x,long y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: mulAndCheck(int x,int y)\nJavadoc: @return the product x * y.\nCondition: true ? methodResultID==x*y\n\n###\n\nSignature: mul(int x,int y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(double x,double y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(long x,long y)\nJavadoc: @return x * y\nCondition:"
        },
        {
            "condition": "d1>d2 ? methodResultID==true:methodResultID==false",
            "parameters": [
                "'d1'",
                " 'd2'"
            ],
            "signature": "gte(double d1, double d2)",
            "tag": "@return whether d1 > d2.",
            "tag_type": "returnTag",
            "prompt": "Signature: rshiftSigned(int x,int y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: rshiftSigned(long x,long y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: subAndCheck(int x,int y)\nJavadoc: @return the difference x - y.\nCondition: true ? methodResultID==x-y\n\n###\n\nSignature: logicalOr(long x,long y)\nJavadoc: @return the logical or of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalOr(int x,int y)\nJavadoc: @return the logical or of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: rshiftUnsigned(long x,long y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: rshiftUnsigned(int x,int y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: subAndCheck(long a,long b)\nJavadoc: @return the difference a - b.\nCondition: true ? methodResultID==a-b\n\n###\n\nSignature: min(float a,float b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(double a,double b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(int a,int b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(long a,long b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: max(float a,float b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(long a,long b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(double a,double b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(int a,int b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: ne(double d1, double d2)\nJavadoc: @return whether d1 and d2 are non-equal.\nCondition: d1!=d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: lte(double d1, double d2)\nJavadoc: @return whether d1 <= d2.\nCondition: d1<=d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: lt(double d1, double d2)\nJavadoc: @return whether d1 < d2.\nCondition: d1<d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: gt(double d1, double d2)\nJavadoc: @return whether d1 > d2.\nCondition: d1>d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: gte(double d1, double d2)\nJavadoc: @return whether d1 > d2.\nCondition:"
        },
        {
            "condition": "d1!=d2 ? methodResultID==true:methodResultID==false",
            "parameters": [
                "'d1'",
                " 'd2'"
            ],
            "signature": "ne(double d1, double d2)",
            "tag": "@return whether d1 and d2 are non-equal.",
            "tag_type": "returnTag",
            "prompt": "Signature: logicalXor(long x,long y)\nJavadoc: @return the logical xor of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: intersectionCardinalityAtLeast(java.util.BitSet a,java.util.BitSet b,int i)\nJavadoc: @return true iff size(a intersect b) \u2265 i\nCondition: receiverObjectID.intersectionCardinality(a,b)>=i ? methodResultID==true\n\n###\n\nSignature: min(float a,float b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(int a,int b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(double a,double b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(long a,long b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: max(float a,float b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(long a,long b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(int a,int b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(double a,double b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: subAndCheck(long a,long b)\nJavadoc: @return the difference a - b.\nCondition: true ? methodResultID==a-b\n\n###\n\nSignature: logicalAnd(long x,long y)\nJavadoc: @return the logical and of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalAnd(int x,int y)\nJavadoc: @return the logical and of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: subAndCheck(int x,int y)\nJavadoc: @return the difference x - y.\nCondition: true ? methodResultID==x-y\n\n###\n\nSignature: logicalOr(long x,long y)\nJavadoc: @return the logical or of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalOr(int x,int y)\nJavadoc: @return the logical or of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: gte(double d1, double d2)\nJavadoc: @return whether d1 > d2.\nCondition: d1>d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: gt(double d1, double d2)\nJavadoc: @return whether d1 > d2.\nCondition: d1>d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: lt(double d1, double d2)\nJavadoc: @return whether d1 < d2.\nCondition: d1<d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: lte(double d1, double d2)\nJavadoc: @return whether d1 <= d2.\nCondition: d1<=d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: ne(double d1, double d2)\nJavadoc: @return whether d1 and d2 are non-equal.\nCondition:"
        },
        {
            "condition": "true ? methodResultID.isEmpty()==true",
            "parameters": [
                ""
            ],
            "signature": "empty()",
            "tag": "@return a new empty FluentIterable",
            "tag_type": "returnTag",
            "prompt": "Signature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: sizeIsEmpty(java.lang.Object object)\nJavadoc: @return true if empty or null\nCondition: object.isEmpty() || object==null ? methodResultID==true\n\n###\n\nSignature: isEmpty(java.util.Collection coll)\nJavadoc: @return true if empty or null\nCondition: coll.isEmpty() || coll==null ? methodResultID==true\n\n###\n\nSignature: firstNonNull(java.lang.Object first,java.lang.Object second)\nJavadoc: @return first if it is non-null; otherwise second if it is non-null\nCondition: first != null ? methodResultID == first ; first == null && second != null ? methodResultID == second\n\n###\n\nSignature: size(java.lang.Object object)\nJavadoc: @return the size of the specified collection or 0 if the object was null\nCondition: object==null ? methodResultID == 0\n\n###\n\nSignature: nullToEmpty(java.lang.String string)\nJavadoc: @return string itself if it is non-null; \"\" if it is null\nCondition: string!=null ? methodResultID.equals(string) : methodResultID.equals(\"\") \n\n###\n\nSignature: getFromSet(java.util.Set set,java.lang.Object key)\nJavadoc: @return the object in this set that is equal to key, or null\nCondition: true?(methodResultID==key||methodResultID==null)\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference,java.lang.String errorMessageTemplate,java.lang.Object[] errorMessageArgs)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: emptyToNull(java.lang.String string)\nJavadoc: @return string itself if it is nonempty; null if it is empty or null\nCondition: string==null || string.isEmpty() ? methodResultID==null : methodResultID.equals(string)\n\n###\n\nSignature: emptyQueue()\nJavadoc: @return an empty Queue\nCondition: true?methodResultID.equals(receiverObjectID.EMPTY_QUEUE)\n\n###\n\nSignature: all_null(java.lang.Object[] a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: java.util.Arrays.asList(a).stream().allMatch(e -> e==null)?methodResultID==true : methodResultID==false\n\n###\n\nSignature: all_null(java.util.List a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: a.stream().allMatch(e -> e==null) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: emptySortedBag()\nJavadoc: @return an empty sorted Bag\nCondition: true ? methodResultID.equals(receiverObjectID.EMPTY_SORTED_BAG)\n\n###\n\nSignature: doBackward(java.lang.Object b)\nJavadoc: @return the converted instance; must not be null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: doForward(java.lang.Object a)\nJavadoc: @return the converted instance; must not be null\nCondition: true?(methodResultID==null)==false\n\n###\n\nSignature: emptyBag()\nJavadoc: @return an empty Bag\nCondition: true ? methodResultID.equals(receiverObjectID.EMPTY_BAG)\n\n###\n\nSignature: emptyIfNull(java.util.Collection collection)\nJavadoc: @return an empty collection if the argument is null\nCondition: collection==null ? methodResultID.equals(org.apache.commons.collections4.CollectionUtils.emptyCollection())\n\n###\n\nSignature: emptyCollection()\nJavadoc: @return immutable empty collection\nCondition: true?methodResultID.equals(receiverObjectID.EMPTY_COLLECTION)\n\n###\n\nSignature: of(java.lang.Object singleton)\nJavadoc: @return a new FluentIterable containing the singleton\nCondition: true ? methodResultID.contains(singleton)==true\n\n###\n\nSignature: empty()\nJavadoc: @return a new empty FluentIterable\nCondition:"
        },
        {
            "condition": "a<=b ? methodResultID==b : methodResultID==a",
            "parameters": [
                "'a'",
                " 'b'"
            ],
            "signature": "max(double a,double b)",
            "tag": "@return b if a is lesser or equal to b, a otherwise",
            "tag_type": "returnTag",
            "prompt": "Signature: div(int x,int y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: mod_positive(long x,long y)\nJavadoc: @return x % y, where the result is constrained to be positive\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: mod_positive(int x,int y)\nJavadoc: @return x % y, where the result is constrained to be positive\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: rshiftUnsigned(int x,int y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: rshiftUnsigned(long x,long y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: rshiftSigned(long x,long y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: rshiftSigned(int x,int y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: bitwiseOr(int x,int y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseOr(long x,long y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: gte(double d1, double d2)\nJavadoc: @return whether d1 > d2.\nCondition: d1>d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: gt(double d1, double d2)\nJavadoc: @return whether d1 > d2.\nCondition: d1>d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: lte(double d1, double d2)\nJavadoc: @return whether d1 <= d2.\nCondition: d1<=d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: lt(double d1, double d2)\nJavadoc: @return whether d1 < d2.\nCondition: d1<d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: min(int a,int b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(double a,double b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(float a,float b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(long a,long b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: max(long a,long b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(float a,float b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(int a,int b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(double a,double b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition:"
        },
        {
            "condition": "true? methodResultID==true",
            "parameters": [
                "'element'"
            ],
            "signature": "add(E element)",
            "tag": "@return Always true.",
            "tag_type": "returnTag",
            "prompt": "Signature: bitwiseOr(long x,long y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: intersectionCardinalityAtLeast(java.util.BitSet a,java.util.BitSet b,int i)\nJavadoc: @return true iff size(a intersect b) \u2265 i\nCondition: receiverObjectID.intersectionCardinality(a,b)>=i ? methodResultID==true\n\n###\n\nSignature: rshiftSigned(long x,long y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: rshiftSigned(int x,int y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: isNullOrEmpty(java.lang.String string)\nJavadoc: @return true if the string is null or is the empty string\nCondition: string==null || string.isEmpty() ? methodResultID==true\n\n###\n\nSignature: all_null(java.util.List a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: a.stream().allMatch(e -> e==null) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: all_null(java.lang.Object[] a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: java.util.Arrays.asList(a).stream().allMatch(e -> e==null)?methodResultID==true : methodResultID==false\n\n###\n\nSignature: isInDanger(int range,float threat)\nJavadoc: @return True if a threat was found.\nCondition: receiverObjectID.searchForDanger(range, threat)!=null ? methodResultID==true\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: empty()\nJavadoc: @return true if the stack is currently empty\nCondition: receiverObjectID.isEmpty() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: sizeIsEmpty(java.lang.Object object)\nJavadoc: @return true if empty or null\nCondition: object.isEmpty() || object==null ? methodResultID==true\n\n###\n\nSignature: isEmpty(java.util.Collection coll)\nJavadoc: @return true if empty or null\nCondition: coll.isEmpty() || coll==null ? methodResultID==true\n\n###\n\nSignature: isEuropean()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: isREF()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: removeLRU(org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry entry)\nJavadoc: @return true\nCondition: true ? methodResultID==true\n\n###\n\nSignature: isIndian()\nJavadoc: @return True.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object, int count)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E element)\nJavadoc: @return Always true.\nCondition:"
        },
        {
            "condition": " true ? (methodResultID==0 || methodResultID==1)",
            "parameters": [
                "'x'",
                " 'y'"
            ],
            "signature": "logicalXor(int x,int y)",
            "tag": "@return the logical xor of x and y; the result is always 0 or 1",
            "tag_type": "returnTag",
            "prompt": "Signature: lshift(int x,int y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: addAndCheck(int x,int y)\nJavadoc: @return the sum x+y\nCondition: true ? methodResultID==x+y\n\n###\n\nSignature: bitwiseXor(int x,int y)\nJavadoc: @return x ^ y\nCondition: true?methodResultID==(x^y)\n\n###\n\nSignature: bitwiseXor(long x,long y)\nJavadoc: @return x ^ y\nCondition: true?methodResultID==(x^y)\n\n###\n\nSignature: ne(double d1, double d2)\nJavadoc: @return whether d1 and d2 are non-equal.\nCondition: d1!=d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: mul(long x,long y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(double x,double y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(int x,int y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: rshiftSigned(long x,long y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: rshiftSigned(int x,int y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: mulAndCheck(int x,int y)\nJavadoc: @return the product x * y.\nCondition: true ? methodResultID==x*y\n\n###\n\nSignature: bitwiseOr(int x,int y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseOr(long x,long y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseAnd(long x,long y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: bitwiseAnd(int x,int y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: logicalAnd(int x,int y)\nJavadoc: @return the logical and of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalAnd(long x,long y)\nJavadoc: @return the logical and of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalOr(long x,long y)\nJavadoc: @return the logical or of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalOr(int x,int y)\nJavadoc: @return the logical or of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalXor(long x,long y)\nJavadoc: @return the logical xor of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalXor(int x,int y)\nJavadoc: @return the logical xor of x and y; the result is always 0 or 1\nCondition:"
        },
        {
            "condition": "true?methodResultID==(x|y)",
            "parameters": [
                "'x'",
                " 'y'"
            ],
            "signature": "bitwiseOr(long x,long y)",
            "tag": "@return x | y",
            "tag_type": "returnTag",
            "prompt": "Signature: max(double a,double b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(float a,float b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(long a,long b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: rshiftUnsigned(int x,int y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: rshiftUnsigned(long x,long y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: logicalOr(long x,long y)\nJavadoc: @return the logical or of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalOr(int x,int y)\nJavadoc: @return the logical or of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: mul(double x,double y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(long x,long y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(int x,int y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: div(int x,int y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(long x,long y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(double x,double y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: lshift(long x,long y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: lshift(int x,int y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: bitwiseAnd(int x,int y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: bitwiseAnd(long x,long y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: rshiftSigned(int x,int y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: rshiftSigned(long x,long y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: bitwiseOr(int x,int y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseOr(long x,long y)\nJavadoc: @return x | y\nCondition:"
        },
        {
            "condition": "receiverObjectID.getEdgePath().contains(edge) ? methodResultID==true",
            "parameters": [
                "'edge'"
            ],
            "signature": "contains(org.graphstream.graph.Edge edge)",
            "tag": "@return true if the path contains the edge.",
            "tag_type": "returnTag",
            "prompt": "Signature: lte(double d1, double d2)\nJavadoc: @return whether d1 <= d2.\nCondition: d1<=d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: side(org.apache.commons.math3.geometry.partitioning.Hyperplane<S> hyperplane)\nJavadoc: @return one of Side#PLUS Side.PLUS, Side#MINUS Side.MINUS, Side#BOTH Side.BOTH or Side#HYPER Side.HYPER (the latter result can occur only if the tree contains only one cut hyperplane).\nCondition: methodResultID.equals(Side.PLUS) || methodResultID.equals(Side.MINUS) || methodResultID.equals(Side.BOTH) || methodResultID.equals(Side.HYPER)\n\n###\n\nSignature: canMoveToEurope()\nJavadoc: @return True if this player has an instance of Europe.\nCondition: receiverObjectID.getEurope() != null ? methodResultID==true\n\n###\n\nSignature: hasSpaceLeft()\nJavadoc: @return True if there is free space.\nCondition: receiverObjectID.getSpaceLeft() > 0 ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: removeLRU(org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry entry)\nJavadoc: @return true\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E element)\nJavadoc: @return Always true.\nCondition: true? methodResultID==true\n\n###\n\nSignature: isIndian()\nJavadoc: @return True.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: hasTile()\nJavadoc: @return True if this unit is on a tile.\nCondition: receiverObjectID.getTile()!=null ? methodResultID==true\n\n###\n\nSignature: hasExplored(net.sf.freecol.common.model.Tile tile)\nJavadoc: @return True if the Tile has been explored.\nCondition: tile.isExplored() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: isInDanger(int range,float threat)\nJavadoc: @return True if a threat was found.\nCondition: receiverObjectID.searchForDanger(range, threat)!=null ? methodResultID==true\n\n###\n\nSignature: add(E object, int count)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: intersectionCardinalityAtLeast(java.util.BitSet a,java.util.BitSet b,java.util.BitSet c,int i)\nJavadoc: @return true iff size(a intersect b intersect c) \u2265 i\nCondition: receiverObjectID.intersectionCardinality(a,b,c)>=i ? methodResultID==true\n\n###\n\nSignature: intersectionCardinalityAtLeast(java.util.BitSet a,java.util.BitSet b,int i)\nJavadoc: @return true iff size(a intersect b) \u2265 i\nCondition: receiverObjectID.intersectionCardinality(a,b)>=i ? methodResultID==true\n\n###\n\nSignature: addVertex(java.lang.Object v)\nJavadoc: @return true if this graph did not already contain the specified vertex.\nCondition: (receiverObjectID.containsVertex(v))==false ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: addEdgeWithVertices(org.jgrapht.Graph targetGraph,org.jgrapht.Graph sourceGraph,java.lang.Object edge)\nJavadoc: @return true if the target graph did not already contain the specified edge.\nCondition: (targetGraph.containsEdge(edge))==false?methodResultID==true:methodResultID==false\n\n###\n\nSignature: removeVertex(java.lang.Object v)\nJavadoc: @return true if the graph contained the specified vertex; false otherwise.\nCondition: receiverObjectID.containsVertex(v) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: addEdge(java.lang.Object sourceVertex,java.lang.Object targetVertex,java.lang.Object e)\nJavadoc: @return true if this graph did not already contain the specified edge.\nCondition: (receiverObjectID.containsEdge(sourceVertex,targetVertex))==false?methodResultID==true:methodResultID==false\n\n###\n\nSignature: contains(org.graphstream.graph.Node node)\nJavadoc: @return true if the path contains the node.\nCondition: receiverObjectID.getNodePath().contains(node) ? methodResultID==true\n\n###\n\nSignature: removeEdge(java.lang.Object e)\nJavadoc: @return true if and only if the graph contained the specified edge.\nCondition: receiverObjectID.containsEdge(e) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: contains(org.graphstream.graph.Edge edge)\nJavadoc: @return true if the path contains the edge.\nCondition:"
        },
        {
            "condition": "java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false",
            "parameters": [
                "'a'"
            ],
            "signature": "any_null(java.util.List a)",
            "tag": "@return true iff some element of a is null (false if a is zero-sized)",
            "tag_type": "returnTag",
            "prompt": "Signature: add(E object, int count)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: isREF()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: isEuropean()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: intersectionCardinalityAtLeast(java.util.BitSet a,java.util.BitSet b,int i)\nJavadoc: @return true iff size(a intersect b) \u2265 i\nCondition: receiverObjectID.intersectionCardinality(a,b)>=i ? methodResultID==true\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference,java.lang.String errorMessageTemplate,java.lang.Object[] errorMessageArgs)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: size(java.lang.Object object)\nJavadoc: @return the size of the specified collection or 0 if the object was null\nCondition: object==null ? methodResultID == 0\n\n###\n\nSignature: getFromSet(java.util.Set set,java.lang.Object key)\nJavadoc: @return the object in this set that is equal to key, or null\nCondition: true?(methodResultID==key||methodResultID==null)\n\n###\n\nSignature: convert(java.lang.Object a)\nJavadoc: @return the converted value; is null if and only if a is null\nCondition: a==null ? methodResultID==null : methodResultID!=null\n\n###\n\nSignature: emptyIfNull(java.util.Collection collection)\nJavadoc: @return an empty collection if the argument is null\nCondition: collection==null ? methodResultID.equals(org.apache.commons.collections4.CollectionUtils.emptyCollection())\n\n###\n\nSignature: nullToEmpty(java.lang.String string)\nJavadoc: @return string itself if it is non-null; \"\" if it is null\nCondition: string!=null ? methodResultID.equals(string) : methodResultID.equals(\"\") \n\n###\n\nSignature: firstNonNull(java.lang.Object first,java.lang.Object second)\nJavadoc: @return first if it is non-null; otherwise second if it is non-null\nCondition: first != null ? methodResultID == first ; first == null && second != null ? methodResultID == second\n\n###\n\nSignature: emptyToNull(java.lang.String string)\nJavadoc: @return string itself if it is nonempty; null if it is empty or null\nCondition: string==null || string.isEmpty() ? methodResultID==null : methodResultID.equals(string)\n\n###\n\nSignature: isNullOrEmpty(java.lang.String string)\nJavadoc: @return true if the string is null or is the empty string\nCondition: string==null || string.isEmpty() ? methodResultID==true\n\n###\n\nSignature: sizeIsEmpty(java.lang.Object object)\nJavadoc: @return true if empty or null\nCondition: object.isEmpty() || object==null ? methodResultID==true\n\n###\n\nSignature: isEmpty(java.util.Collection coll)\nJavadoc: @return true if empty or null\nCondition: coll.isEmpty() || coll==null ? methodResultID==true\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: all_null(java.lang.Object[] a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: java.util.Arrays.asList(a).stream().allMatch(e -> e==null)?methodResultID==true : methodResultID==false\n\n###\n\nSignature: all_null(java.util.List a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: a.stream().allMatch(e -> e==null) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition:"
        },
        {
            "condition": "receiverObjectID.isEmpty() ? methodResultID==true:methodResultID==false",
            "parameters": [
                ""
            ],
            "signature": "empty()",
            "tag": "@return true if the stack is currently empty",
            "tag_type": "returnTag",
            "prompt": "Signature: isEuropean()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: emptyIfNull(java.util.Collection collection)\nJavadoc: @return an empty collection if the argument is null\nCondition: collection==null ? methodResultID.equals(org.apache.commons.collections4.CollectionUtils.emptyCollection())\n\n###\n\nSignature: isIndian()\nJavadoc: @return True.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: all_null(java.util.List a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: a.stream().allMatch(e -> e==null) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: all_null(java.lang.Object[] a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: java.util.Arrays.asList(a).stream().allMatch(e -> e==null)?methodResultID==true : methodResultID==false\n\n###\n\nSignature: add(E element)\nJavadoc: @return Always true.\nCondition: true? methodResultID==true\n\n###\n\nSignature: removeLRU(org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry entry)\nJavadoc: @return true\nCondition: true ? methodResultID==true\n\n###\n\nSignature: emptyToNull(java.lang.String string)\nJavadoc: @return string itself if it is nonempty; null if it is empty or null\nCondition: string==null || string.isEmpty() ? methodResultID==null : methodResultID.equals(string)\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: peek(int n)\nJavadoc: @return the n'th item on the stack, zero relative\nCondition: true ? methodResultID.equals(receiverObjectID.get(receiverObjectID.size() - n)-1)\n\n###\n\nSignature: isNullOrEmpty(java.lang.String string)\nJavadoc: @return true if the string is null or is the empty string\nCondition: string==null || string.isEmpty() ? methodResultID==true\n\n###\n\nSignature: peek()\nJavadoc: @return the top item on the stack\nCondition: true ? methodResultID.equals(receiverObjectID.peek())\n\n###\n\nSignature: add(E object)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object, int count)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: hasSpaceLeft()\nJavadoc: @return True if there is free space.\nCondition: receiverObjectID.getSpaceLeft() > 0 ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: isEmpty(java.util.Collection coll)\nJavadoc: @return true if empty or null\nCondition: coll.isEmpty() || coll==null ? methodResultID==true\n\n###\n\nSignature: sizeIsEmpty(java.lang.Object object)\nJavadoc: @return true if empty or null\nCondition: object.isEmpty() || object==null ? methodResultID==true\n\n###\n\nSignature: empty()\nJavadoc: @return true if the stack is currently empty\nCondition: receiverObjectID.isEmpty() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: empty()\nJavadoc: @return true if the stack is currently empty\nCondition:"
        },
        {
            "condition": "true ? (methodResultID==null)==false",
            "parameters": [
                ""
            ],
            "signature": "findSimpleCycles()",
            "tag": "@return The list of all simple cycles. Possibly empty but never null.",
            "tag_type": "returnTag",
            "prompt": "Signature: bitwiseAnd(int x,int y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: emptyQueue()\nJavadoc: @return an empty Queue\nCondition: true?methodResultID.equals(receiverObjectID.EMPTY_QUEUE)\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: emptyToNull(java.lang.String string)\nJavadoc: @return string itself if it is nonempty; null if it is empty or null\nCondition: string==null || string.isEmpty() ? methodResultID==null : methodResultID.equals(string)\n\n###\n\nSignature: repeat(java.lang.String string,int count)\nJavadoc: @return a string containing string repeated count times (the empty string if count is zero)\nCondition: count==0 ? methodResultID.equals(\"\")\n\n###\n\nSignature: getFromSet(java.util.Set set,java.lang.Object key)\nJavadoc: @return the object in this set that is equal to key, or null\nCondition: true?(methodResultID==key||methodResultID==null)\n\n###\n\nSignature: size(java.lang.Object object)\nJavadoc: @return the size of the specified collection or 0 if the object was null\nCondition: object==null ? methodResultID == 0\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: removeEdge(java.lang.Object e)\nJavadoc: @return true if and only if the graph contained the specified edge.\nCondition: receiverObjectID.containsEdge(e) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: contains(org.graphstream.graph.Node node)\nJavadoc: @return true if the path contains the node.\nCondition: receiverObjectID.getNodePath().contains(node) ? methodResultID==true\n\n###\n\nSignature: addVertex(java.lang.Object v)\nJavadoc: @return true if this graph did not already contain the specified vertex.\nCondition: (receiverObjectID.containsVertex(v))==false ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: addEdge(java.lang.Object sourceVertex,java.lang.Object targetVertex,java.lang.Object e)\nJavadoc: @return true if this graph did not already contain the specified edge.\nCondition: (receiverObjectID.containsEdge(sourceVertex,targetVertex))==false?methodResultID==true:methodResultID==false\n\n###\n\nSignature: all_null(java.lang.Object[] a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: java.util.Arrays.asList(a).stream().allMatch(e -> e==null)?methodResultID==true : methodResultID==false\n\n###\n\nSignature: all_null(java.util.List a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: a.stream().allMatch(e -> e==null) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: emptyBag()\nJavadoc: @return an empty Bag\nCondition: true ? methodResultID.equals(receiverObjectID.EMPTY_BAG)\n\n###\n\nSignature: emptySortedBag()\nJavadoc: @return an empty sorted Bag\nCondition: true ? methodResultID.equals(receiverObjectID.EMPTY_SORTED_BAG)\n\n###\n\nSignature: removeVertex(java.lang.Object v)\nJavadoc: @return true if the graph contained the specified vertex; false otherwise.\nCondition: receiverObjectID.containsVertex(v) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: getDiagonal()\nJavadoc: @return The diagonal.\nCondition: true ? methodResultID == receiverObjectID.diagonal\n\n###\n\nSignature: emptyIfNull(java.util.Collection collection)\nJavadoc: @return an empty collection if the argument is null\nCondition: collection==null ? methodResultID.equals(org.apache.commons.collections4.CollectionUtils.emptyCollection())\n\n###\n\nSignature: findSimpleCycles()\nJavadoc: @return The list of all simple cycles. Possibly empty but never null.\nCondition:"
        },
        {
            "condition": "true?methodResultID==(x&y)",
            "parameters": [
                "'x'",
                " 'y'"
            ],
            "signature": "bitwiseAnd(int x,int y)",
            "tag": "@return x & y",
            "tag_type": "returnTag",
            "prompt": "Signature: rshiftSigned(int x,int y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: rshiftSigned(long x,long y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: lshift(int x,int y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: lshift(long x,long y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: addAndCheck(int x,int y)\nJavadoc: @return the sum x+y\nCondition: true ? methodResultID==x+y\n\n###\n\nSignature: logicalOr(long x,long y)\nJavadoc: @return the logical or of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalOr(int x,int y)\nJavadoc: @return the logical or of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalAnd(int x,int y)\nJavadoc: @return the logical and of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalAnd(long x,long y)\nJavadoc: @return the logical and of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: bitwiseXor(int x,int y)\nJavadoc: @return x ^ y\nCondition: true?methodResultID==(x^y)\n\n###\n\nSignature: bitwiseXor(long x,long y)\nJavadoc: @return x ^ y\nCondition: true?methodResultID==(x^y)\n\n###\n\nSignature: bitwiseOr(int x,int y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseOr(long x,long y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: div(int x,int y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(double x,double y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(long x,long y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: mul(double x,double y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(long x,long y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(int x,int y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: bitwiseAnd(long x,long y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: bitwiseAnd(int x,int y)\nJavadoc: @return x & y\nCondition:"
        },
        {
            "condition": "true ? methodResultID.equals(org.apache.commons.collections4.comparators.FixedOrderComparator.UnknownObjectBehavior)",
            "parameters": [
                ""
            ],
            "signature": "getUnknownObjectBehavior()",
            "tag": "@return FixedOrderComparator.UnknownObjectBehavior",
            "tag_type": "returnTag",
            "prompt": "Signature: max(float a,float b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(long a,long b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(double a,double b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(int a,int b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: bitwiseOr(long x,long y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseOr(int x,int y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: emptyCollection()\nJavadoc: @return immutable empty collection\nCondition: true?methodResultID.equals(receiverObjectID.EMPTY_COLLECTION)\n\n###\n\nSignature: isIndian()\nJavadoc: @return True.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: forAllDo(java.util.Iterator iterator,org.apache.commons.collections4.Closure closure)\nJavadoc: @return closure\nCondition: true?methodResultID.equals(closure)\n\n###\n\nSignature: forAllDo(java.lang.Iterable collection,org.apache.commons.collections4.Closure closure)\nJavadoc: @return closure\nCondition: true?methodResultID.equals(closure)\n\n###\n\nSignature: rshiftSigned(int x,int y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: rshiftSigned(long x,long y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: removeLRU(org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry entry)\nJavadoc: @return true\nCondition: true ? methodResultID==true\n\n###\n\nSignature: isEuropean()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: isREF()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: rshiftUnsigned(long x,long y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: rshiftUnsigned(int x,int y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: lshift(int x,int y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: lshift(long x,long y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: emptySortedBag()\nJavadoc: @return an empty sorted Bag\nCondition: true ? methodResultID.equals(receiverObjectID.EMPTY_SORTED_BAG)\n\n###\n\nSignature: getUnknownObjectBehavior()\nJavadoc: @return FixedOrderComparator.UnknownObjectBehavior\nCondition:"
        },
        {
            "condition": "(receiverObjectID.containsEdge(sourceVertex,targetVertex))==false?methodResultID==true:methodResultID==false",
            "parameters": [
                "'sourceVertex'",
                " 'targetVertex'",
                " 'e'"
            ],
            "signature": "addEdge(java.lang.Object sourceVertex,java.lang.Object targetVertex,java.lang.Object e)",
            "tag": "@return true if this graph did not already contain the specified edge.",
            "tag_type": "returnTag",
            "prompt": "Signature: ne(double d1, double d2)\nJavadoc: @return whether d1 and d2 are non-equal.\nCondition: d1!=d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: findSimpleCycles()\nJavadoc: @return The list of all simple cycles. Possibly empty but never null.\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: isInDanger(int range,float threat)\nJavadoc: @return True if a threat was found.\nCondition: receiverObjectID.searchForDanger(range, threat)!=null ? methodResultID==true\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: isEmpty(java.util.Collection coll)\nJavadoc: @return true if empty or null\nCondition: coll.isEmpty() || coll==null ? methodResultID==true\n\n###\n\nSignature: sizeIsEmpty(java.lang.Object object)\nJavadoc: @return true if empty or null\nCondition: object.isEmpty() || object==null ? methodResultID==true\n\n###\n\nSignature: empty()\nJavadoc: @return true if the stack is currently empty\nCondition: receiverObjectID.isEmpty() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: add(E object, int count)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: intersectionCardinalityAtLeast(java.util.BitSet a,java.util.BitSet b,int i)\nJavadoc: @return true iff size(a intersect b) \u2265 i\nCondition: receiverObjectID.intersectionCardinality(a,b)>=i ? methodResultID==true\n\n###\n\nSignature: hasSpaceLeft()\nJavadoc: @return True if there is free space.\nCondition: receiverObjectID.getSpaceLeft() > 0 ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: intersectionCardinalityAtLeast(java.util.BitSet a,java.util.BitSet b,java.util.BitSet c,int i)\nJavadoc: @return true iff size(a intersect b intersect c) \u2265 i\nCondition: receiverObjectID.intersectionCardinality(a,b,c)>=i ? methodResultID==true\n\n###\n\nSignature: contains(org.graphstream.graph.Node node)\nJavadoc: @return true if the path contains the node.\nCondition: receiverObjectID.getNodePath().contains(node) ? methodResultID==true\n\n###\n\nSignature: contains(org.graphstream.graph.Edge edge)\nJavadoc: @return true if the path contains the edge.\nCondition: receiverObjectID.getEdgePath().contains(edge) ? methodResultID==true\n\n###\n\nSignature: removeVertex(java.lang.Object v)\nJavadoc: @return true if the graph contained the specified vertex; false otherwise.\nCondition: receiverObjectID.containsVertex(v) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: removeEdge(java.lang.Object e)\nJavadoc: @return true if and only if the graph contained the specified edge.\nCondition: receiverObjectID.containsEdge(e) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: addVertex(java.lang.Object v)\nJavadoc: @return true if this graph did not already contain the specified vertex.\nCondition: (receiverObjectID.containsVertex(v))==false ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: addEdgeWithVertices(org.jgrapht.Graph targetGraph,org.jgrapht.Graph sourceGraph,java.lang.Object edge)\nJavadoc: @return true if the target graph did not already contain the specified edge.\nCondition: (targetGraph.containsEdge(edge))==false?methodResultID==true:methodResultID==false\n\n###\n\nSignature: addEdge(java.lang.Object sourceVertex,java.lang.Object targetVertex,java.lang.Object e)\nJavadoc: @return true if this graph did not already contain the specified edge.\nCondition:"
        },
        {
            "condition": "receiverObjectID.intersectionCardinality(a,b)>=i ? methodResultID==true",
            "parameters": [
                "'a'",
                " 'b'",
                " 'i'"
            ],
            "signature": "intersectionCardinalityAtLeast(java.util.BitSet a,java.util.BitSet b,int i)",
            "tag": "@return true iff size(a intersect b) \u2265 i",
            "tag_type": "returnTag",
            "prompt": "Signature: add(E element)\nJavadoc: @return Always true.\nCondition: true? methodResultID==true\n\n###\n\nSignature: hasSpaceLeft()\nJavadoc: @return True if there is free space.\nCondition: receiverObjectID.getSpaceLeft() > 0 ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: max(int a,int b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(double a,double b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(long a,long b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(float a,float b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: all_null(java.lang.Object[] a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: java.util.Arrays.asList(a).stream().allMatch(e -> e==null)?methodResultID==true : methodResultID==false\n\n###\n\nSignature: all_null(java.util.List a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: a.stream().allMatch(e -> e==null) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: lt(double d1, double d2)\nJavadoc: @return whether d1 < d2.\nCondition: d1<d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: bitwiseOr(int x,int y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseOr(long x,long y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: removeLRU(org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry entry)\nJavadoc: @return true\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object, int count)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: lte(double d1, double d2)\nJavadoc: @return whether d1 <= d2.\nCondition: d1<=d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: isIndian()\nJavadoc: @return True.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: intersectionCardinalityAtLeast(java.util.BitSet a,java.util.BitSet b,java.util.BitSet c,int i)\nJavadoc: @return true iff size(a intersect b intersect c) \u2265 i\nCondition: receiverObjectID.intersectionCardinality(a,b,c)>=i ? methodResultID==true\n\n###\n\nSignature: intersectionCardinalityAtLeast(java.util.BitSet a,java.util.BitSet b,int i)\nJavadoc: @return true iff size(a intersect b) \u2265 i\nCondition:"
        },
        {
            "condition": "true ? methodResultID==Integer.MAX_VALUE",
            "parameters": [
                ""
            ],
            "signature": "getUnitCapacity()",
            "tag": "@return Integer.MAX_VALUE, denoting no effective limit.",
            "tag_type": "returnTag",
            "prompt": "Signature: emptyCollection()\nJavadoc: @return immutable empty collection\nCondition: true?methodResultID.equals(receiverObjectID.EMPTY_COLLECTION)\n\n###\n\nSignature: getSize()\nJavadoc: @return The size.\nCondition: true ? methodResultID.equals(receiverObjectID.size)\n\n###\n\nSignature: mul(double x,double y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(long x,long y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(int x,int y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: rshiftSigned(long x,long y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: rshiftSigned(int x,int y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: empty()\nJavadoc: @return true if the stack is currently empty\nCondition: receiverObjectID.isEmpty() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: lshift(int x,int y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: lshift(long x,long y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: rshiftUnsigned(int x,int y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: rshiftUnsigned(long x,long y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: getParameter(java.lang.String parameter)\nJavadoc: @return The parameter value (empty string if not set).\nCondition: !receiverObjectID.hasParameter(parameter) ? methodResultID.equals(\"\")\n\n###\n\nSignature: add(E object, int count)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: removeLRU(org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry entry)\nJavadoc: @return true\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E element)\nJavadoc: @return Always true.\nCondition: true? methodResultID==true\n\n###\n\nSignature: isIndian()\nJavadoc: @return True.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: isREF()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: isEuropean()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: getUnitCapacity()\nJavadoc: @return Integer.MAX_VALUE, denoting no effective limit.\nCondition:"
        },
        {
            "condition": "methodResultID.equals(Side.PLUS) || methodResultID.equals(Side.MINUS) || methodResultID.equals(Side.BOTH) || methodResultID.equals(Side.HYPER)",
            "parameters": [
                "'hyperplane'"
            ],
            "signature": "side(org.apache.commons.math3.geometry.partitioning.Hyperplane<S> hyperplane)",
            "tag": "@return one of Side#PLUS Side.PLUS, Side#MINUS Side.MINUS, Side#BOTH Side.BOTH or Side#HYPER Side.HYPER (the latter result can occur only if the tree contains only one cut hyperplane).",
            "tag_type": "returnTag",
            "prompt": "Signature: logicalXor(long x,long y)\nJavadoc: @return the logical xor of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalAnd(long x,long y)\nJavadoc: @return the logical and of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalAnd(int x,int y)\nJavadoc: @return the logical and of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: addVertex(java.lang.Object v)\nJavadoc: @return true if this graph did not already contain the specified vertex.\nCondition: (receiverObjectID.containsVertex(v))==false ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: removeEdge(java.lang.Object e)\nJavadoc: @return true if and only if the graph contained the specified edge.\nCondition: receiverObjectID.containsEdge(e) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: rshiftUnsigned(int x,int y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: rshiftUnsigned(long x,long y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: gte(double d1, double d2)\nJavadoc: @return whether d1 > d2.\nCondition: d1>d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: gt(double d1, double d2)\nJavadoc: @return whether d1 > d2.\nCondition: d1>d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: lte(double d1, double d2)\nJavadoc: @return whether d1 <= d2.\nCondition: d1<=d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: logicalOr(long x,long y)\nJavadoc: @return the logical or of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalOr(int x,int y)\nJavadoc: @return the logical or of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: addEdge(java.lang.Object sourceVertex,java.lang.Object targetVertex,java.lang.Object e)\nJavadoc: @return true if this graph did not already contain the specified edge.\nCondition: (receiverObjectID.containsEdge(sourceVertex,targetVertex))==false?methodResultID==true:methodResultID==false\n\n###\n\nSignature: addEdgeWithVertices(org.jgrapht.Graph targetGraph,org.jgrapht.Graph sourceGraph,java.lang.Object edge)\nJavadoc: @return true if the target graph did not already contain the specified edge.\nCondition: (targetGraph.containsEdge(edge))==false?methodResultID==true:methodResultID==false\n\n###\n\nSignature: ne(double d1, double d2)\nJavadoc: @return whether d1 and d2 are non-equal.\nCondition: d1!=d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: contains(org.graphstream.graph.Edge edge)\nJavadoc: @return true if the path contains the edge.\nCondition: receiverObjectID.getEdgePath().contains(edge) ? methodResultID==true\n\n###\n\nSignature: checkPoint(double point, double tolerance)\nJavadoc: @return a code representing the point status: either Location#INSIDE, Location#OUTSIDE or Location#BOUNDARY.\nCondition: methodResultID.equals(Location.INSIDE) || methodResultID.equals(Location.OUTSIDE) || methodResultID.equals(Location.BOUNDARY)\n\n###\n\nSignature: checkPoint(org.apache.commons.math3.geometry.Point<S> point)\nJavadoc: @return a code representing the point status: either Location#INSIDE, Location#OUTSIDE or Location#BOUNDARY.\nCondition: methodResultID.equals(Location.INSIDE) || methodResultID.equals(Location.OUTSIDE) || methodResultID.equals(Location.BOUNDARY)\n\n###\n\nSignature: search(java.lang.Object object)\nJavadoc: @return the 1-based depth into the stack of the object, or -1 if not found\nCondition: receiverObjectID.contains(object) ? methodResultID==receiverObjectID.indexOf(object)+1 : methodResultID==-1\n\n###\n\nSignature: getDiagonal()\nJavadoc: @return The diagonal.\nCondition: true ? methodResultID == receiverObjectID.diagonal\n\n###\n\nSignature: side(org.apache.commons.math3.geometry.partitioning.Hyperplane<S> hyperplane)\nJavadoc: @return one of Side#PLUS Side.PLUS, Side#MINUS Side.MINUS, Side#BOTH Side.BOTH or Side#HYPER Side.HYPER (the latter result can occur only if the tree contains only one cut hyperplane).\nCondition:"
        },
        {
            "condition": "!receiverObjectID.hasParameter(parameter) ? methodResultID.equals(\"\")",
            "parameters": [
                "'parameter'"
            ],
            "signature": "getParameter(java.lang.String parameter)",
            "tag": "@return The parameter value (empty string if not set).",
            "tag_type": "returnTag",
            "prompt": "Signature: add(E object, int count)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: emptyBag()\nJavadoc: @return an empty Bag\nCondition: true ? methodResultID.equals(receiverObjectID.EMPTY_BAG)\n\n###\n\nSignature: repeat(java.lang.String string,int count)\nJavadoc: @return a string containing string repeated count times (the empty string if count is zero)\nCondition: count==0 ? methodResultID.equals(\"\")\n\n###\n\nSignature: firstNonNull(java.lang.Object first,java.lang.Object second)\nJavadoc: @return first if it is non-null; otherwise second if it is non-null\nCondition: first != null ? methodResultID == first ; first == null && second != null ? methodResultID == second\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference,java.lang.String errorMessageTemplate,java.lang.Object[] errorMessageArgs)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: isEmpty(java.util.Collection coll)\nJavadoc: @return true if empty or null\nCondition: coll.isEmpty() || coll==null ? methodResultID==true\n\n###\n\nSignature: sizeIsEmpty(java.lang.Object object)\nJavadoc: @return true if empty or null\nCondition: object.isEmpty() || object==null ? methodResultID==true\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: load(java.lang.Object key)\nJavadoc: @return the value associated with key; must not be null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: convert(java.lang.Object a)\nJavadoc: @return the converted value; is null if and only if a is null\nCondition: a==null ? methodResultID==null : methodResultID!=null\n\n###\n\nSignature: emptyIfNull(java.util.Collection collection)\nJavadoc: @return an empty collection if the argument is null\nCondition: collection==null ? methodResultID.equals(org.apache.commons.collections4.CollectionUtils.emptyCollection())\n\n###\n\nSignature: isNullOrEmpty(java.lang.String string)\nJavadoc: @return true if the string is null or is the empty string\nCondition: string==null || string.isEmpty() ? methodResultID==true\n\n###\n\nSignature: emptyToNull(java.lang.String string)\nJavadoc: @return string itself if it is nonempty; null if it is empty or null\nCondition: string==null || string.isEmpty() ? methodResultID==null : methodResultID.equals(string)\n\n###\n\nSignature: nullToEmpty(java.lang.String string)\nJavadoc: @return string itself if it is non-null; \"\" if it is null\nCondition: string!=null ? methodResultID.equals(string) : methodResultID.equals(\"\") \n\n###\n\nSignature: asRegex(java.lang.String s)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: asRegex(java.lang.String s,int groups)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: getParameter(java.lang.String parameter)\nJavadoc: @return The parameter value (empty string if not set).\nCondition:"
        },
        {
            "condition": "a<=b ? methodResultID==a : methodResultID==b",
            "parameters": [
                "'a'",
                " 'b'"
            ],
            "signature": "min(long a,long b)",
            "tag": "@return a if a is lesser or equal to b, b otherwise",
            "tag_type": "returnTag",
            "prompt": "Signature: mod_positive(long x,long y)\nJavadoc: @return x % y, where the result is constrained to be positive\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: mod_positive(int x,int y)\nJavadoc: @return x % y, where the result is constrained to be positive\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: firstNonNull(java.lang.Object first,java.lang.Object second)\nJavadoc: @return first if it is non-null; otherwise second if it is non-null\nCondition: first != null ? methodResultID == first ; first == null && second != null ? methodResultID == second\n\n###\n\nSignature: rshiftUnsigned(int x,int y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: rshiftUnsigned(long x,long y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: bitwiseOr(int x,int y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseOr(long x,long y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: rshiftSigned(int x,int y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: rshiftSigned(long x,long y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: gte(double d1, double d2)\nJavadoc: @return whether d1 > d2.\nCondition: d1>d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: gt(double d1, double d2)\nJavadoc: @return whether d1 > d2.\nCondition: d1>d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: lte(double d1, double d2)\nJavadoc: @return whether d1 <= d2.\nCondition: d1<=d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: lt(double d1, double d2)\nJavadoc: @return whether d1 < d2.\nCondition: d1<d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: max(long a,long b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(float a,float b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(double a,double b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(int a,int b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: min(double a,double b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(int a,int b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(float a,float b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(long a,long b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition:"
        },
        {
            "condition": "true ? methodResultID.equals(receiverObjectID.get(receiverObjectID.size() - n)-1)",
            "parameters": [
                "'n'"
            ],
            "signature": "peek(int n)",
            "tag": "@return the n'th item on the stack, zero relative",
            "tag_type": "returnTag",
            "prompt": "Signature: nullToEmpty(java.lang.String string)\nJavadoc: @return string itself if it is non-null; \"\" if it is null\nCondition: string!=null ? methodResultID.equals(string) : methodResultID.equals(\"\") \n\n###\n\nSignature: repeat(java.lang.String string,int count)\nJavadoc: @return a string containing string repeated count times (the empty string if count is zero)\nCondition: count==0 ? methodResultID.equals(\"\")\n\n###\n\nSignature: getType()\nJavadoc: @return This.\nCondition: true ? methodResultID==receiverObjectID\n\n###\n\nSignature: emptySortedBag()\nJavadoc: @return an empty sorted Bag\nCondition: true ? methodResultID.equals(receiverObjectID.EMPTY_SORTED_BAG)\n\n###\n\nSignature: evaluate(double[] values, int begin, int length)\nJavadoc: @return the sum of the values or 0 if length = 0.\nCondition: length==0 ? methodResultID==0\n\n###\n\nSignature: evaluate(double[] values, double[] weights, int begin, int length)\nJavadoc: @return the sum of the values or 0 if length = 0.\nCondition: length==0 ? methodResultID==0\n\n###\n\nSignature: nextPrime(int n)\nJavadoc: @return the smallest prime greater than or equal to n.\nCondition: true?methodResultID>=n\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: getFromSet(java.util.Set set,java.lang.Object key)\nJavadoc: @return the object in this set that is equal to key, or null\nCondition: true?(methodResultID==key||methodResultID==null)\n\n###\n\nSignature: size(java.lang.Object object)\nJavadoc: @return the size of the specified collection or 0 if the object was null\nCondition: object==null ? methodResultID == 0\n\n###\n\nSignature: asRegex(java.lang.String s,int groups)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: asRegex(java.lang.String s)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: firstNonNull(java.lang.Object first,java.lang.Object second)\nJavadoc: @return first if it is non-null; otherwise second if it is non-null\nCondition: first != null ? methodResultID == first ; first == null && second != null ? methodResultID == second\n\n###\n\nSignature: push(java.lang.Object item)\nJavadoc: @return the item just pushed\nCondition: true ? methodResultID.equals(item)\n\n###\n\nSignature: forAllButLastDo(java.lang.Iterable collection,org.apache.commons.collections4.Closure closure)\nJavadoc: @return the last element in the collection, or null if either collection or closure is null\nCondition: (collection==null || closure==null) ? methodResultID==null : collection.get(collection.size() - 1)\n\n###\n\nSignature: forAllButLastDo(java.util.Iterator iterator,org.apache.commons.collections4.Closure closure)\nJavadoc: @return the last element in the collection, or null if either iterator or closure is null\nCondition: iterator==null || closure==null ? methodResultID==null\n\n###\n\nSignature: empty()\nJavadoc: @return true if the stack is currently empty\nCondition: receiverObjectID.isEmpty() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: search(java.lang.Object object)\nJavadoc: @return the 1-based depth into the stack of the object, or -1 if not found\nCondition: receiverObjectID.contains(object) ? methodResultID==receiverObjectID.indexOf(object)+1 : methodResultID==-1\n\n###\n\nSignature: peek()\nJavadoc: @return the top item on the stack\nCondition: true ? methodResultID.equals(receiverObjectID.peek())\n\n###\n\nSignature: peek(int n)\nJavadoc: @return the n'th item on the stack, zero relative\nCondition:"
        },
        {
            "condition": "java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false",
            "parameters": [
                "'a'"
            ],
            "signature": "any_null(java.lang.Object[] a)",
            "tag": "@return true iff some element of a is null (false if a is zero-sized)",
            "tag_type": "returnTag",
            "prompt": "Signature: add(E object, int count)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: isREF()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: isEuropean()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: intersectionCardinalityAtLeast(java.util.BitSet a,java.util.BitSet b,int i)\nJavadoc: @return true iff size(a intersect b) \u2265 i\nCondition: receiverObjectID.intersectionCardinality(a,b)>=i ? methodResultID==true\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference,java.lang.String errorMessageTemplate,java.lang.Object[] errorMessageArgs)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: size(java.lang.Object object)\nJavadoc: @return the size of the specified collection or 0 if the object was null\nCondition: object==null ? methodResultID == 0\n\n###\n\nSignature: getFromSet(java.util.Set set,java.lang.Object key)\nJavadoc: @return the object in this set that is equal to key, or null\nCondition: true?(methodResultID==key||methodResultID==null)\n\n###\n\nSignature: convert(java.lang.Object a)\nJavadoc: @return the converted value; is null if and only if a is null\nCondition: a==null ? methodResultID==null : methodResultID!=null\n\n###\n\nSignature: emptyIfNull(java.util.Collection collection)\nJavadoc: @return an empty collection if the argument is null\nCondition: collection==null ? methodResultID.equals(org.apache.commons.collections4.CollectionUtils.emptyCollection())\n\n###\n\nSignature: nullToEmpty(java.lang.String string)\nJavadoc: @return string itself if it is non-null; \"\" if it is null\nCondition: string!=null ? methodResultID.equals(string) : methodResultID.equals(\"\") \n\n###\n\nSignature: firstNonNull(java.lang.Object first,java.lang.Object second)\nJavadoc: @return first if it is non-null; otherwise second if it is non-null\nCondition: first != null ? methodResultID == first ; first == null && second != null ? methodResultID == second\n\n###\n\nSignature: emptyToNull(java.lang.String string)\nJavadoc: @return string itself if it is nonempty; null if it is empty or null\nCondition: string==null || string.isEmpty() ? methodResultID==null : methodResultID.equals(string)\n\n###\n\nSignature: isNullOrEmpty(java.lang.String string)\nJavadoc: @return true if the string is null or is the empty string\nCondition: string==null || string.isEmpty() ? methodResultID==true\n\n###\n\nSignature: sizeIsEmpty(java.lang.Object object)\nJavadoc: @return true if empty or null\nCondition: object.isEmpty() || object==null ? methodResultID==true\n\n###\n\nSignature: isEmpty(java.util.Collection coll)\nJavadoc: @return true if empty or null\nCondition: coll.isEmpty() || coll==null ? methodResultID==true\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: all_null(java.lang.Object[] a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: java.util.Arrays.asList(a).stream().allMatch(e -> e==null)?methodResultID==true : methodResultID==false\n\n###\n\nSignature: all_null(java.util.List a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: a.stream().allMatch(e -> e==null) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition:"
        },
        {
            "condition": "a<=b ? methodResultID==b : methodResultID==a",
            "parameters": [
                "'a'",
                " 'b'"
            ],
            "signature": "max(long a,long b)",
            "tag": "@return b if a is lesser or equal to b, a otherwise",
            "tag_type": "returnTag",
            "prompt": "Signature: div(int x,int y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: mod_positive(long x,long y)\nJavadoc: @return x % y, where the result is constrained to be positive\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: mod_positive(int x,int y)\nJavadoc: @return x % y, where the result is constrained to be positive\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: rshiftUnsigned(int x,int y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: rshiftUnsigned(long x,long y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: rshiftSigned(long x,long y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: rshiftSigned(int x,int y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: bitwiseOr(int x,int y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseOr(long x,long y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: gte(double d1, double d2)\nJavadoc: @return whether d1 > d2.\nCondition: d1>d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: gt(double d1, double d2)\nJavadoc: @return whether d1 > d2.\nCondition: d1>d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: lte(double d1, double d2)\nJavadoc: @return whether d1 <= d2.\nCondition: d1<=d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: lt(double d1, double d2)\nJavadoc: @return whether d1 < d2.\nCondition: d1<d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: min(int a,int b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(double a,double b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(float a,float b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(long a,long b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: max(float a,float b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(double a,double b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(int a,int b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(long a,long b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition:"
        },
        {
            "condition": "a==null ? methodResultID==null : methodResultID!=null",
            "parameters": [
                "'a'"
            ],
            "signature": "convert(java.lang.Object a)",
            "tag": "@return the converted value; is null if and only if a is null",
            "tag_type": "returnTag",
            "prompt": "Signature: min(int a,int b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: all_null(java.lang.Object[] a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: java.util.Arrays.asList(a).stream().allMatch(e -> e==null)?methodResultID==true : methodResultID==false\n\n###\n\nSignature: all_null(java.util.List a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: a.stream().allMatch(e -> e==null) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: emptyIfNull(java.util.Collection collection)\nJavadoc: @return an empty collection if the argument is null\nCondition: collection==null ? methodResultID.equals(org.apache.commons.collections4.CollectionUtils.emptyCollection())\n\n###\n\nSignature: max(double a,double b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(float a,float b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(long a,long b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(int a,int b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: getParameter(java.lang.String parameter)\nJavadoc: @return The parameter value (empty string if not set).\nCondition: !receiverObjectID.hasParameter(parameter) ? methodResultID.equals(\"\")\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference,java.lang.String errorMessageTemplate,java.lang.Object[] errorMessageArgs)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: emptyToNull(java.lang.String string)\nJavadoc: @return string itself if it is nonempty; null if it is empty or null\nCondition: string==null || string.isEmpty() ? methodResultID==null : methodResultID.equals(string)\n\n###\n\nSignature: load(java.lang.Object key)\nJavadoc: @return the value associated with key; must not be null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: nullToEmpty(java.lang.String string)\nJavadoc: @return string itself if it is non-null; \"\" if it is null\nCondition: string!=null ? methodResultID.equals(string) : methodResultID.equals(\"\") \n\n###\n\nSignature: firstNonNull(java.lang.Object first,java.lang.Object second)\nJavadoc: @return first if it is non-null; otherwise second if it is non-null\nCondition: first != null ? methodResultID == first ; first == null && second != null ? methodResultID == second\n\n###\n\nSignature: doForward(java.lang.Object a)\nJavadoc: @return the converted instance; must not be null\nCondition: true?(methodResultID==null)==false\n\n###\n\nSignature: doBackward(java.lang.Object b)\nJavadoc: @return the converted instance; must not be null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: convert(java.lang.Object a)\nJavadoc: @return the converted value; is null if and only if a is null\nCondition:"
        },
        {
            "condition": "java.util.Arrays.asList(a).stream().allMatch(e -> e==null)?methodResultID==true : methodResultID==false",
            "parameters": [
                "'a'"
            ],
            "signature": "all_null(java.lang.Object[] a)",
            "tag": "@return true iff all elements of a are null (unspecified result if a is zero-sized)",
            "tag_type": "returnTag",
            "prompt": "Signature: isEuropean()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: add(E object)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object, int count)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: empty()\nJavadoc: @return true if the stack is currently empty\nCondition: receiverObjectID.isEmpty() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference,java.lang.String errorMessageTemplate,java.lang.Object[] errorMessageArgs)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: convert(java.lang.Object a)\nJavadoc: @return the converted value; is null if and only if a is null\nCondition: a==null ? methodResultID==null : methodResultID!=null\n\n###\n\nSignature: size(java.lang.Object object)\nJavadoc: @return the size of the specified collection or 0 if the object was null\nCondition: object==null ? methodResultID == 0\n\n###\n\nSignature: getFromSet(java.util.Set set,java.lang.Object key)\nJavadoc: @return the object in this set that is equal to key, or null\nCondition: true?(methodResultID==key||methodResultID==null)\n\n###\n\nSignature: firstNonNull(java.lang.Object first,java.lang.Object second)\nJavadoc: @return first if it is non-null; otherwise second if it is non-null\nCondition: first != null ? methodResultID == first ; first == null && second != null ? methodResultID == second\n\n###\n\nSignature: nullToEmpty(java.lang.String string)\nJavadoc: @return string itself if it is non-null; \"\" if it is null\nCondition: string!=null ? methodResultID.equals(string) : methodResultID.equals(\"\") \n\n###\n\nSignature: emptyToNull(java.lang.String string)\nJavadoc: @return string itself if it is nonempty; null if it is empty or null\nCondition: string==null || string.isEmpty() ? methodResultID==null : methodResultID.equals(string)\n\n###\n\nSignature: emptyIfNull(java.util.Collection collection)\nJavadoc: @return an empty collection if the argument is null\nCondition: collection==null ? methodResultID.equals(org.apache.commons.collections4.CollectionUtils.emptyCollection())\n\n###\n\nSignature: isNullOrEmpty(java.lang.String string)\nJavadoc: @return true if the string is null or is the empty string\nCondition: string==null || string.isEmpty() ? methodResultID==true\n\n###\n\nSignature: sizeIsEmpty(java.lang.Object object)\nJavadoc: @return true if empty or null\nCondition: object.isEmpty() || object==null ? methodResultID==true\n\n###\n\nSignature: isEmpty(java.util.Collection coll)\nJavadoc: @return true if empty or null\nCondition: coll.isEmpty() || coll==null ? methodResultID==true\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: all_null(java.util.List a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: a.stream().allMatch(e -> e==null) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: all_null(java.lang.Object[] a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition:"
        },
        {
            "condition": "receiverObjectID.getDead()?methodResultID==true:methodResultID==false",
            "parameters": [
                ""
            ],
            "signature": "isDead()",
            "tag": "@return True if this Player is dead.",
            "tag_type": "returnTag",
            "prompt": "Signature: hasExplored(net.sf.freecol.common.model.Tile tile)\nJavadoc: @return True if the Tile has been explored.\nCondition: tile.isExplored() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: hasCargo()\nJavadoc: @return True if the unit is carrying any cargo.\nCondition: receiverObjectID.getCargoSpaceTaken() > 0 ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: getEurope()\nJavadoc: @return The Europe object, or null if the player is not European or indpendent.\nCondition: (receiverObjectID.isEuropean())==false?methodResultID==null\n\n###\n\nSignature: isEmpty(java.util.Collection coll)\nJavadoc: @return true if empty or null\nCondition: coll.isEmpty() || coll==null ? methodResultID==true\n\n###\n\nSignature: sizeIsEmpty(java.lang.Object object)\nJavadoc: @return true if empty or null\nCondition: object.isEmpty() || object==null ? methodResultID==true\n\n###\n\nSignature: isEuropean()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: isREF()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: appliesTo(net.sf.freecol.common.model.Turn turn)\nJavadoc: @return True if the turn is null or not outside a valid time limit.\nCondition: turn==null ? methodResultID == true : methodResultID==false\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: canMoveToEurope()\nJavadoc: @return True if this player has an instance of Europe.\nCondition: receiverObjectID.getEurope() != null ? methodResultID==true\n\n###\n\nSignature: removeLRU(org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry entry)\nJavadoc: @return true\nCondition: true ? methodResultID==true\n\n###\n\nSignature: isInDanger(int range,float threat)\nJavadoc: @return True if a threat was found.\nCondition: receiverObjectID.searchForDanger(range, threat)!=null ? methodResultID==true\n\n###\n\nSignature: empty()\nJavadoc: @return true if the stack is currently empty\nCondition: receiverObjectID.isEmpty() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: isIndian()\nJavadoc: @return True.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E element)\nJavadoc: @return Always true.\nCondition: true? methodResultID==true\n\n###\n\nSignature: add(E object, int count)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: getDead()\nJavadoc: @return True if this Player is dead.\nCondition: receiverObjectID.isDead()?methodResultID==true:methodResultID==false\n\n###\n\nSignature: isDead()\nJavadoc: @return True if this Player is dead.\nCondition:"
        },
        {
            "condition": "true ? result.containsAll(a)",
            "parameters": [
                "'a'",
                " 'b'",
                " 'includeDuplicates'"
            ],
            "signature": "collate(java.lang.Iterable a,java.lang.Iterable b,boolean includeDuplicates)",
            "tag": "@return a new sorted List, containing the elements of Collection a and b",
            "tag_type": "returnTag",
            "prompt": "Signature: subAndCheck(long a,long b)\nJavadoc: @return the difference a - b.\nCondition: true ? methodResultID==a-b\n\n###\n\nSignature: getFromSet(java.util.Set set,java.lang.Object key)\nJavadoc: @return the object in this set that is equal to key, or null\nCondition: true?(methodResultID==key||methodResultID==null)\n\n###\n\nSignature: firstNonNull(java.lang.Object first,java.lang.Object second)\nJavadoc: @return first if it is non-null; otherwise second if it is non-null\nCondition: first != null ? methodResultID == first ; first == null && second != null ? methodResultID == second\n\n###\n\nSignature: rshiftSigned(int x,int y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: rshiftSigned(long x,long y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: ne(double d1, double d2)\nJavadoc: @return whether d1 and d2 are non-equal.\nCondition: d1!=d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: bitwiseAnd(int x,int y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: bitwiseAnd(long x,long y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: lt(double d1, double d2)\nJavadoc: @return whether d1 < d2.\nCondition: d1<d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: size(java.lang.Object object)\nJavadoc: @return the size of the specified collection or 0 if the object was null\nCondition: object==null ? methodResultID == 0\n\n###\n\nSignature: lte(double d1, double d2)\nJavadoc: @return whether d1 <= d2.\nCondition: d1<=d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: gte(double d1, double d2)\nJavadoc: @return whether d1 > d2.\nCondition: d1>d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: gt(double d1, double d2)\nJavadoc: @return whether d1 > d2.\nCondition: d1>d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: emptyIfNull(java.util.Collection collection)\nJavadoc: @return an empty collection if the argument is null\nCondition: collection==null ? methodResultID.equals(org.apache.commons.collections4.CollectionUtils.emptyCollection())\n\n###\n\nSignature: rshiftUnsigned(long x,long y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: rshiftUnsigned(int x,int y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: forAllButLastDo(java.util.Iterator iterator,org.apache.commons.collections4.Closure closure)\nJavadoc: @return the last element in the collection, or null if either iterator or closure is null\nCondition: iterator==null || closure==null ? methodResultID==null\n\n###\n\nSignature: forAllButLastDo(java.lang.Iterable collection,org.apache.commons.collections4.Closure closure)\nJavadoc: @return the last element in the collection, or null if either collection or closure is null\nCondition: (collection==null || closure==null) ? methodResultID==null : collection.get(collection.size() - 1)\n\n###\n\nSignature: emptySortedBag()\nJavadoc: @return an empty sorted Bag\nCondition: true ? methodResultID.equals(receiverObjectID.EMPTY_SORTED_BAG)\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b)\nJavadoc: @return a new sorted List, containing the elements of Collection a and b\nCondition: true ? result.containsAll(a) && result.containsAll(b)\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,boolean includeDuplicates)\nJavadoc: @return a new sorted List, containing the elements of Collection a and b\nCondition:"
        },
        {
            "condition": "true ? methodResultID == receiverObjectID.diagonal",
            "parameters": [
                ""
            ],
            "signature": "getDiagonal()",
            "tag": "@return The diagonal.",
            "tag_type": "returnTag",
            "prompt": "Signature: bitwiseOr(int x,int y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseOr(long x,long y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: asRegex(java.lang.String s,int groups)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: asRegex(java.lang.String s)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: rshiftSigned(long x,long y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: rshiftSigned(int x,int y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: side(org.apache.commons.math3.geometry.partitioning.Hyperplane<S> hyperplane)\nJavadoc: @return one of Side#PLUS Side.PLUS, Side#MINUS Side.MINUS, Side#BOTH Side.BOTH or Side#HYPER Side.HYPER (the latter result can occur only if the tree contains only one cut hyperplane).\nCondition: methodResultID.equals(Side.PLUS) || methodResultID.equals(Side.MINUS) || methodResultID.equals(Side.BOTH) || methodResultID.equals(Side.HYPER)\n\n###\n\nSignature: mul(double x,double y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(int x,int y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(long x,long y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: bitwiseXor(long x,long y)\nJavadoc: @return x ^ y\nCondition: true?methodResultID==(x^y)\n\n###\n\nSignature: bitwiseXor(int x,int y)\nJavadoc: @return x ^ y\nCondition: true?methodResultID==(x^y)\n\n###\n\nSignature: getType()\nJavadoc: @return This.\nCondition: true ? methodResultID==receiverObjectID\n\n###\n\nSignature: rshiftUnsigned(long x,long y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: rshiftUnsigned(int x,int y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: div(int x,int y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(double x,double y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(long x,long y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: bitwiseAnd(long x,long y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: bitwiseAnd(int x,int y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: getDiagonal()\nJavadoc: @return The diagonal.\nCondition:"
        },
        {
            "condition": " true ? (methodResultID==0 || methodResultID==1)",
            "parameters": [
                "'x'",
                " 'y'"
            ],
            "signature": "logicalXor(long x,long y)",
            "tag": "@return the logical xor of x and y; the result is always 0 or 1",
            "tag_type": "returnTag",
            "prompt": "Signature: lshift(int x,int y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: addAndCheck(int x,int y)\nJavadoc: @return the sum x+y\nCondition: true ? methodResultID==x+y\n\n###\n\nSignature: bitwiseXor(int x,int y)\nJavadoc: @return x ^ y\nCondition: true?methodResultID==(x^y)\n\n###\n\nSignature: bitwiseXor(long x,long y)\nJavadoc: @return x ^ y\nCondition: true?methodResultID==(x^y)\n\n###\n\nSignature: ne(double d1, double d2)\nJavadoc: @return whether d1 and d2 are non-equal.\nCondition: d1!=d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: mul(double x,double y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(int x,int y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(long x,long y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: rshiftSigned(long x,long y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: rshiftSigned(int x,int y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: mulAndCheck(int x,int y)\nJavadoc: @return the product x * y.\nCondition: true ? methodResultID==x*y\n\n###\n\nSignature: bitwiseOr(long x,long y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseOr(int x,int y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseAnd(long x,long y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: bitwiseAnd(int x,int y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: logicalAnd(long x,long y)\nJavadoc: @return the logical and of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalAnd(int x,int y)\nJavadoc: @return the logical and of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalOr(long x,long y)\nJavadoc: @return the logical or of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalOr(int x,int y)\nJavadoc: @return the logical or of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalXor(int x,int y)\nJavadoc: @return the logical xor of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalXor(long x,long y)\nJavadoc: @return the logical xor of x and y; the result is always 0 or 1\nCondition:"
        },
        {
            "condition": "d1<=d2 ? methodResultID==true:methodResultID==false",
            "parameters": [
                "'d1'",
                " 'd2'"
            ],
            "signature": "lte(double d1, double d2)",
            "tag": "@return whether d1 <= d2.",
            "tag_type": "returnTag",
            "prompt": "Signature: rshiftUnsigned(long x,long y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: intersectionCardinalityAtLeast(java.util.BitSet a,java.util.BitSet b,int i)\nJavadoc: @return true iff size(a intersect b) \u2265 i\nCondition: receiverObjectID.intersectionCardinality(a,b)>=i ? methodResultID==true\n\n###\n\nSignature: logicalAnd(long x,long y)\nJavadoc: @return the logical and of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalAnd(int x,int y)\nJavadoc: @return the logical and of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalOr(int x,int y)\nJavadoc: @return the logical or of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalOr(long x,long y)\nJavadoc: @return the logical or of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: subAndCheck(int x,int y)\nJavadoc: @return the difference x - y.\nCondition: true ? methodResultID==x-y\n\n###\n\nSignature: subAndCheck(long a,long b)\nJavadoc: @return the difference a - b.\nCondition: true ? methodResultID==a-b\n\n###\n\nSignature: min(double a,double b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(int a,int b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(long a,long b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(float a,float b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: max(long a,long b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(float a,float b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(double a,double b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(int a,int b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: ne(double d1, double d2)\nJavadoc: @return whether d1 and d2 are non-equal.\nCondition: d1!=d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: gte(double d1, double d2)\nJavadoc: @return whether d1 > d2.\nCondition: d1>d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: gt(double d1, double d2)\nJavadoc: @return whether d1 > d2.\nCondition: d1>d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: lt(double d1, double d2)\nJavadoc: @return whether d1 < d2.\nCondition: d1<d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: lte(double d1, double d2)\nJavadoc: @return whether d1 <= d2.\nCondition:"
        },
        {
            "condition": "(receiverObjectID.isEuropean())==false?methodResultID==null",
            "parameters": [
                ""
            ],
            "signature": "getEurope()",
            "tag": "@return The Europe object, or null if the player is not European or indpendent.",
            "tag_type": "returnTag",
            "prompt": "Signature: div(int x,int y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: asRegex(java.lang.String s)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: asRegex(java.lang.String s,int groups)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: emptyToNull(java.lang.String string)\nJavadoc: @return string itself if it is nonempty; null if it is empty or null\nCondition: string==null || string.isEmpty() ? methodResultID==null : methodResultID.equals(string)\n\n###\n\nSignature: emptyIfNull(java.util.Collection collection)\nJavadoc: @return an empty collection if the argument is null\nCondition: collection==null ? methodResultID.equals(org.apache.commons.collections4.CollectionUtils.emptyCollection())\n\n###\n\nSignature: load(java.lang.Object key)\nJavadoc: @return the value associated with key; must not be null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: get(java.lang.Object key)\nJavadoc: @return the value to which this map maps the specified key, or null if the map contains no mapping for this key.\nCondition: receiverObjectID.containsKey(key)==false ? methodResultID==null\n\n###\n\nSignature: nullToEmpty(java.lang.String string)\nJavadoc: @return string itself if it is non-null; \"\" if it is null\nCondition: string!=null ? methodResultID.equals(string) : methodResultID.equals(\"\") \n\n###\n\nSignature: doBackward(java.lang.Object b)\nJavadoc: @return the converted instance; must not be null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: doForward(java.lang.Object a)\nJavadoc: @return the converted instance; must not be null\nCondition: true?(methodResultID==null)==false\n\n###\n\nSignature: hasTile()\nJavadoc: @return True if this unit is on a tile.\nCondition: receiverObjectID.getTile()!=null ? methodResultID==true\n\n###\n\nSignature: getDead()\nJavadoc: @return True if this Player is dead.\nCondition: receiverObjectID.isDead()?methodResultID==true:methodResultID==false\n\n###\n\nSignature: isDead()\nJavadoc: @return True if this Player is dead.\nCondition: receiverObjectID.getDead()?methodResultID==true:methodResultID==false\n\n###\n\nSignature: getCarrier()\nJavadoc: @return The carrier this unit is aboard, or null if none.\nCondition: !receiverObjectID.isOnCarrier() ? methodResultID==null\n\n###\n\nSignature: firstNonNull(java.lang.Object first,java.lang.Object second)\nJavadoc: @return first if it is non-null; otherwise second if it is non-null\nCondition: first != null ? methodResultID == first ; first == null && second != null ? methodResultID == second\n\n###\n\nSignature: getFromSet(java.util.Set set,java.lang.Object key)\nJavadoc: @return the object in this set that is equal to key, or null\nCondition: true?(methodResultID==key||methodResultID==null)\n\n###\n\nSignature: getEuropeNameKey()\nJavadoc: @return A name key, or null if Europe is null.\nCondition: receiverObjectID.getEurope()==null ? methodResultID==null\n\n###\n\nSignature: canMoveToEurope()\nJavadoc: @return True if this player has an instance of Europe.\nCondition: receiverObjectID.getEurope() != null ? methodResultID==true\n\n###\n\nSignature: getEurope()\nJavadoc: @return The Europe object, or null if the player is not European or indpendent.\nCondition:"
        },
        {
            "condition": "true?methodResultID==x*y",
            "parameters": [
                "'x'",
                " 'y'"
            ],
            "signature": "mul(double x,double y)",
            "tag": "@return x * y",
            "tag_type": "returnTag",
            "prompt": "Signature: rshiftUnsigned(long x,long y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: rshiftUnsigned(int x,int y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: addAndCheck(int x,int y)\nJavadoc: @return the sum x+y\nCondition: true ? methodResultID==x+y\n\n###\n\nSignature: bitwiseOr(long x,long y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseOr(int x,int y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: mod(int x,int y)\nJavadoc: @return x % y\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: mod(long x,long y)\nJavadoc: @return x % y\nCondition: true?methodResultID==x%y\n\n###\n\nSignature: lshift(int x,int y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: lshift(long x,long y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: div(int x,int y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(double x,double y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(long x,long y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: bitwiseXor(int x,int y)\nJavadoc: @return x ^ y\nCondition: true?methodResultID==(x^y)\n\n###\n\nSignature: bitwiseXor(long x,long y)\nJavadoc: @return x ^ y\nCondition: true?methodResultID==(x^y)\n\n###\n\nSignature: mulAndCheck(long a,long b)\nJavadoc: @return the product a * b.\nCondition: true ? methodResultID==a*b\n\n###\n\nSignature: bitwiseAnd(int x,int y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: bitwiseAnd(long x,long y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: mulAndCheck(int x,int y)\nJavadoc: @return the product x * y.\nCondition: true ? methodResultID==x*y\n\n###\n\nSignature: mul(int x,int y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(long x,long y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(double x,double y)\nJavadoc: @return x * y\nCondition:"
        },
        {
            "condition": "collection==null ? methodResultID.equals(org.apache.commons.collections4.CollectionUtils.emptyCollection())",
            "parameters": [
                "'collection'"
            ],
            "signature": "emptyIfNull(java.util.Collection collection)",
            "tag": "@return an empty collection if the argument is null",
            "tag_type": "returnTag",
            "prompt": "Signature: doBackward(java.lang.Object b)\nJavadoc: @return the converted instance; must not be null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: doForward(java.lang.Object a)\nJavadoc: @return the converted instance; must not be null\nCondition: true?(methodResultID==null)==false\n\n###\n\nSignature: forAllButLastDo(java.lang.Iterable collection,org.apache.commons.collections4.Closure closure)\nJavadoc: @return the last element in the collection, or null if either collection or closure is null\nCondition: (collection==null || closure==null) ? methodResultID==null : collection.get(collection.size() - 1)\n\n###\n\nSignature: emptySortedBag()\nJavadoc: @return an empty sorted Bag\nCondition: true ? methodResultID.equals(receiverObjectID.EMPTY_SORTED_BAG)\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: emptyCollection()\nJavadoc: @return immutable empty collection\nCondition: true?methodResultID.equals(receiverObjectID.EMPTY_COLLECTION)\n\n###\n\nSignature: all_null(java.lang.Object[] a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: java.util.Arrays.asList(a).stream().allMatch(e -> e==null)?methodResultID==true : methodResultID==false\n\n###\n\nSignature: all_null(java.util.List a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: a.stream().allMatch(e -> e==null) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: getFromSet(java.util.Set set,java.lang.Object key)\nJavadoc: @return the object in this set that is equal to key, or null\nCondition: true?(methodResultID==key||methodResultID==null)\n\n###\n\nSignature: emptyBag()\nJavadoc: @return an empty Bag\nCondition: true ? methodResultID.equals(receiverObjectID.EMPTY_BAG)\n\n###\n\nSignature: isEmpty(java.util.Collection coll)\nJavadoc: @return true if empty or null\nCondition: coll.isEmpty() || coll==null ? methodResultID==true\n\n###\n\nSignature: sizeIsEmpty(java.lang.Object object)\nJavadoc: @return true if empty or null\nCondition: object.isEmpty() || object==null ? methodResultID==true\n\n###\n\nSignature: firstNonNull(java.lang.Object first,java.lang.Object second)\nJavadoc: @return first if it is non-null; otherwise second if it is non-null\nCondition: first != null ? methodResultID == first ; first == null && second != null ? methodResultID == second\n\n###\n\nSignature: nullToEmpty(java.lang.String string)\nJavadoc: @return string itself if it is non-null; \"\" if it is null\nCondition: string!=null ? methodResultID.equals(string) : methodResultID.equals(\"\") \n\n###\n\nSignature: size(java.lang.Object object)\nJavadoc: @return the size of the specified collection or 0 if the object was null\nCondition: object==null ? methodResultID == 0\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference,java.lang.String errorMessageTemplate,java.lang.Object[] errorMessageArgs)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: emptyToNull(java.lang.String string)\nJavadoc: @return string itself if it is nonempty; null if it is empty or null\nCondition: string==null || string.isEmpty() ? methodResultID==null : methodResultID.equals(string)\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: emptyIfNull(java.util.Collection collection)\nJavadoc: @return an empty collection if the argument is null\nCondition:"
        },
        {
            "condition": "receiverObjectID.getSpaceLeft() > 0 ? methodResultID == true : methodResultID == false",
            "parameters": [
                ""
            ],
            "signature": "hasSpaceLeft()",
            "tag": "@return True if there is free space.",
            "tag_type": "returnTag",
            "prompt": "Signature: addEdge(java.lang.Object sourceVertex,java.lang.Object targetVertex,java.lang.Object e)\nJavadoc: @return true if this graph did not already contain the specified edge.\nCondition: (receiverObjectID.containsEdge(sourceVertex,targetVertex))==false?methodResultID==true:methodResultID==false\n\n###\n\nSignature: removeLRU(org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry entry)\nJavadoc: @return true\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E element)\nJavadoc: @return Always true.\nCondition: true? methodResultID==true\n\n###\n\nSignature: all_null(java.util.List a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: a.stream().allMatch(e -> e==null) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: all_null(java.lang.Object[] a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: java.util.Arrays.asList(a).stream().allMatch(e -> e==null)?methodResultID==true : methodResultID==false\n\n###\n\nSignature: isNullOrEmpty(java.lang.String string)\nJavadoc: @return true if the string is null or is the empty string\nCondition: string==null || string.isEmpty() ? methodResultID==true\n\n###\n\nSignature: addVertex(java.lang.Object v)\nJavadoc: @return true if this graph did not already contain the specified vertex.\nCondition: (receiverObjectID.containsVertex(v))==false ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: hasCargo()\nJavadoc: @return True if the unit is carrying any cargo.\nCondition: receiverObjectID.getCargoSpaceTaken() > 0 ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: intersectionCardinalityAtLeast(java.util.BitSet a,java.util.BitSet b,java.util.BitSet c,int i)\nJavadoc: @return true iff size(a intersect b intersect c) \u2265 i\nCondition: receiverObjectID.intersectionCardinality(a,b,c)>=i ? methodResultID==true\n\n###\n\nSignature: intersectionCardinalityAtLeast(java.util.BitSet a,java.util.BitSet b,int i)\nJavadoc: @return true iff size(a intersect b) \u2265 i\nCondition: receiverObjectID.intersectionCardinality(a,b)>=i ? methodResultID==true\n\n###\n\nSignature: isIndian()\nJavadoc: @return True.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: size(java.lang.Object object)\nJavadoc: @return the size of the specified collection or 0 if the object was null\nCondition: object==null ? methodResultID == 0\n\n###\n\nSignature: add(E object, int count)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: isEmpty(java.util.Collection coll)\nJavadoc: @return true if empty or null\nCondition: coll.isEmpty() || coll==null ? methodResultID==true\n\n###\n\nSignature: sizeIsEmpty(java.lang.Object object)\nJavadoc: @return true if empty or null\nCondition: object.isEmpty() || object==null ? methodResultID==true\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: empty()\nJavadoc: @return true if the stack is currently empty\nCondition: receiverObjectID.isEmpty() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: hasSpaceLeft()\nJavadoc: @return True if there is free space.\nCondition:"
        },
        {
            "condition": "true ? methodResultID.contains(singleton)==true",
            "parameters": [
                "'singleton'"
            ],
            "signature": "of(java.lang.Object singleton)",
            "tag": "@return a new FluentIterable containing the singleton",
            "tag_type": "returnTag",
            "prompt": "Signature: rshiftUnsigned(long x,long y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: rshiftUnsigned(int x,int y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: getDiagonal()\nJavadoc: @return The diagonal.\nCondition: true ? methodResultID == receiverObjectID.diagonal\n\n###\n\nSignature: asRegex(java.lang.String s)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: asRegex(java.lang.String s,int groups)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: forAllButLastDo(java.lang.Iterable collection,org.apache.commons.collections4.Closure closure)\nJavadoc: @return the last element in the collection, or null if either collection or closure is null\nCondition: (collection==null || closure==null) ? methodResultID==null : collection.get(collection.size() - 1)\n\n###\n\nSignature: get(java.lang.Object key)\nJavadoc: @return the value to which this map maps the specified key, or null if the map contains no mapping for this key.\nCondition: receiverObjectID.containsKey(key)==false ? methodResultID==null\n\n###\n\nSignature: emptySortedBag()\nJavadoc: @return an empty sorted Bag\nCondition: true ? methodResultID.equals(receiverObjectID.EMPTY_SORTED_BAG)\n\n###\n\nSignature: emptyCollection()\nJavadoc: @return immutable empty collection\nCondition: true?methodResultID.equals(receiverObjectID.EMPTY_COLLECTION)\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference,java.lang.String errorMessageTemplate,java.lang.Object[] errorMessageArgs)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: getGlobalEnvironment()\nJavadoc: @return A singleton instance of the global environment.\nCondition: true ? methodResultID==receiverObjectID.GLOBAL_ENV\n\n###\n\nSignature: forAllButLastDo(java.util.Iterator iterator,org.apache.commons.collections4.Closure closure)\nJavadoc: @return the last element in the collection, or null if either iterator or closure is null\nCondition: iterator==null || closure==null ? methodResultID==null\n\n###\n\nSignature: getFromSet(java.util.Set set,java.lang.Object key)\nJavadoc: @return the object in this set that is equal to key, or null\nCondition: true?(methodResultID==key||methodResultID==null)\n\n###\n\nSignature: getType()\nJavadoc: @return This.\nCondition: true ? methodResultID==receiverObjectID\n\n###\n\nSignature: emptyBag()\nJavadoc: @return an empty Bag\nCondition: true ? methodResultID.equals(receiverObjectID.EMPTY_BAG)\n\n###\n\nSignature: emptyIfNull(java.util.Collection collection)\nJavadoc: @return an empty collection if the argument is null\nCondition: collection==null ? methodResultID.equals(org.apache.commons.collections4.CollectionUtils.emptyCollection())\n\n###\n\nSignature: doBackward(java.lang.Object b)\nJavadoc: @return the converted instance; must not be null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: doForward(java.lang.Object a)\nJavadoc: @return the converted instance; must not be null\nCondition: true?(methodResultID==null)==false\n\n###\n\nSignature: empty()\nJavadoc: @return a new empty FluentIterable\nCondition: true ? methodResultID.isEmpty()==true\n\n###\n\nSignature: of(java.lang.Object singleton)\nJavadoc: @return a new FluentIterable containing the singleton\nCondition:"
        },
        {
            "condition": "true?methodResultID.equals(closure)",
            "parameters": [
                "'iterator'",
                " 'closure'"
            ],
            "signature": "forAllDo(java.util.Iterator iterator,org.apache.commons.collections4.Closure closure)",
            "tag": "@return closure",
            "tag_type": "returnTag",
            "prompt": "Signature: forAllButLastDo(java.lang.Iterable collection,org.apache.commons.collections4.Closure closure)\nJavadoc: @return the last element in the collection, or null if either collection or closure is null\nCondition: (collection==null || closure==null) ? methodResultID==null : collection.get(collection.size() - 1)\n\n###\n\nSignature: add(E object)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object, int count)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: getType()\nJavadoc: @return This.\nCondition: true ? methodResultID==receiverObjectID\n\n###\n\nSignature: isREF()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: isEuropean()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: emptyBag()\nJavadoc: @return an empty Bag\nCondition: true ? methodResultID.equals(receiverObjectID.EMPTY_BAG)\n\n###\n\nSignature: getUnknownObjectBehavior()\nJavadoc: @return FixedOrderComparator.UnknownObjectBehavior\nCondition: true ? methodResultID.equals(org.apache.commons.collections4.comparators.FixedOrderComparator.UnknownObjectBehavior)\n\n###\n\nSignature: rshiftSigned(int x,int y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: rshiftSigned(long x,long y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: emptyQueue()\nJavadoc: @return an empty Queue\nCondition: true?methodResultID.equals(receiverObjectID.EMPTY_QUEUE)\n\n###\n\nSignature: lshift(int x,int y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: lshift(long x,long y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: add(E element)\nJavadoc: @return Always true.\nCondition: true? methodResultID==true\n\n###\n\nSignature: emptyCollection()\nJavadoc: @return immutable empty collection\nCondition: true?methodResultID.equals(receiverObjectID.EMPTY_COLLECTION)\n\n###\n\nSignature: asRegex(java.lang.String s)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: asRegex(java.lang.String s,int groups)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: isIndian()\nJavadoc: @return True.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: removeLRU(org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry entry)\nJavadoc: @return true\nCondition: true ? methodResultID==true\n\n###\n\nSignature: forAllDo(java.lang.Iterable collection,org.apache.commons.collections4.Closure closure)\nJavadoc: @return closure\nCondition: true?methodResultID.equals(closure)\n\n###\n\nSignature: forAllDo(java.util.Iterator iterator,org.apache.commons.collections4.Closure closure)\nJavadoc: @return closure\nCondition:"
        },
        {
            "condition": "receiverObjectID.isDead()?methodResultID==true:methodResultID==false",
            "parameters": [
                ""
            ],
            "signature": "getDead()",
            "tag": "@return True if this Player is dead.",
            "tag_type": "returnTag",
            "prompt": "Signature: hasExplored(net.sf.freecol.common.model.Tile tile)\nJavadoc: @return True if the Tile has been explored.\nCondition: tile.isExplored() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: hasCargo()\nJavadoc: @return True if the unit is carrying any cargo.\nCondition: receiverObjectID.getCargoSpaceTaken() > 0 ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: getEurope()\nJavadoc: @return The Europe object, or null if the player is not European or indpendent.\nCondition: (receiverObjectID.isEuropean())==false?methodResultID==null\n\n###\n\nSignature: isEmpty(java.util.Collection coll)\nJavadoc: @return true if empty or null\nCondition: coll.isEmpty() || coll==null ? methodResultID==true\n\n###\n\nSignature: sizeIsEmpty(java.lang.Object object)\nJavadoc: @return true if empty or null\nCondition: object.isEmpty() || object==null ? methodResultID==true\n\n###\n\nSignature: isEuropean()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: isREF()\nJavadoc: @return False.\nCondition: true ? methodResultID==false\n\n###\n\nSignature: appliesTo(net.sf.freecol.common.model.Turn turn)\nJavadoc: @return True if the turn is null or not outside a valid time limit.\nCondition: turn==null ? methodResultID == true : methodResultID==false\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: canMoveToEurope()\nJavadoc: @return True if this player has an instance of Europe.\nCondition: receiverObjectID.getEurope() != null ? methodResultID==true\n\n###\n\nSignature: removeLRU(org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry entry)\nJavadoc: @return true\nCondition: true ? methodResultID==true\n\n###\n\nSignature: isInDanger(int range,float threat)\nJavadoc: @return True if a threat was found.\nCondition: receiverObjectID.searchForDanger(range, threat)!=null ? methodResultID==true\n\n###\n\nSignature: empty()\nJavadoc: @return true if the stack is currently empty\nCondition: receiverObjectID.isEmpty() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: isIndian()\nJavadoc: @return True.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E element)\nJavadoc: @return Always true.\nCondition: true? methodResultID==true\n\n###\n\nSignature: add(E object, int count)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: isDead()\nJavadoc: @return True if this Player is dead.\nCondition: receiverObjectID.getDead()?methodResultID==true:methodResultID==false\n\n###\n\nSignature: getDead()\nJavadoc: @return True if this Player is dead.\nCondition:"
        },
        {
            "condition": "true?methodResultID==x>>>y",
            "parameters": [
                "'x'",
                " 'y'"
            ],
            "signature": "rshiftUnsigned(long x,long y)",
            "tag": "@return x >>> y",
            "tag_type": "returnTag",
            "prompt": "Signature: min(double a,double b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(int a,int b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(float a,float b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(long a,long b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: max(float a,float b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(long a,long b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(double a,double b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(int a,int b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: mul(double x,double y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(long x,long y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(int x,int y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: bitwiseAnd(int x,int y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: bitwiseAnd(long x,long y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: bitwiseOr(int x,int y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseOr(long x,long y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: lshift(int x,int y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: lshift(long x,long y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: rshiftSigned(int x,int y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: rshiftSigned(long x,long y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: rshiftUnsigned(int x,int y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: rshiftUnsigned(long x,long y)\nJavadoc: @return x >>> y\nCondition:"
        },
        {
            "condition": "true ? result.containsAll(a) && result.containsAll(b)",
            "parameters": [
                "'a'",
                " 'b'"
            ],
            "signature": "collate(java.lang.Iterable a,java.lang.Iterable b)",
            "tag": "@return a new sorted List, containing the elements of Collection a and b",
            "tag_type": "returnTag",
            "prompt": "Signature: subAndCheck(long a,long b)\nJavadoc: @return the difference a - b.\nCondition: true ? methodResultID==a-b\n\n###\n\nSignature: getFromSet(java.util.Set set,java.lang.Object key)\nJavadoc: @return the object in this set that is equal to key, or null\nCondition: true?(methodResultID==key||methodResultID==null)\n\n###\n\nSignature: firstNonNull(java.lang.Object first,java.lang.Object second)\nJavadoc: @return first if it is non-null; otherwise second if it is non-null\nCondition: first != null ? methodResultID == first ; first == null && second != null ? methodResultID == second\n\n###\n\nSignature: rshiftSigned(int x,int y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: rshiftSigned(long x,long y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: ne(double d1, double d2)\nJavadoc: @return whether d1 and d2 are non-equal.\nCondition: d1!=d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: bitwiseAnd(int x,int y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: bitwiseAnd(long x,long y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: lt(double d1, double d2)\nJavadoc: @return whether d1 < d2.\nCondition: d1<d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: size(java.lang.Object object)\nJavadoc: @return the size of the specified collection or 0 if the object was null\nCondition: object==null ? methodResultID == 0\n\n###\n\nSignature: lte(double d1, double d2)\nJavadoc: @return whether d1 <= d2.\nCondition: d1<=d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: gte(double d1, double d2)\nJavadoc: @return whether d1 > d2.\nCondition: d1>d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: gt(double d1, double d2)\nJavadoc: @return whether d1 > d2.\nCondition: d1>d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: emptyIfNull(java.util.Collection collection)\nJavadoc: @return an empty collection if the argument is null\nCondition: collection==null ? methodResultID.equals(org.apache.commons.collections4.CollectionUtils.emptyCollection())\n\n###\n\nSignature: rshiftUnsigned(long x,long y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: rshiftUnsigned(int x,int y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: forAllButLastDo(java.util.Iterator iterator,org.apache.commons.collections4.Closure closure)\nJavadoc: @return the last element in the collection, or null if either iterator or closure is null\nCondition: iterator==null || closure==null ? methodResultID==null\n\n###\n\nSignature: forAllButLastDo(java.lang.Iterable collection,org.apache.commons.collections4.Closure closure)\nJavadoc: @return the last element in the collection, or null if either collection or closure is null\nCondition: (collection==null || closure==null) ? methodResultID==null : collection.get(collection.size() - 1)\n\n###\n\nSignature: emptySortedBag()\nJavadoc: @return an empty sorted Bag\nCondition: true ? methodResultID.equals(receiverObjectID.EMPTY_SORTED_BAG)\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,boolean includeDuplicates)\nJavadoc: @return a new sorted List, containing the elements of Collection a and b\nCondition: true ? result.containsAll(a)\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b)\nJavadoc: @return a new sorted List, containing the elements of Collection a and b\nCondition:"
        },
        {
            "condition": "(targetGraph.containsEdge(edge))==false?methodResultID==true:methodResultID==false",
            "parameters": [
                "'targetGraph'",
                " 'sourceGraph'",
                " 'edge'"
            ],
            "signature": "addEdgeWithVertices(org.jgrapht.Graph targetGraph,org.jgrapht.Graph sourceGraph,java.lang.Object edge)",
            "tag": "@return true if the target graph did not already contain the specified edge.",
            "tag_type": "returnTag",
            "prompt": "Signature: all_null(java.lang.Object[] a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: java.util.Arrays.asList(a).stream().allMatch(e -> e==null)?methodResultID==true : methodResultID==false\n\n###\n\nSignature: all_null(java.util.List a)\nJavadoc: @return true iff all elements of a are null (unspecified result if a is zero-sized)\nCondition: a.stream().allMatch(e -> e==null) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: isInDanger(int range,float threat)\nJavadoc: @return True if a threat was found.\nCondition: receiverObjectID.searchForDanger(range, threat)!=null ? methodResultID==true\n\n###\n\nSignature: empty()\nJavadoc: @return true if the stack is currently empty\nCondition: receiverObjectID.isEmpty() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: intersectionCardinalityAtLeast(java.util.BitSet a,java.util.BitSet b,int i)\nJavadoc: @return true iff size(a intersect b) \u2265 i\nCondition: receiverObjectID.intersectionCardinality(a,b)>=i ? methodResultID==true\n\n###\n\nSignature: isEmpty(java.util.Collection coll)\nJavadoc: @return true if empty or null\nCondition: coll.isEmpty() || coll==null ? methodResultID==true\n\n###\n\nSignature: sizeIsEmpty(java.lang.Object object)\nJavadoc: @return true if empty or null\nCondition: object.isEmpty() || object==null ? methodResultID==true\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: isNotEmpty(java.util.Collection coll)\nJavadoc: @return true if non-null and non-empty\nCondition: (coll==null)==false && (coll.isEmpty())==false ? true\n\n###\n\nSignature: add(E object, int count)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: intersectionCardinalityAtLeast(java.util.BitSet a,java.util.BitSet b,java.util.BitSet c,int i)\nJavadoc: @return true iff size(a intersect b intersect c) \u2265 i\nCondition: receiverObjectID.intersectionCardinality(a,b,c)>=i ? methodResultID==true\n\n###\n\nSignature: hasSpaceLeft()\nJavadoc: @return True if there is free space.\nCondition: receiverObjectID.getSpaceLeft() > 0 ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: contains(org.graphstream.graph.Node node)\nJavadoc: @return true if the path contains the node.\nCondition: receiverObjectID.getNodePath().contains(node) ? methodResultID==true\n\n###\n\nSignature: contains(org.graphstream.graph.Edge edge)\nJavadoc: @return true if the path contains the edge.\nCondition: receiverObjectID.getEdgePath().contains(edge) ? methodResultID==true\n\n###\n\nSignature: removeVertex(java.lang.Object v)\nJavadoc: @return true if the graph contained the specified vertex; false otherwise.\nCondition: receiverObjectID.containsVertex(v) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: removeEdge(java.lang.Object e)\nJavadoc: @return true if and only if the graph contained the specified edge.\nCondition: receiverObjectID.containsEdge(e) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: addVertex(java.lang.Object v)\nJavadoc: @return true if this graph did not already contain the specified vertex.\nCondition: (receiverObjectID.containsVertex(v))==false ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: addEdge(java.lang.Object sourceVertex,java.lang.Object targetVertex,java.lang.Object e)\nJavadoc: @return true if this graph did not already contain the specified edge.\nCondition: (receiverObjectID.containsEdge(sourceVertex,targetVertex))==false?methodResultID==true:methodResultID==false\n\n###\n\nSignature: addEdgeWithVertices(org.jgrapht.Graph targetGraph,org.jgrapht.Graph sourceGraph,java.lang.Object edge)\nJavadoc: @return true if the target graph did not already contain the specified edge.\nCondition:"
        },
        {
            "condition": "true?methodResultID==x>>y",
            "parameters": [
                "'x'",
                " 'y'"
            ],
            "signature": "rshiftSigned(long x,long y)",
            "tag": "@return x >> y",
            "tag_type": "returnTag",
            "prompt": "Signature: mul(long x,long y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(int x,int y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(double x,double y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: min(double a,double b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(float a,float b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(long a,long b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(int a,int b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: bitwiseAnd(long x,long y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: bitwiseAnd(int x,int y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: max(long a,long b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(float a,float b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(double a,double b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(int a,int b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: bitwiseOr(int x,int y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseOr(long x,long y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: lshift(int x,int y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: lshift(long x,long y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: rshiftUnsigned(long x,long y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: rshiftUnsigned(int x,int y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: rshiftSigned(int x,int y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: rshiftSigned(long x,long y)\nJavadoc: @return x >> y\nCondition:"
        },
        {
            "condition": "receiverObjectID.getNodePath().contains(node) ? methodResultID==true",
            "parameters": [
                "'node'"
            ],
            "signature": "contains(org.graphstream.graph.Node node)",
            "tag": "@return true if the path contains the node.",
            "tag_type": "returnTag",
            "prompt": "Signature: canMoveToEurope()\nJavadoc: @return True if this player has an instance of Europe.\nCondition: receiverObjectID.getEurope() != null ? methodResultID==true\n\n###\n\nSignature: add(E element)\nJavadoc: @return Always true.\nCondition: true? methodResultID==true\n\n###\n\nSignature: isPrime(int n)\nJavadoc: @return true if n is prime. (All numbers < 2 return false).\nCondition: n<2 ? methodResultID==false\n\n###\n\nSignature: findSimpleCycles()\nJavadoc: @return The list of all simple cycles. Possibly empty but never null.\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: any_null(java.util.List a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.asList(array).stream().anyMatch(e -> e==null) ? methodResultID==true: methodResultID==false\n\n###\n\nSignature: any_null(java.lang.Object[] a)\nJavadoc: @return true iff some element of a is null (false if a is zero-sized)\nCondition: java.util.Arrays.contains(null) ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: intersectionCardinalityAtLeast(java.util.BitSet a,java.util.BitSet b,java.util.BitSet c,int i)\nJavadoc: @return true iff size(a intersect b intersect c) \u2265 i\nCondition: receiverObjectID.intersectionCardinality(a,b,c)>=i ? methodResultID==true\n\n###\n\nSignature: hasSpaceLeft()\nJavadoc: @return True if there is free space.\nCondition: receiverObjectID.getSpaceLeft() > 0 ? methodResultID == true : methodResultID == false\n\n###\n\nSignature: intersectionCardinalityAtLeast(java.util.BitSet a,java.util.BitSet b,int i)\nJavadoc: @return true iff size(a intersect b) \u2265 i\nCondition: receiverObjectID.intersectionCardinality(a,b)>=i ? methodResultID==true\n\n###\n\nSignature: hasExplored(net.sf.freecol.common.model.Tile tile)\nJavadoc: @return True if the Tile has been explored.\nCondition: tile.isExplored() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: isInDanger(int range,float threat)\nJavadoc: @return True if a threat was found.\nCondition: receiverObjectID.searchForDanger(range, threat)!=null ? methodResultID==true\n\n###\n\nSignature: hasTile()\nJavadoc: @return True if this unit is on a tile.\nCondition: receiverObjectID.getTile()!=null ? methodResultID==true\n\n###\n\nSignature: add(E object)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: add(E object, int count)\nJavadoc: @return true, always.\nCondition: true ? methodResultID==true\n\n###\n\nSignature: addEdgeWithVertices(org.jgrapht.Graph targetGraph,org.jgrapht.Graph sourceGraph,java.lang.Object edge)\nJavadoc: @return true if the target graph did not already contain the specified edge.\nCondition: (targetGraph.containsEdge(edge))==false?methodResultID==true:methodResultID==false\n\n###\n\nSignature: addEdge(java.lang.Object sourceVertex,java.lang.Object targetVertex,java.lang.Object e)\nJavadoc: @return true if this graph did not already contain the specified edge.\nCondition: (receiverObjectID.containsEdge(sourceVertex,targetVertex))==false?methodResultID==true:methodResultID==false\n\n###\n\nSignature: addVertex(java.lang.Object v)\nJavadoc: @return true if this graph did not already contain the specified vertex.\nCondition: (receiverObjectID.containsVertex(v))==false ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: removeEdge(java.lang.Object e)\nJavadoc: @return true if and only if the graph contained the specified edge.\nCondition: receiverObjectID.containsEdge(e) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: removeVertex(java.lang.Object v)\nJavadoc: @return true if the graph contained the specified vertex; false otherwise.\nCondition: receiverObjectID.containsVertex(v) ? methodResultID==true : methodResultID==false\n\n###\n\nSignature: contains(org.graphstream.graph.Edge edge)\nJavadoc: @return true if the path contains the edge.\nCondition: receiverObjectID.getEdgePath().contains(edge) ? methodResultID==true\n\n###\n\nSignature: contains(org.graphstream.graph.Node node)\nJavadoc: @return true if the path contains the node.\nCondition:"
        },
        {
            "condition": "true ? methodResultID==receiverObjectID",
            "parameters": [
                ""
            ],
            "signature": "getType()",
            "tag": "@return This.",
            "tag_type": "returnTag",
            "prompt": "Signature: getDiagonal()\nJavadoc: @return The diagonal.\nCondition: true ? methodResultID == receiverObjectID.diagonal\n\n###\n\nSignature: bitwiseXor(int x,int y)\nJavadoc: @return x ^ y\nCondition: true?methodResultID==(x^y)\n\n###\n\nSignature: bitwiseXor(long x,long y)\nJavadoc: @return x ^ y\nCondition: true?methodResultID==(x^y)\n\n###\n\nSignature: firstNonNull(java.lang.Object first,java.lang.Object second)\nJavadoc: @return first if it is non-null; otherwise second if it is non-null\nCondition: first != null ? methodResultID == first ; first == null && second != null ? methodResultID == second\n\n###\n\nSignature: bitwiseAnd(int x,int y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: bitwiseAnd(long x,long y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: emptyBag()\nJavadoc: @return an empty Bag\nCondition: true ? methodResultID.equals(receiverObjectID.EMPTY_BAG)\n\n###\n\nSignature: getFromSet(java.util.Set set,java.lang.Object key)\nJavadoc: @return the object in this set that is equal to key, or null\nCondition: true?(methodResultID==key||methodResultID==null)\n\n###\n\nSignature: rshiftSigned(int x,int y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: rshiftSigned(long x,long y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: nullToEmpty(java.lang.String string)\nJavadoc: @return string itself if it is non-null; \"\" if it is null\nCondition: string!=null ? methodResultID.equals(string) : methodResultID.equals(\"\") \n\n###\n\nSignature: verifyNotNull(java.lang.Object reference)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference,java.lang.String errorMessageTemplate,java.lang.Object[] errorMessageArgs)\nJavadoc: @return reference, guaranteed to be non-null, for convenience\nCondition: true ? methodResultID!=null\n\n###\n\nSignature: doBackward(java.lang.Object b)\nJavadoc: @return the converted instance; must not be null\nCondition: true ? (methodResultID==null)==false\n\n###\n\nSignature: doForward(java.lang.Object a)\nJavadoc: @return the converted instance; must not be null\nCondition: true?(methodResultID==null)==false\n\n###\n\nSignature: rshiftUnsigned(int x,int y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: rshiftUnsigned(long x,long y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: asRegex(java.lang.String s,int groups)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: asRegex(java.lang.String s)\nJavadoc: @return its argument\nCondition: true?methodResultID.equals(s)\n\n###\n\nSignature: copy()\nJavadoc: @return a copy of this.\nCondition: methodResultID.equals(receiverObjectID)\n\n###\n\nSignature: getType()\nJavadoc: @return This.\nCondition:"
        },
        {
            "condition": " true ? (methodResultID==0 || methodResultID==1)",
            "parameters": [
                "'x'",
                " 'y'"
            ],
            "signature": "logicalAnd(int x,int y)",
            "tag": "@return the logical and of x and y; the result is always 0 or 1",
            "tag_type": "returnTag",
            "prompt": "Signature: rshiftSigned(int x,int y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: mulAndCheck(int x,int y)\nJavadoc: @return the product x * y.\nCondition: true ? methodResultID==x*y\n\n###\n\nSignature: lte(double d1, double d2)\nJavadoc: @return whether d1 <= d2.\nCondition: d1<=d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: div(int x,int y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(double x,double y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(long x,long y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: ne(double d1, double d2)\nJavadoc: @return whether d1 and d2 are non-equal.\nCondition: d1!=d2 ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: mul(double x,double y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(long x,long y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(int x,int y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: addAndCheck(int x,int y)\nJavadoc: @return the sum x+y\nCondition: true ? methodResultID==x+y\n\n###\n\nSignature: bitwiseOr(int x,int y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseOr(long x,long y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseAnd(int x,int y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: bitwiseAnd(long x,long y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: logicalXor(long x,long y)\nJavadoc: @return the logical xor of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalXor(int x,int y)\nJavadoc: @return the logical xor of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalOr(long x,long y)\nJavadoc: @return the logical or of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalOr(int x,int y)\nJavadoc: @return the logical or of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalAnd(long x,long y)\nJavadoc: @return the logical and of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalAnd(int x,int y)\nJavadoc: @return the logical and of x and y; the result is always 0 or 1\nCondition:"
        },
        {
            "condition": "methodResultID.equals(Location.INSIDE) || methodResultID.equals(Location.OUTSIDE) || methodResultID.equals(Location.BOUNDARY)",
            "parameters": [
                "'point'"
            ],
            "signature": "checkPoint(org.apache.commons.math3.geometry.Point<S> point)",
            "tag": "@return a code representing the point status: either Location#INSIDE, Location#OUTSIDE or Location#BOUNDARY.",
            "tag_type": "returnTag",
            "prompt": "Signature: copy()\nJavadoc: @return a copy of this.\nCondition: methodResultID.equals(receiverObjectID)\n\n###\n\nSignature: hasExplored(net.sf.freecol.common.model.Tile tile)\nJavadoc: @return True if the Tile has been explored.\nCondition: tile.isExplored() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: bitwiseOr(int x,int y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseOr(long x,long y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseAnd(long x,long y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: bitwiseAnd(int x,int y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: getDiagonal()\nJavadoc: @return The diagonal.\nCondition: true ? methodResultID == receiverObjectID.diagonal\n\n###\n\nSignature: hasTile()\nJavadoc: @return True if this unit is on a tile.\nCondition: receiverObjectID.getTile()!=null ? methodResultID==true\n\n###\n\nSignature: hasHighSeasMove()\nJavadoc: @return True if the unit can either move immediately to the high seas or can make a move to a neighbouring high seas tile.\nCondition: receiverObjectID.canMoveToHighSeas() ? methodResultID==true:methodResultID==false\n\n###\n\nSignature: contains(org.graphstream.graph.Edge edge)\nJavadoc: @return true if the path contains the edge.\nCondition: receiverObjectID.getEdgePath().contains(edge) ? methodResultID==true\n\n###\n\nSignature: max(double a,double b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(long a,long b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(float a,float b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(int a,int b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: side(org.apache.commons.math3.geometry.partitioning.Hyperplane<S> hyperplane)\nJavadoc: @return one of Side#PLUS Side.PLUS, Side#MINUS Side.MINUS, Side#BOTH Side.BOTH or Side#HYPER Side.HYPER (the latter result can occur only if the tree contains only one cut hyperplane).\nCondition: methodResultID.equals(Side.PLUS) || methodResultID.equals(Side.MINUS) || methodResultID.equals(Side.BOTH) || methodResultID.equals(Side.HYPER)\n\n###\n\nSignature: min(float a,float b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(int a,int b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(double a,double b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: min(long a,long b)\nJavadoc: @return a if a is lesser or equal to b, b otherwise\nCondition: a<=b ? methodResultID==a : methodResultID==b\n\n###\n\nSignature: checkPoint(double point, double tolerance)\nJavadoc: @return a code representing the point status: either Location#INSIDE, Location#OUTSIDE or Location#BOUNDARY.\nCondition: methodResultID.equals(Location.INSIDE) || methodResultID.equals(Location.OUTSIDE) || methodResultID.equals(Location.BOUNDARY)\n\n###\n\nSignature: checkPoint(org.apache.commons.math3.geometry.Point<S> point)\nJavadoc: @return a code representing the point status: either Location#INSIDE, Location#OUTSIDE or Location#BOUNDARY.\nCondition:"
        },
        {
            "condition": "true?methodResultID==(x|y)",
            "parameters": [
                "'x'",
                " 'y'"
            ],
            "signature": "bitwiseOr(int x,int y)",
            "tag": "@return x | y",
            "tag_type": "returnTag",
            "prompt": "Signature: max(double a,double b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(float a,float b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: max(long a,long b)\nJavadoc: @return b if a is lesser or equal to b, a otherwise\nCondition: a<=b ? methodResultID==b : methodResultID==a\n\n###\n\nSignature: rshiftUnsigned(int x,int y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: rshiftUnsigned(long x,long y)\nJavadoc: @return x >>> y\nCondition: true?methodResultID==x>>>y\n\n###\n\nSignature: logicalOr(long x,long y)\nJavadoc: @return the logical or of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: logicalOr(int x,int y)\nJavadoc: @return the logical or of x and y; the result is always 0 or 1\nCondition:  true ? (methodResultID==0 || methodResultID==1)\n\n###\n\nSignature: mul(double x,double y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(long x,long y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: mul(int x,int y)\nJavadoc: @return x * y\nCondition: true?methodResultID==x*y\n\n###\n\nSignature: div(long x,long y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(int x,int y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: div(double x,double y)\nJavadoc: @return x / y\nCondition: true?methodResultID==x/y\n\n###\n\nSignature: lshift(long x,long y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: lshift(int x,int y)\nJavadoc: @return x << y\nCondition: true?methodResultID==x<<y\n\n###\n\nSignature: bitwiseAnd(int x,int y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: bitwiseAnd(long x,long y)\nJavadoc: @return x & y\nCondition: true?methodResultID==(x&y)\n\n###\n\nSignature: rshiftSigned(int x,int y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: rshiftSigned(long x,long y)\nJavadoc: @return x >> y\nCondition: true?methodResultID==x>>y\n\n###\n\nSignature: bitwiseOr(long x,long y)\nJavadoc: @return x | y\nCondition: true?methodResultID==(x|y)\n\n###\n\nSignature: bitwiseOr(int x,int y)\nJavadoc: @return x | y\nCondition:"
        }
    ]
}