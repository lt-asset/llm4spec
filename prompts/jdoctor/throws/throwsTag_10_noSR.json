{
    "data": [
        {
            "condition": "comparator==null",
            "parameters": [
                "'comparator'"
            ],
            "signature": "orderedBy(java.util.Comparator<K> comparator)",
            "tag": "@throws NullPointerException comparator is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: orderedBy(java.util.Comparator<K> comparator)\nJavadoc: @throws NullPointerException comparator is null.\nCondition: "
        },
        {
            "condition": "starts<1",
            "parameters": [
                "'optimizer'",
                " 'starts'",
                " 'generator'"
            ],
            "signature": "org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer(org.apache.commons.math3.optimization.univariate.BaseUnivariateOptimizer<FUNC> optimizer, int starts, org.apache.commons.math3.random.RandomGenerator generator)",
            "tag": "@throws NotStrictlyPositiveException starts < 1.",
            "tag_type": "throwsTag",
            "prompt": "Signature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer(org.apache.commons.math3.optimization.univariate.BaseUnivariateOptimizer<FUNC> optimizer, int starts, org.apache.commons.math3.random.RandomGenerator generator)\nJavadoc: @throws NotStrictlyPositiveException starts < 1.\nCondition: "
        },
        {
            "condition": "predicates==null || closures==null",
            "parameters": [
                "'predicates'",
                " 'closures'",
                " 'defaultClosure'"
            ],
            "signature": "switchClosure(org.apache.commons.collections4.Predicate[] predicates,org.apache.commons.collections4.Closure[] closures,org.apache.commons.collections4.Closure defaultClosure)",
            "tag": "@throws NullPointerException if the either array is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: switchClosure(org.apache.commons.collections4.Predicate[] predicates,org.apache.commons.collections4.Closure[] closures,org.apache.commons.collections4.Closure defaultClosure)\nJavadoc: @throws NullPointerException if the either array is null\nCondition: "
        },
        {
            "condition": "n<1",
            "parameters": [
                "'n'",
                " 'minimalIterationCount'",
                " 'maximalIterationCount'"
            ],
            "signature": "IterativeLegendreGaussIntegrator(int n,int minimalIterationCount,int maximalIterationCount)",
            "tag": "@throws NotStrictlyPositiveException if n < 1.",
            "tag_type": "throwsTag",
            "prompt": "Signature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: IterativeLegendreGaussIntegrator(int n,int minimalIterationCount,int maximalIterationCount)\nJavadoc: @throws NotStrictlyPositiveException if n < 1.\nCondition: "
        },
        {
            "condition": "maximalOrder<2",
            "parameters": [
                "'absoluteAccuracy'",
                " 'maximalOrder'"
            ],
            "signature": "org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver(double absoluteAccuracy, int maximalOrder)",
            "tag": "@throws NumberIsTooSmallException maximal order is lower than 2.",
            "tag_type": "throwsTag",
            "prompt": "Signature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver(double absoluteAccuracy, int maximalOrder)\nJavadoc: @throws NumberIsTooSmallException maximal order is lower than 2.\nCondition: "
        },
        {
            "condition": "collection==null",
            "parameters": [
                "'collection'",
                " 'predicate'"
            ],
            "signature": "predicatedCollection(java.util.Collection collection,org.apache.commons.collections4.Predicate predicate)",
            "tag": "@throws NullPointerException if the Collection is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: predicatedCollection(java.util.Collection collection,org.apache.commons.collections4.Predicate predicate)\nJavadoc: @throws NullPointerException if the Collection is null\nCondition: "
        },
        {
            "condition": "collection==null",
            "parameters": [
                "'collection'"
            ],
            "signature": "synchronizedCollection(java.util.Collection collection)",
            "tag": "@throws NullPointerException if the collection is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: synchronizedCollection(java.util.Collection collection)\nJavadoc: @throws NullPointerException if the collection is null\nCondition: "
        },
        {
            "condition": "expression==false",
            "parameters": [
                "'expression'"
            ],
            "signature": "verify(boolean expression)",
            "tag": "@throws VerifyException if expression is false",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: verify(boolean expression)\nJavadoc: @throws VerifyException if expression is false\nCondition: "
        },
        {
            "condition": "bag==null",
            "parameters": [
                "'bag'"
            ],
            "signature": "org.apache.commons.collections4.bag.CollectionBag(org.apache.commons.collections4.Bag<E> bag)",
            "tag": "@throws NullPointerException bag is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: org.apache.commons.collections4.bag.CollectionBag(org.apache.commons.collections4.Bag<E> bag)\nJavadoc: @throws NullPointerException bag is null.\nCondition: "
        },
        {
            "condition": "a.length==0",
            "parameters": [
                "'a'"
            ],
            "signature": "max(double[] a)",
            "tag": "@throws ArrayIndexOutOfBoundsException if the array has length 0",
            "tag_type": "throwsTag",
            "prompt": "Signature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: max(double[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: "
        },
        {
            "condition": "map==null || factory==null",
            "parameters": [
                "'map'",
                " 'factory'"
            ],
            "signature": "lazyMap(java.util.Map<K, map, org.apache.commons.collections4.Factory<? factory)",
            "tag": "@throws NullPointerException map or factory is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: lazyMap(java.util.Map<K, map, org.apache.commons.collections4.Factory<? factory)\nJavadoc: @throws NullPointerException map or factory is null.\nCondition: "
        },
        {
            "condition": "pathElement==null",
            "parameters": [
                "'graph'",
                " 'maxSize'",
                " 'pathElement'"
            ],
            "signature": "AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElement pathElement)",
            "tag": "@throws NullPointerException if the specified path-element is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElement pathElement)\nJavadoc: @throws NullPointerException if the specified path-element is null.\nCondition: "
        },
        {
            "condition": "len<0 || len>(bytes.length - start)",
            "parameters": [
                "'bytes'",
                " 'start'",
                " 'len'"
            ],
            "signature": "nextBytes(byte[] bytes,int start,int len)",
            "tag": "@throws OutOfRangeException if len < 0 or len > bytes.length - start.",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextBytes(byte[] bytes,int start,int len)\nJavadoc: @throws OutOfRangeException if len < 0 or len > bytes.length - start.\nCondition: "
        },
        {
            "condition": "index<0",
            "parameters": [
                "'index'"
            ],
            "signature": "skipTo(int index)",
            "tag": "@throws NotPositiveException index < 0.",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: skipTo(int index)\nJavadoc: @throws NotPositiveException index < 0.\nCondition: "
        },
        {
            "condition": "true",
            "parameters": [
                ""
            ],
            "signature": "pollFirstEntry()",
            "tag": "@throws UnsupportedOperationException always.",
            "tag_type": "throwsTag",
            "prompt": "Signature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: pollFirstEntry()\nJavadoc: @throws UnsupportedOperationException always.\nCondition: "
        },
        {
            "condition": "(original instanceof BinaryChromosome) == false",
            "parameters": [
                "'original'"
            ],
            "signature": "mutate(org.apache.commons.math3.genetics.Chromosome original)",
            "tag": "@throws MathIllegalArgumentException if original is not an instance of BinaryChromosome.",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: mutate(org.apache.commons.math3.genetics.Chromosome original)\nJavadoc: @throws MathIllegalArgumentException if original is not an instance of BinaryChromosome.\nCondition: "
        },
        {
            "condition": "obj==null || ! (obj instanceof boolean[] || obj instanceof double[] || obj instanceof int[] || obj instanceof long[] || obj instanceof Object[])",
            "parameters": [
                "'obj'"
            ],
            "signature": "length(java.lang.Object obj)",
            "tag": "@throws IllegalArgumentException if obj is null or is not one of the types mentioned above.",
            "tag_type": "throwsTag",
            "prompt": "Signature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: length(java.lang.Object obj)\nJavadoc: @throws IllegalArgumentException if obj is null or is not one of the types mentioned above.\nCondition: "
        },
        {
            "condition": "element==null",
            "parameters": [
                "'element'"
            ],
            "signature": "add(E element)",
            "tag": "@throws NullPointerException a null value is inserted.",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: add(E element)\nJavadoc: @throws NullPointerException a null value is inserted.\nCondition: "
        },
        {
            "condition": "collection==null",
            "parameters": [
                "'collection'",
                " 'object'"
            ],
            "signature": "addIgnoreNull(java.util.Collection collection,java.lang.Object object)",
            "tag": "@throws NullPointerException if the collection is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: addIgnoreNull(java.util.Collection collection,java.lang.Object object)\nJavadoc: @throws NullPointerException if the collection is null\nCondition: "
        },
        {
            "condition": "array.length==0",
            "parameters": [
                "'array'"
            ],
            "signature": "min(float[] array)",
            "tag": "@throws IllegalArgumentException if array is empty",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: min(float[] array)\nJavadoc: @throws IllegalArgumentException if array is empty\nCondition: "
        },
        {
            "condition": "endInclusive<startInclusive",
            "parameters": [
                "'startInclusive'",
                " 'endInclusive'"
            ],
            "signature": "inRange(char startInclusive,char endInclusive)",
            "tag": "@throws IllegalArgumentException if endInclusive < startInclusive",
            "tag_type": "throwsTag",
            "prompt": "Signature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: inRange(char startInclusive,char endInclusive)\nJavadoc: @throws IllegalArgumentException if endInclusive < startInclusive\nCondition: "
        },
        {
            "condition": "a.length==0",
            "parameters": [
                "'a'"
            ],
            "signature": "element_range(int[] a)",
            "tag": "@throws ArrayIndexOutOfBoundsException if the array has length 0",
            "tag_type": "throwsTag",
            "prompt": "Signature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: element_range(int[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: "
        },
        {
            "condition": "nPaths<0 || nPaths==0",
            "parameters": [
                "'graph'",
                " 'startVertex'",
                " 'nPaths'",
                " 'nMaxHops'"
            ],
            "signature": "KShortestPaths(org.jgrapht.Graph graph,java.lang.Object startVertex,int nPaths,int nMaxHops)",
            "tag": "@throws IllegalArgumentException if nPaths is negative or 0.",
            "tag_type": "throwsTag",
            "prompt": "Signature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: KShortestPaths(org.jgrapht.Graph graph,java.lang.Object startVertex,int nPaths,int nMaxHops)\nJavadoc: @throws IllegalArgumentException if nPaths is negative or 0.\nCondition: "
        },
        {
            "condition": "closures==null",
            "parameters": [
                "'closures'"
            ],
            "signature": "chainedClosure(org.apache.commons.collections4.Closure[] closures)",
            "tag": "@throws NullPointerException if the closures array is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: chainedClosure(org.apache.commons.collections4.Closure[] closures)\nJavadoc: @throws NullPointerException if the closures array is null\nCondition: "
        },
        {
            "condition": "p<0||p>1",
            "parameters": [
                "'r'",
                " 'p'"
            ],
            "signature": "nextPascal(int r,double p)",
            "tag": "@throws OutOfRangeException if the probability of success is not in the range [0, 1].",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextPascal(int r,double p)\nJavadoc: @throws OutOfRangeException if the probability of success is not in the range [0, 1].\nCondition: "
        },
        {
            "condition": "bag==null",
            "parameters": [
                "'bag'"
            ],
            "signature": "collectionBag(org.apache.commons.collections4.Bag<E> bag)",
            "tag": "@throws NullPointerException bag is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collectionBag(org.apache.commons.collections4.Bag<E> bag)\nJavadoc: @throws NullPointerException bag is null.\nCondition: "
        },
        {
            "condition": "initialSize<0 || initialSize>maxSize",
            "parameters": [
                "'maxSize'",
                " 'initialSize'",
                " 'loadFactor'"
            ],
            "signature": "LRUMap(int maxSize,int initialSize,float loadFactor)",
            "tag": "@throws IllegalArgumentException if the initial size is negative or larger than the maximum size",
            "tag_type": "throwsTag",
            "prompt": "Signature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: LRUMap(int maxSize,int initialSize,float loadFactor)\nJavadoc: @throws IllegalArgumentException if the initial size is negative or larger than the maximum size\nCondition: "
        },
        {
            "condition": "maxSize<1",
            "parameters": [
                "'maxSize'",
                " 'initialSize'",
                " 'loadFactor'",
                " 'scanUntilRemovable'"
            ],
            "signature": "LRUMap(int maxSize,int initialSize,float loadFactor,boolean scanUntilRemovable)",
            "tag": "@throws IllegalArgumentException if the maximum size is less than one",
            "tag_type": "throwsTag",
            "prompt": "Signature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: LRUMap(int maxSize,int initialSize,float loadFactor,boolean scanUntilRemovable)\nJavadoc: @throws IllegalArgumentException if the maximum size is less than one\nCondition: "
        },
        {
            "condition": "java.util.Arrays.stream(closures).anyMatch(e -> e==null)",
            "parameters": [
                "'closures'"
            ],
            "signature": "chainedClosure(org.apache.commons.collections4.Closure[] closures)",
            "tag": "@throws NullPointerException if any closure in the array is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: chainedClosure(org.apache.commons.collections4.Closure[] closures)\nJavadoc: @throws NullPointerException if any closure in the array is null\nCondition: "
        },
        {
            "condition": "initialSize<0 || initialSize>maxSize",
            "parameters": [
                "'maxSize'",
                " 'initialSize'"
            ],
            "signature": "LRUMap(int maxSize,int initialSize)",
            "tag": "@throws IllegalArgumentException if the initial size is negative or larger than the maximum size",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: LRUMap(int maxSize,int initialSize)\nJavadoc: @throws IllegalArgumentException if the initial size is negative or larger than the maximum size\nCondition: "
        },
        {
            "condition": "map==null || factory==null",
            "parameters": [
                "'map'",
                " 'factory'"
            ],
            "signature": "lazyMap(java.util.Map<K, map, org.apache.commons.collections4.Transformer<? factory)",
            "tag": "@throws NullPointerException map or factory is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: lazyMap(java.util.Map<K, map, org.apache.commons.collections4.Transformer<? factory)\nJavadoc: @throws NullPointerException map or factory is null.\nCondition: "
        },
        {
            "condition": "map==null || factory==null",
            "parameters": [
                "'map'",
                " 'factory'"
            ],
            "signature": "org.apache.commons.collections4.map.LazyMap(java.util.Map<K, map, org.apache.commons.collections4.Factory<? factory)",
            "tag": "@throws NullPointerException map or factory is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: org.apache.commons.collections4.map.LazyMap(java.util.Map<K, map, org.apache.commons.collections4.Factory<? factory)\nJavadoc: @throws NullPointerException map or factory is null.\nCondition: "
        },
        {
            "condition": "a==null || b==null",
            "parameters": [
                "'a'",
                " 'b'"
            ],
            "signature": "collate(java.lang.Iterable a,java.lang.Iterable b)",
            "tag": "@throws NullPointerException if either collection is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b)\nJavadoc: @throws NullPointerException if either collection is null\nCondition: "
        },
        {
            "condition": "unknownObjectBehavior==null",
            "parameters": [
                "'unknownObjectBehavior'"
            ],
            "signature": "setUnknownObjectBehavior(org.apache.commons.collections4.comparators.FixedOrderComparator.UnknownObjectBehavior unknownObjectBehavior)",
            "tag": "@throws NullPointerException if unknownObjectBehavior is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: setUnknownObjectBehavior(org.apache.commons.collections4.comparators.FixedOrderComparator.UnknownObjectBehavior unknownObjectBehavior)\nJavadoc: @throws NullPointerException if unknownObjectBehavior is null\nCondition: "
        },
        {
            "condition": "array.length==0",
            "parameters": [
                "'array'"
            ],
            "signature": "max(short[] array)",
            "tag": "@throws IllegalArgumentException if array is empty",
            "tag_type": "throwsTag",
            "prompt": "Signature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: max(short[] array)\nJavadoc: @throws IllegalArgumentException if array is empty\nCondition: "
        },
        {
            "condition": "iterable==null",
            "parameters": [
                "'iterable'"
            ],
            "signature": "of(java.lang.Iterable iterable)",
            "tag": "@throws NullPointerException if iterable is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: of(java.lang.Iterable iterable)\nJavadoc: @throws NullPointerException if iterable is null\nCondition: "
        },
        {
            "condition": "xval.length==0 || yval.length==0",
            "parameters": [
                "'xval'",
                " 'yval'"
            ],
            "signature": "smooth(double[] xval,double[] yval)",
            "tag": "@throws NoDataException if xval or yval has zero size.",
            "tag_type": "throwsTag",
            "prompt": "Signature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: smooth(double[] xval,double[] yval)\nJavadoc: @throws NoDataException if xval or yval has zero size.\nCondition: "
        },
        {
            "condition": "(receiverObjectID.canCarryTreasure())==false",
            "parameters": [
                "'loc'"
            ],
            "signature": "canCashInTreasureTrain(net.sf.freecol.common.model.Location loc)",
            "tag": "@throws IllegalStateException if this unit is not a treasure train.",
            "tag_type": "throwsTag",
            "prompt": "Signature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: canCashInTreasureTrain(net.sf.freecol.common.model.Location loc)\nJavadoc: @throws IllegalStateException if this unit is not a treasure train.\nCondition: "
        },
        {
            "condition": "predicates.stream().anyMatch(e -> e==null)",
            "parameters": [
                "'predicates'"
            ],
            "signature": "allPredicate(java.util.Collection predicates)",
            "tag": "@throws NullPointerException if any predicate in the array is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: allPredicate(java.util.Collection predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: "
        },
        {
            "condition": "axis.getNorm().getReal()==0",
            "parameters": [
                "'axis'",
                " 'angle'",
                " 'convention'"
            ],
            "signature": "FieldRotation(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D axis,org.apache.commons.math3.RealFieldElement angle,org.apache.commons.math3.geometry.euclidean.threed.RotationConvention convention)",
            "tag": "@throws MathIllegalArgumentException if the axis norm is zero",
            "tag_type": "throwsTag",
            "prompt": "Signature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D axis,org.apache.commons.math3.RealFieldElement angle,org.apache.commons.math3.geometry.euclidean.threed.RotationConvention convention)\nJavadoc: @throws MathIllegalArgumentException if the axis norm is zero\nCondition: "
        },
        {
            "condition": "g==null",
            "parameters": [
                "'g'"
            ],
            "signature": "org.jgrapht.graph.GraphDelegator(org.jgrapht.Graph<V, g)",
            "tag": "@throws IllegalArgumentException g==null",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: org.jgrapht.graph.GraphDelegator(org.jgrapht.Graph<V, g)\nJavadoc: @throws IllegalArgumentException g==null\nCondition: "
        },
        {
            "condition": "bag==null",
            "parameters": [
                "'bag'"
            ],
            "signature": "collectionBag(org.apache.commons.collections4.Bag bag)",
            "tag": "@throws NullPointerException if bag is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collectionBag(org.apache.commons.collections4.Bag bag)\nJavadoc: @throws NullPointerException if bag is null\nCondition: "
        },
        {
            "condition": "e<0",
            "parameters": [
                "'k'",
                " 'e'"
            ],
            "signature": "pow(long k,long e)",
            "tag": "@throws NotPositiveException if e < 0.",
            "tag_type": "throwsTag",
            "prompt": "Signature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: pow(long k,long e)\nJavadoc: @throws NotPositiveException if e < 0.\nCondition: "
        },
        {
            "condition": "receiverObjectID.isLocked()",
            "parameters": [
                ""
            ],
            "signature": "checkLocked()",
            "tag": "@throws UnsupportedOperationException if the comparator is locked",
            "tag_type": "throwsTag",
            "prompt": "Signature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: checkLocked()\nJavadoc: @throws UnsupportedOperationException if the comparator is locked\nCondition: "
        },
        {
            "condition": "java.util.Arrays.stream(predicates).anyMatch(e->e==null)",
            "parameters": [
                "'predicates'"
            ],
            "signature": "nonePredicate(org.apache.commons.collections4.Predicate[] predicates)",
            "tag": "@throws NullPointerException if any predicate in the array is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nonePredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: "
        },
        {
            "condition": "bg==null",
            "parameters": [
                "'bg'"
            ],
            "signature": "add(java.math.BigInteger bg)",
            "tag": "@throws NullArgumentException if the BigInteger is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: add(java.math.BigInteger bg)\nJavadoc: @throws NullArgumentException if the BigInteger is null.\nCondition: "
        },
        {
            "condition": "predicate==null",
            "parameters": [
                "'predicate'"
            ],
            "signature": "filter(org.apache.commons.collections4.Predicate predicate)",
            "tag": "@throws NullPointerException if predicate is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: filter(org.apache.commons.collections4.Predicate predicate)\nJavadoc: @throws NullPointerException if predicate is null\nCondition: "
        },
        {
            "condition": "expectedKeys<0 || expectedValuesPerKey<0",
            "parameters": [
                "'expectedKeys'",
                " 'expectedValuesPerKey'"
            ],
            "signature": "create(int expectedKeys,int expectedValuesPerKey)",
            "tag": "@throws IllegalArgumentException if expectedKeys or expectedValuesPerKey is negative",
            "tag_type": "throwsTag",
            "prompt": "Signature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: create(int expectedKeys,int expectedValuesPerKey)\nJavadoc: @throws IllegalArgumentException if expectedKeys or expectedValuesPerKey is negative\nCondition: "
        },
        {
            "condition": "position<0",
            "parameters": [
                "'iterator'",
                " 'position'",
                " 'defaultValue'"
            ],
            "signature": "get(java.util.Iterator iterator,int position,java.lang.Object defaultValue)",
            "tag": "@throws IndexOutOfBoundsException if position is negative",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: get(java.util.Iterator iterator,int position,java.lang.Object defaultValue)\nJavadoc: @throws IndexOutOfBoundsException if position is negative\nCondition: "
        },
        {
            "condition": "array.length==0",
            "parameters": [
                "'array'"
            ],
            "signature": "max(float[] array)",
            "tag": "@throws IllegalArgumentException if array is empty",
            "tag_type": "throwsTag",
            "prompt": "Signature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: max(float[] array)\nJavadoc: @throws IllegalArgumentException if array is empty\nCondition: "
        },
        {
            "condition": "bandwidth<0 || bandwidth>1",
            "parameters": [
                "'bandwidth'",
                " 'robustnessIters'",
                " 'accuracy'"
            ],
            "signature": "LoessInterpolator(double bandwidth,int robustnessIters,double accuracy)",
            "tag": "@throws OutOfRangeException if bandwidth does not lie in the interval [0,1].",
            "tag_type": "throwsTag",
            "prompt": "Signature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: LoessInterpolator(double bandwidth,int robustnessIters,double accuracy)\nJavadoc: @throws OutOfRangeException if bandwidth does not lie in the interval [0,1].\nCondition: "
        },
        {
            "condition": "predicates.length != closures.length",
            "parameters": [
                "'predicates'",
                " 'closures'"
            ],
            "signature": "switchClosure(org.apache.commons.collections4.Predicate[] predicates,org.apache.commons.collections4.Closure[] closures)",
            "tag": "@throws IllegalArgumentException if the arrays have different sizes",
            "tag_type": "throwsTag",
            "prompt": "Signature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: switchClosure(org.apache.commons.collections4.Predicate[] predicates,org.apache.commons.collections4.Closure[] closures)\nJavadoc: @throws IllegalArgumentException if the arrays have different sizes\nCondition: "
        },
        {
            "condition": "graph==null || startVertex==null",
            "parameters": [
                "'graph'",
                " 'startVertex'",
                " 'nPaths'",
                " 'nMaxHops'"
            ],
            "signature": "KShortestPaths(org.jgrapht.Graph graph,java.lang.Object startVertex,int nPaths,int nMaxHops)",
            "tag": "@throws NullPointerException if the specified graph or startVertex is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: KShortestPaths(org.jgrapht.Graph graph,java.lang.Object startVertex,int nPaths,int nMaxHops)\nJavadoc: @throws NullPointerException if the specified graph or startVertex is null.\nCondition: "
        },
        {
            "condition": "minLength<0 || padding<0",
            "parameters": [
                "'array'",
                " 'minLength'",
                " 'padding'"
            ],
            "signature": "ensureCapacity(float[] array,int minLength,int padding)",
            "tag": "@throws IllegalArgumentException if minLength or padding is negative",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: ensureCapacity(float[] array,int minLength,int padding)\nJavadoc: @throws IllegalArgumentException if minLength or padding is negative\nCondition: "
        },
        {
            "condition": "n<0",
            "parameters": [
                "'n'"
            ],
            "signature": "nextPrime(int n)",
            "tag": "@throws MathIllegalArgumentException if n < 0.",
            "tag_type": "throwsTag",
            "prompt": "Signature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextPrime(int n)\nJavadoc: @throws MathIllegalArgumentException if n < 0.\nCondition: "
        },
        {
            "condition": "receiverObjectID.isCompatible(that)==false",
            "parameters": [
                "'that'"
            ],
            "signature": "putAll(com.google.common.hash.BloomFilter that)",
            "tag": "@throws IllegalArgumentException if isCompatible(that) == false",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: putAll(com.google.common.hash.BloomFilter that)\nJavadoc: @throws IllegalArgumentException if isCompatible(that) == false\nCondition: "
        },
        {
            "condition": "predicate==null",
            "parameters": [
                "'predicate'"
            ],
            "signature": "allMatch(org.apache.commons.collections4.Predicate predicate)",
            "tag": "@throws NullPointerException if predicate is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: allMatch(org.apache.commons.collections4.Predicate predicate)\nJavadoc: @throws NullPointerException if predicate is null\nCondition: "
        },
        {
            "condition": "(receiverObjectID.canCarryTreasure()) == false",
            "parameters": [
                ""
            ],
            "signature": "canCashInTreasureTrain()",
            "tag": "@throws IllegalStateException if this unit is not a treasure train.",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: canCashInTreasureTrain()\nJavadoc: @throws IllegalStateException if this unit is not a treasure train.\nCondition: "
        },
        {
            "condition": "(first.getLength() == second.getLength()) == false",
            "parameters": [
                "'first'",
                " 'second'"
            ],
            "signature": "mate(org.apache.commons.math3.genetics.AbstractListChromosome first,org.apache.commons.math3.genetics.AbstractListChromosome second)",
            "tag": "@throws DimensionMismatchException if the length of the two chromosomes is different",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: mate(org.apache.commons.math3.genetics.AbstractListChromosome first,org.apache.commons.math3.genetics.AbstractListChromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: "
        },
        {
            "condition": "x.length<2",
            "parameters": [
                "'x'",
                " 'y'"
            ],
            "signature": "interpolate(double[] x,double[] y)",
            "tag": "@throws NumberIsTooSmallException if the number of points is less than 2.",
            "tag_type": "throwsTag",
            "prompt": "Signature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: interpolate(double[] x,double[] y)\nJavadoc: @throws NumberIsTooSmallException if the number of points is less than 2.\nCondition: "
        },
        {
            "condition": "f.length != receiverObjectID.getOrder() + 1",
            "parameters": [
                "'f'"
            ],
            "signature": "compose(double... f)",
            "tag": "@throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.",
            "tag_type": "throwsTag",
            "prompt": "Signature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: "
        },
        {
            "condition": "predicate==null",
            "parameters": [
                "'predicate'"
            ],
            "signature": "nullIsTruePredicate(org.apache.commons.collections4.Predicate predicate)",
            "tag": "@throws NullPointerException if the predicate is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nullIsTruePredicate(org.apache.commons.collections4.Predicate predicate)\nJavadoc: @throws NullPointerException if the predicate is null.\nCondition: "
        },
        {
            "condition": "other==null",
            "parameters": [
                "'other'"
            ],
            "signature": "append(java.lang.Iterable other)",
            "tag": "@throws NullPointerException if other is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: append(java.lang.Iterable other)\nJavadoc: @throws NullPointerException if other is null\nCondition: "
        },
        {
            "condition": "fraction==null",
            "parameters": [
                "'fraction'"
            ],
            "signature": "multiply(org.apache.commons.math3.fraction.Fraction fraction)",
            "tag": "@throws NullArgumentException if the fraction is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: multiply(org.apache.commons.math3.fraction.Fraction fraction)\nJavadoc: @throws NullArgumentException if the fraction is null\nCondition: "
        },
        {
            "condition": "n<1",
            "parameters": [
                "'n'",
                " 'relativeAccuracy'",
                " 'absoluteAccuracy'"
            ],
            "signature": "IterativeLegendreGaussIntegrator(int n,double relativeAccuracy,double absoluteAccuracy)",
            "tag": "@throws NotStrictlyPositiveException if n < 1.",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: IterativeLegendreGaussIntegrator(int n,double relativeAccuracy,double absoluteAccuracy)\nJavadoc: @throws NotStrictlyPositiveException if n < 1.\nCondition: "
        },
        {
            "condition": "inputCollection==null",
            "parameters": [
                "'inputCollection'",
                " 'predicate'"
            ],
            "signature": "select(java.lang.Iterable inputCollection,org.apache.commons.collections4.Predicate predicate)",
            "tag": "@throws NullPointerException if the input collection is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: select(java.lang.Iterable inputCollection,org.apache.commons.collections4.Predicate predicate)\nJavadoc: @throws NullPointerException if the input collection is null\nCondition: "
        },
        {
            "condition": "lower>=upper",
            "parameters": [
                "'lower'",
                " 'upper'",
                " 'lowerInclusive'"
            ],
            "signature": "nextUniform(double lower,double upper,boolean lowerInclusive)",
            "tag": "@throws NumberIsTooLargeException if lower >= upper",
            "tag_type": "throwsTag",
            "prompt": "Signature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextUniform(double lower,double upper,boolean lowerInclusive)\nJavadoc: @throws NumberIsTooLargeException if lower >= upper\nCondition: "
        },
        {
            "condition": "closures.isEmpty()",
            "parameters": [
                "'closures'"
            ],
            "signature": "chainedClosure(java.util.Collection closures)",
            "tag": "@throws IllegalArgumentException if the closures collection is empty",
            "tag_type": "throwsTag",
            "prompt": "Signature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws IllegalArgumentException if the closures collection is empty\nCondition: "
        },
        {
            "condition": "predicates==null",
            "parameters": [
                "'predicates'"
            ],
            "signature": "anyPredicate(org.apache.commons.collections4.Predicate[] predicates)",
            "tag": "@throws NullPointerException if the predicates array is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if the predicates array is null\nCondition: "
        },
        {
            "condition": "objectsAndClosures.values().stream().anyMatch(e -> e==null)",
            "parameters": [
                "'objectsAndClosures'"
            ],
            "signature": "switchMapClosure(java.util.Map objectsAndClosures)",
            "tag": "@throws NullPointerException if any closure in the map is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: switchMapClosure(java.util.Map objectsAndClosures)\nJavadoc: @throws NullPointerException if any closure in the map is null\nCondition: "
        },
        {
            "condition": "a.length==0",
            "parameters": [
                "'a'"
            ],
            "signature": "min(double[] a)",
            "tag": "@throws ArrayIndexOutOfBoundsException if the array has length 0",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: min(double[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: "
        },
        {
            "condition": "((a.length - c.length) == 1) == false",
            "parameters": [
                "'a'",
                " 'c'"
            ],
            "signature": "PolynomialFunctionNewtonForm(double[] a,double[] c)",
            "tag": "@throws DimensionMismatchException if the size difference between a and c is not equal to 1.",
            "tag_type": "throwsTag",
            "prompt": "Signature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: PolynomialFunctionNewtonForm(double[] a,double[] c)\nJavadoc: @throws DimensionMismatchException if the size difference between a and c is not equal to 1.\nCondition: "
        },
        {
            "condition": "entry==null",
            "parameters": [
                "'entry'"
            ],
            "signature": "org.apache.commons.collections4.keyvalue.DefaultMapEntry(java.util.Map.java.util.Map$Entry<? entry)",
            "tag": "@throws NullPointerException the entry is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: org.apache.commons.collections4.keyvalue.DefaultMapEntry(java.util.Map.java.util.Map$Entry<? entry)\nJavadoc: @throws NullPointerException the entry is null.\nCondition: "
        },
        {
            "condition": "denominator==0",
            "parameters": [
                "'numerator'",
                " 'denominator'"
            ],
            "signature": "getReducedFraction(int numerator,int denominator)",
            "tag": "@throws ArithmeticException if the denominator is zero.",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: getReducedFraction(int numerator,int denominator)\nJavadoc: @throws ArithmeticException if the denominator is zero.\nCondition: "
        },
        {
            "condition": "predicate==null || trueClosure==null",
            "parameters": [
                "'predicate'",
                " 'trueClosure'"
            ],
            "signature": "ifClosure(org.apache.commons.collections4.Predicate<? predicate, org.apache.commons.collections4.Closure<? trueClosure)",
            "tag": "@throws NullPointerException either argument is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: ifClosure(org.apache.commons.collections4.Predicate<? predicate, org.apache.commons.collections4.Closure<? trueClosure)\nJavadoc: @throws NullPointerException either argument is null.\nCondition: "
        },
        {
            "condition": "(first instanceof AbstractListChromosome) == false || (second instanceof AbstractListChromosome) == false",
            "parameters": [
                "'first'",
                " 'second'"
            ],
            "signature": "crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)",
            "tag": "@throws MathIllegalArgumentException if the chromosomes are not an instance of AbstractListChromosome",
            "tag_type": "throwsTag",
            "prompt": "Signature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws MathIllegalArgumentException if the chromosomes are not an instance of AbstractListChromosome\nCondition: "
        },
        {
            "condition": "((xval.length) == (yval.length)) == false",
            "parameters": [
                "'xval'",
                " 'yval'"
            ],
            "signature": "interpolate(double[] xval,double[] yval)",
            "tag": "@throws DimensionMismatchException if xval and yval have different sizes.",
            "tag_type": "throwsTag",
            "prompt": "Signature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: interpolate(double[] xval,double[] yval)\nJavadoc: @throws DimensionMismatchException if xval and yval have different sizes.\nCondition: "
        },
        {
            "condition": "len<=0",
            "parameters": [
                "'len'"
            ],
            "signature": "nextHexString(int len)",
            "tag": "@throws NotStrictlyPositiveException if len <= 0.",
            "tag_type": "throwsTag",
            "prompt": "Signature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextHexString(int len)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0.\nCondition: "
        },
        {
            "condition": "closures.stream().anyMatch(e -> e==null)",
            "parameters": [
                "'closures'"
            ],
            "signature": "chainedClosure(java.util.Collection closures)",
            "tag": "@throws NullPointerException if any closure in the collection is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if any closure in the collection is null\nCondition: "
        },
        {
            "condition": "predicate==null || closure==null",
            "parameters": [
                "'predicate'",
                " 'closure'"
            ],
            "signature": "whileClosure(org.apache.commons.collections4.Predicate predicate,org.apache.commons.collections4.Closure closure)",
            "tag": "@throws NullPointerException if either argument is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: whileClosure(org.apache.commons.collections4.Predicate predicate,org.apache.commons.collections4.Closure closure)\nJavadoc: @throws NullPointerException if either argument is null\nCondition: "
        },
        {
            "condition": "receiverObjectID.getNorm()==null",
            "parameters": [
                ""
            ],
            "signature": "orthogonal()",
            "tag": "@throws MathArithmeticException if the norm of the instance is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: "
        },
        {
            "condition": "minLength<0 || padding<0",
            "parameters": [
                "'array'",
                " 'minLength'",
                " 'padding'"
            ],
            "signature": "ensureCapacity(double[] array,int minLength,int padding)",
            "tag": "@throws IllegalArgumentException if minLength or padding is negative",
            "tag_type": "throwsTag",
            "prompt": "Signature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: ensureCapacity(double[] array,int minLength,int padding)\nJavadoc: @throws IllegalArgumentException if minLength or padding is negative\nCondition: "
        },
        {
            "condition": "((a.length - c.length)==1) == false",
            "parameters": [
                "'a'",
                " 'c'"
            ],
            "signature": "verifyInputArray(double[] a,double[] c)",
            "tag": "@throws DimensionMismatchException if the size difference between a and c is not equal to 1.",
            "tag_type": "throwsTag",
            "prompt": "Signature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: verifyInputArray(double[] a,double[] c)\nJavadoc: @throws DimensionMismatchException if the size difference between a and c is not equal to 1.\nCondition: "
        },
        {
            "condition": "k<0",
            "parameters": [
                "'n'",
                " 'k'"
            ],
            "signature": "stirlingS2(int n,int k)",
            "tag": "@throws NotPositiveException if k < 0.",
            "tag_type": "throwsTag",
            "prompt": "Signature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: stirlingS2(int n,int k)\nJavadoc: @throws NotPositiveException if k < 0.\nCondition: "
        },
        {
            "condition": "inputCollection==null",
            "parameters": [
                "'inputCollection'",
                " 'predicate'"
            ],
            "signature": "selectRejected(java.lang.Iterable inputCollection,org.apache.commons.collections4.Predicate predicate)",
            "tag": "@throws NullPointerException if the input collection is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: selectRejected(java.lang.Iterable inputCollection,org.apache.commons.collections4.Predicate predicate)\nJavadoc: @throws NullPointerException if the input collection is null\nCondition: "
        },
        {
            "condition": "fraction==null",
            "parameters": [
                "'fraction'"
            ],
            "signature": "multiply(org.apache.commons.math3.fraction.BigFraction fraction)",
            "tag": "@throws NullArgumentException if fraction is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: multiply(org.apache.commons.math3.fraction.BigFraction fraction)\nJavadoc: @throws NullArgumentException if fraction is null.\nCondition: "
        },
        {
            "condition": "factor==null",
            "parameters": [
                "'factor'"
            ],
            "signature": "multiply(org.apache.commons.math3.complex.Complex factor)",
            "tag": "@throws NullArgumentException if factor is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: multiply(org.apache.commons.math3.complex.Complex factor)\nJavadoc: @throws NullArgumentException if factor is null.\nCondition: "
        },
        {
            "condition": "bag==null",
            "parameters": [
                "'bag'"
            ],
            "signature": "synchronizedBag(org.apache.commons.collections4.Bag bag)",
            "tag": "@throws NullPointerException if bag is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: synchronizedBag(org.apache.commons.collections4.Bag bag)\nJavadoc: @throws NullPointerException if bag is null\nCondition: "
        },
        {
            "condition": "predicates==null",
            "parameters": [
                "'predicates'"
            ],
            "signature": "allPredicate(java.util.Collection predicates)",
            "tag": "@throws NullPointerException if the predicates collection is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: allPredicate(java.util.Collection predicates)\nJavadoc: @throws NullPointerException if the predicates collection is null\nCondition: "
        },
        {
            "condition": "predicatesAndClosures.values().stream().anyMatch(e -> e==null)",
            "parameters": [
                "'predicatesAndClosures'"
            ],
            "signature": "switchClosure(java.util.Map predicatesAndClosures)",
            "tag": "@throws NullPointerException if any closure in the map is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: switchClosure(java.util.Map predicatesAndClosures)\nJavadoc: @throws NullPointerException if any closure in the map is null\nCondition: "
        },
        {
            "condition": "predicates.length != closures.length",
            "parameters": [
                "'predicates'",
                " 'closures'",
                " 'defaultClosure'"
            ],
            "signature": "switchClosure(org.apache.commons.collections4.Predicate[] predicates,org.apache.commons.collections4.Closure[] closures,org.apache.commons.collections4.Closure defaultClosure)",
            "tag": "@throws IllegalArgumentException if the arrays are different sizes",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: switchClosure(org.apache.commons.collections4.Predicate[] predicates,org.apache.commons.collections4.Closure[] closures,org.apache.commons.collections4.Closure defaultClosure)\nJavadoc: @throws IllegalArgumentException if the arrays are different sizes\nCondition: "
        },
        {
            "condition": "sourceVertex==null || targetVertex==null",
            "parameters": [
                "'sourceVertex'",
                " 'targetVertex'",
                " 'e'"
            ],
            "signature": "addEdge(java.lang.Object sourceVertex,java.lang.Object targetVertex,java.lang.Object e)",
            "tag": "@throws NullPointerException if any of the specified vertices is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: addEdge(java.lang.Object sourceVertex,java.lang.Object targetVertex,java.lang.Object e)\nJavadoc: @throws NullPointerException if any of the specified vertices is null.\nCondition: "
        },
        {
            "condition": "maxSize<1",
            "parameters": [
                "'maxSize'",
                " 'scanUntilRemovable'"
            ],
            "signature": "LRUMap(int maxSize,boolean scanUntilRemovable)",
            "tag": "@throws IllegalArgumentException if the maximum size is less than one",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: LRUMap(int maxSize,boolean scanUntilRemovable)\nJavadoc: @throws IllegalArgumentException if the maximum size is less than one\nCondition: "
        },
        {
            "condition": "size<0",
            "parameters": [
                "'size'"
            ],
            "signature": "EmptyGraphGenerator(int size)",
            "tag": "@throws IllegalArgumentException if the specified size is negative.",
            "tag_type": "throwsTag",
            "prompt": "Signature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: EmptyGraphGenerator(int size)\nJavadoc: @throws IllegalArgumentException if the specified size is negative.\nCondition: "
        },
        {
            "condition": "(minimalIterationCount>0)==false",
            "parameters": [
                "'relativeAccuracy'",
                " 'absoluteAccuracy'",
                " 'minimalIterationCount'",
                " 'maximalIterationCount'"
            ],
            "signature": "SimpsonIntegrator(double relativeAccuracy,double absoluteAccuracy,int minimalIterationCount,int maximalIterationCount)",
            "tag": "@throws NotStrictlyPositiveException if minimal number of iterations is not strictly positive",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: SimpsonIntegrator(double relativeAccuracy,double absoluteAccuracy,int minimalIterationCount,int maximalIterationCount)\nJavadoc: @throws NotStrictlyPositiveException if minimal number of iterations is not strictly positive\nCondition: "
        },
        {
            "condition": "receiverObjectID.contains(sourceVertex)==false || receiverObjectID.contains(targetVertex)==false",
            "parameters": [
                "'sourceVertex'",
                " 'targetVertex'"
            ],
            "signature": "addEdge(java.lang.Object sourceVertex,java.lang.Object targetVertex)",
            "tag": "@throws IllegalArgumentException if source or target vertices are not found in the graph.",
            "tag_type": "throwsTag",
            "prompt": "Signature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: addEdge(java.lang.Object sourceVertex,java.lang.Object targetVertex)\nJavadoc: @throws IllegalArgumentException if source or target vertices are not found in the graph.\nCondition: "
        },
        {
            "condition": "elementsToSkip<0",
            "parameters": [
                "'elementsToSkip'"
            ],
            "signature": "skip(long elementsToSkip)",
            "tag": "@throws IllegalArgumentException if elementsToSkip is negative",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: skip(long elementsToSkip)\nJavadoc: @throws IllegalArgumentException if elementsToSkip is negative\nCondition: "
        },
        {
            "condition": "p1.equals(p2)",
            "parameters": [
                "'p1'",
                " 'p2'"
            ],
            "signature": "reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D p1,org.apache.commons.math3.geometry.euclidean.threed.Vector3D p2)",
            "tag": "@throws MathIllegalArgumentException if the points are equal",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D p1,org.apache.commons.math3.geometry.euclidean.threed.Vector3D p2)\nJavadoc: @throws MathIllegalArgumentException if the points are equal\nCondition: "
        },
        {
            "condition": "b==0",
            "parameters": [
                "'a'",
                " 'b'"
            ],
            "signature": "floorMod(int a,int b)",
            "tag": "@throws MathArithmeticException if b == 0",
            "tag_type": "throwsTag",
            "prompt": "Signature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: floorMod(int a,int b)\nJavadoc: @throws MathArithmeticException if b == 0\nCondition: "
        },
        {
            "condition": "e<0",
            "parameters": [
                "'k'",
                " 'e'"
            ],
            "signature": "pow(java.math.BigInteger k,int e)",
            "tag": "@throws NotPositiveException if e < 0.",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: pow(java.math.BigInteger k,int e)\nJavadoc: @throws NotPositiveException if e < 0.\nCondition: "
        },
        {
            "condition": "maxSize<1",
            "parameters": [
                "'maxSize'"
            ],
            "signature": "LRUMap(int maxSize)",
            "tag": "@throws IllegalArgumentException if the maximum size is less than one",
            "tag_type": "throwsTag",
            "prompt": "Signature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: LRUMap(int maxSize)\nJavadoc: @throws IllegalArgumentException if the maximum size is less than one\nCondition: "
        },
        {
            "condition": "expression==false",
            "parameters": [
                "'expression'",
                " 'errorMessageTemplate'",
                " 'errorMessageArgs'"
            ],
            "signature": "verify(boolean expression,java.lang.String errorMessageTemplate,java.lang.Object[] errorMessageArgs)",
            "tag": "@throws VerifyException if expression is false",
            "tag_type": "throwsTag",
            "prompt": "Signature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: verify(boolean expression,java.lang.String errorMessageTemplate,java.lang.Object[] errorMessageArgs)\nJavadoc: @throws VerifyException if expression is false\nCondition: "
        },
        {
            "condition": "bag==null || transformer==null",
            "parameters": [
                "'bag'",
                " 'transformer'"
            ],
            "signature": "transformingSortedBag(org.apache.commons.collections4.SortedBag bag,org.apache.commons.collections4.Transformer transformer)",
            "tag": "@throws NullPointerException if the Bag or Transformer is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: transformingSortedBag(org.apache.commons.collections4.SortedBag bag,org.apache.commons.collections4.Transformer transformer)\nJavadoc: @throws NullPointerException if the Bag or Transformer is null\nCondition: "
        },
        {
            "condition": "end<start",
            "parameters": [
                "'visitor'",
                " 'start'",
                " 'end'"
            ],
            "signature": "walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor visitor,int start,int end)",
            "tag": "@throws NumberIsTooSmallException if end < start.",
            "tag_type": "throwsTag",
            "prompt": "Signature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor visitor,int start,int end)\nJavadoc: @throws NumberIsTooSmallException if end < start.\nCondition: "
        },
        {
            "condition": "bag==null",
            "parameters": [
                "'bag'"
            ],
            "signature": "SynchronizedBag(org.apache.commons.collections4.Bag bag)",
            "tag": "@throws NullPointerException if bag is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: SynchronizedBag(org.apache.commons.collections4.Bag bag)\nJavadoc: @throws NullPointerException if bag is null\nCondition: "
        },
        {
            "condition": "java.util.Arrays.stream(predicates).anyMatch(e->e==null)",
            "parameters": [
                "'predicates'"
            ],
            "signature": "allPredicate(org.apache.commons.collections4.Predicate[] predicates)",
            "tag": "@throws NullPointerException if any predicate in the array is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: allPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: "
        },
        {
            "condition": "value>Short.MAX_VALUE || value<Short.MIN_VALUE",
            "parameters": [
                "'value'"
            ],
            "signature": "checkedCast(long value)",
            "tag": "@throws IllegalArgumentException if value is greater than Short.MAX_VALUE or less than Short.MIN_VALUE",
            "tag_type": "throwsTag",
            "prompt": "Signature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: checkedCast(long value)\nJavadoc: @throws IllegalArgumentException if value is greater than Short.MAX_VALUE or less than Short.MIN_VALUE\nCondition: "
        },
        {
            "condition": "e<0",
            "parameters": [
                "'k'",
                " 'e'"
            ],
            "signature": "pow(int k,long e)",
            "tag": "@throws NotPositiveException if e < 0.",
            "tag_type": "throwsTag",
            "prompt": "Signature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: pow(int k,long e)\nJavadoc: @throws NotPositiveException if e < 0.\nCondition: "
        },
        {
            "condition": "(plume.RegexUtil.isRegex(s, groups)) == false",
            "parameters": [
                "'s'",
                " 'groups'"
            ],
            "signature": "asRegex(java.lang.String s,int groups)",
            "tag": "@throws Error if argument is not a regex",
            "tag_type": "throwsTag",
            "prompt": "Signature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: asRegex(java.lang.String s,int groups)\nJavadoc: @throws Error if argument is not a regex\nCondition: "
        },
        {
            "condition": "initialCapacity<0 || loadFactor<=0",
            "parameters": [
                "'initialCapacity'",
                " 'loadFactor'"
            ],
            "signature": "WeakHasherMap(int initialCapacity,float loadFactor)",
            "tag": "@throws IllegalArgumentException If the initial capacity is less than zero, or if the load factor is nonpositive",
            "tag_type": "throwsTag",
            "prompt": "Signature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: WeakHasherMap(int initialCapacity,float loadFactor)\nJavadoc: @throws IllegalArgumentException If the initial capacity is less than zero, or if the load factor is nonpositive\nCondition: "
        },
        {
            "condition": "vertex==null",
            "parameters": [
                "'vertex'"
            ],
            "signature": "edgesOf(java.lang.Object vertex)",
            "tag": "@throws NullPointerException if vertex is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: edgesOf(java.lang.Object vertex)\nJavadoc: @throws NullPointerException if vertex is null.\nCondition: "
        },
        {
            "condition": "(n>0) == false",
            "parameters": [
                "'n'"
            ],
            "signature": "nextLong(long n)",
            "tag": "@throws IllegalArgumentException if n is not positive.",
            "tag_type": "throwsTag",
            "prompt": "Signature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextLong(long n)\nJavadoc: @throws IllegalArgumentException if n is not positive.\nCondition: "
        },
        {
            "condition": "player==null || player==receiverObjectID",
            "parameters": [
                "'player'",
                " 'newStance'"
            ],
            "signature": "setStance(net.sf.freecol.common.model.Player player,net.sf.freecol.common.model.Stance newStance)",
            "tag": "@throws IllegalArgumentException if player is null or this.",
            "tag_type": "throwsTag",
            "prompt": "Signature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: setStance(net.sf.freecol.common.model.Player player,net.sf.freecol.common.model.Stance newStance)\nJavadoc: @throws IllegalArgumentException if player is null or this.\nCondition: "
        },
        {
            "condition": "k>n",
            "parameters": [
                "'n'",
                " 'k'"
            ],
            "signature": "binomialCoefficientDouble(int n,int k)",
            "tag": "@throws NumberIsTooLargeException if k > n.",
            "tag_type": "throwsTag",
            "prompt": "Signature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: binomialCoefficientDouble(int n,int k)\nJavadoc: @throws NumberIsTooLargeException if k > n.\nCondition: "
        },
        {
            "condition": "count<0",
            "parameters": [
                "'element'",
                " 'count'"
            ],
            "signature": "setCount(java.lang.Object element,int count)",
            "tag": "@throws IllegalArgumentException if count is negative",
            "tag_type": "throwsTag",
            "prompt": "Signature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: setCount(java.lang.Object element,int count)\nJavadoc: @throws IllegalArgumentException if count is negative\nCondition: "
        },
        {
            "condition": "shape<=0 || scale<=0",
            "parameters": [
                "'shape'",
                " 'scale'"
            ],
            "signature": "nextWeibull(double shape,double scale)",
            "tag": "@throws NotStrictlyPositiveException if shape <= 0 or scale <= 0.",
            "tag_type": "throwsTag",
            "prompt": "Signature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextWeibull(double shape,double scale)\nJavadoc: @throws NotStrictlyPositiveException if shape <= 0 or scale <= 0.\nCondition: "
        },
        {
            "condition": "loadFactor<0",
            "parameters": [
                "'initialCapacity'",
                " 'loadFactor'"
            ],
            "signature": "org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)",
            "tag": "@throws IllegalArgumentException the load factor is less than zero.",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: "
        },
        {
            "condition": "a==null || m==null || b==null",
            "parameters": [
                "'a'",
                " 'm'",
                " 'b'"
            ],
            "signature": "solve(org.apache.commons.math3.linear.RealLinearOperator a, org.apache.commons.math3.linear.RealLinearOperator m, org.apache.commons.math3.linear.RealVector b)",
            "tag": "@throws NullArgumentException one of the parameters is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: solve(org.apache.commons.math3.linear.RealLinearOperator a, org.apache.commons.math3.linear.RealLinearOperator m, org.apache.commons.math3.linear.RealVector b)\nJavadoc: @throws NullArgumentException one of the parameters is null.\nCondition: "
        },
        {
            "condition": "bag==null || predicate==null",
            "parameters": [
                "'bag'",
                " 'predicate'"
            ],
            "signature": "predicatedBag(org.apache.commons.collections4.Bag bag,org.apache.commons.collections4.Predicate predicate)",
            "tag": "@throws NullPointerException if the Bag or Predicate is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: predicatedBag(org.apache.commons.collections4.Bag bag,org.apache.commons.collections4.Predicate predicate)\nJavadoc: @throws NullPointerException if the Bag or Predicate is null\nCondition: "
        },
        {
            "condition": "function==null",
            "parameters": [
                "'function'",
                " 'initial'",
                " 'lowerBound'",
                " 'upperBound'",
                " 'maximumIterations'"
            ],
            "signature": "bracket(org.apache.commons.math3.analysis.UnivariateFunction function,double initial,double lowerBound,double upperBound,int maximumIterations)",
            "tag": "@throws NullArgumentException if function is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: bracket(org.apache.commons.math3.analysis.UnivariateFunction function,double initial,double lowerBound,double upperBound,int maximumIterations)\nJavadoc: @throws NullArgumentException if function is null.\nCondition: "
        },
        {
            "condition": "x.length != y.length",
            "parameters": [
                "'x'",
                " 'y'"
            ],
            "signature": "interpolate(double[] x,double[] y)",
            "tag": "@throws DimensionMismatchException if the array lengths are different.",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: interpolate(double[] x,double[] y)\nJavadoc: @throws DimensionMismatchException if the array lengths are different.\nCondition: "
        },
        {
            "condition": "df<=0",
            "parameters": [
                "'df'"
            ],
            "signature": "nextT(double df)",
            "tag": "@throws NotStrictlyPositiveException if df <= 0",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextT(double df)\nJavadoc: @throws NotStrictlyPositiveException if df <= 0\nCondition: "
        },
        {
            "condition": "bytes.length<2",
            "parameters": [
                "'bytes'"
            ],
            "signature": "fromByteArray(byte[] bytes)",
            "tag": "@throws IllegalArgumentException if bytes has fewer than 2 elements",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: fromByteArray(byte[] bytes)\nJavadoc: @throws IllegalArgumentException if bytes has fewer than 2 elements\nCondition: "
        },
        {
            "condition": "receiverObjectID.isLocked()",
            "parameters": [
                "'obj'"
            ],
            "signature": "add(java.lang.Object obj)",
            "tag": "@throws UnsupportedOperationException if a comparison has already been made",
            "tag_type": "throwsTag",
            "prompt": "Signature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: add(java.lang.Object obj)\nJavadoc: @throws UnsupportedOperationException if a comparison has already been made\nCondition: "
        },
        {
            "condition": "fraction==null",
            "parameters": [
                "'fraction'"
            ],
            "signature": "subtract(org.apache.commons.math3.fraction.Fraction fraction)",
            "tag": "@throws NullArgumentException if the fraction is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: subtract(org.apache.commons.math3.fraction.Fraction fraction)\nJavadoc: @throws NullArgumentException if the fraction is null\nCondition: "
        },
        {
            "condition": "x==null || y==null",
            "parameters": [
                "'x'",
                " 'y'"
            ],
            "signature": "StepFunction(double[] x,double[] y)",
            "tag": "@throws NullArgumentException if x or y are null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: StepFunction(double[] x,double[] y)\nJavadoc: @throws NullArgumentException if x or y are null.\nCondition: "
        },
        {
            "condition": "den==0",
            "parameters": [
                "'num'",
                " 'den'"
            ],
            "signature": "Fraction(int num,int den)",
            "tag": "@throws MathArithmeticException if the denominator is zero",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: Fraction(int num,int den)\nJavadoc: @throws MathArithmeticException if the denominator is zero\nCondition: "
        },
        {
            "condition": "n<0",
            "parameters": [
                "'n'",
                " 'k'"
            ],
            "signature": "binomialCoefficientDouble(int n,int k)",
            "tag": "@throws NotPositiveException if n < 0.",
            "tag_type": "throwsTag",
            "prompt": "Signature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: binomialCoefficientDouble(int n,int k)\nJavadoc: @throws NotPositiveException if n < 0.\nCondition: "
        },
        {
            "condition": "n<=0",
            "parameters": [
                "'k'",
                " 'm'",
                " 'b'",
                " 'q'",
                " 'a'",
                " 'n'"
            ],
            "signature": "Logistic(double k,double m,double b,double q,double a,double n)",
            "tag": "@throws NotStrictlyPositiveException if n <= 0.",
            "tag_type": "throwsTag",
            "prompt": "Signature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: Logistic(double k,double m,double b,double q,double a,double n)\nJavadoc: @throws NotStrictlyPositiveException if n <= 0.\nCondition: "
        },
        {
            "condition": "a.length==0",
            "parameters": [
                "'a'"
            ],
            "signature": "element_range(long[] a)",
            "tag": "@throws ArrayIndexOutOfBoundsException if the array has length 0",
            "tag_type": "throwsTag",
            "prompt": "Signature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: element_range(long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: "
        },
        {
            "condition": "inputCollection==null",
            "parameters": [
                "'inputCollection'",
                " 'transformer'"
            ],
            "signature": "collect(java.lang.Iterable inputCollection,org.apache.commons.collections4.Transformer transformer)",
            "tag": "@throws NullPointerException if the input collection is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: collect(java.lang.Iterable inputCollection,org.apache.commons.collections4.Transformer transformer)\nJavadoc: @throws NullPointerException if the input collection is null\nCondition: "
        },
        {
            "condition": "loadFactor<0",
            "parameters": [
                "'maxSize'",
                " 'loadFactor'",
                " 'scanUntilRemovable'"
            ],
            "signature": "LRUMap(int maxSize,float loadFactor,boolean scanUntilRemovable)",
            "tag": "@throws IllegalArgumentException if the load factor is less than zero",
            "tag_type": "throwsTag",
            "prompt": "Signature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: LRUMap(int maxSize,float loadFactor,boolean scanUntilRemovable)\nJavadoc: @throws IllegalArgumentException if the load factor is less than zero\nCondition: "
        },
        {
            "condition": "predicates==null",
            "parameters": [
                "'predicates'"
            ],
            "signature": "allPredicate(java.util.Collection predicates)",
            "tag": "@throws NullPointerException if the predicates array is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: allPredicate(java.util.Collection predicates)\nJavadoc: @throws NullPointerException if the predicates array is null\nCondition: "
        },
        {
            "condition": "methodName==null",
            "parameters": [
                "'methodName'"
            ],
            "signature": "invokerClosure(java.lang.String methodName)",
            "tag": "@throws NullPointerException if the method name is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: invokerClosure(java.lang.String methodName)\nJavadoc: @throws NullPointerException if the method name is null\nCondition: "
        },
        {
            "condition": "weights!=null && bases.length!=weights.length",
            "parameters": [
                "'dimension'",
                " 'bases'",
                " 'weights'"
            ],
            "signature": "org.apache.commons.math3.random.HaltonSequenceGenerator(int dimension, int[] bases, int[] weights)",
            "tag": "@throws DimensionMismatchException weights is !=null and the length of the input arrays differ.",
            "tag_type": "throwsTag",
            "prompt": "Signature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: org.apache.commons.math3.random.HaltonSequenceGenerator(int dimension, int[] bases, int[] weights)\nJavadoc: @throws DimensionMismatchException weights is !=null and the length of the input arrays differ.\nCondition: "
        },
        {
            "condition": "n<0",
            "parameters": [
                "'n'"
            ],
            "signature": "factorialDouble(int n)",
            "tag": "@throws NotPositiveException if n < 0.",
            "tag_type": "throwsTag",
            "prompt": "Signature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: factorialDouble(int n)\nJavadoc: @throws NotPositiveException if n < 0.\nCondition: "
        },
        {
            "condition": "transformer==null || predicate==null",
            "parameters": [
                "'transformer'",
                " 'predicate'"
            ],
            "signature": "transformedPredicate(org.apache.commons.collections4.Transformer transformer,org.apache.commons.collections4.Predicate predicate)",
            "tag": "@throws NullPointerException if the transformer or the predicate is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: transformedPredicate(org.apache.commons.collections4.Transformer transformer,org.apache.commons.collections4.Predicate predicate)\nJavadoc: @throws NullPointerException if the transformer or the predicate is null\nCondition: "
        },
        {
            "condition": "pivotingStrategy==null",
            "parameters": [
                "'pivotingStrategy'"
            ],
            "signature": "org.apache.commons.math3.util.KthSelector(org.apache.commons.math3.util.PivotingStrategyInterface pivotingStrategy)",
            "tag": "@throws NullArgumentException when pivotingStrategy is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: org.apache.commons.math3.util.KthSelector(org.apache.commons.math3.util.PivotingStrategyInterface pivotingStrategy)\nJavadoc: @throws NullArgumentException when pivotingStrategy is null.\nCondition: "
        },
        {
            "condition": "initialSize<0",
            "parameters": [
                "'initialSize'"
            ],
            "signature": "ArrayStack(int initialSize)",
            "tag": "@throws IllegalArgumentException if the specified initial size is negative",
            "tag_type": "throwsTag",
            "prompt": "Signature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: ArrayStack(int initialSize)\nJavadoc: @throws IllegalArgumentException if the specified initial size is negative\nCondition: "
        },
        {
            "condition": "original==null",
            "parameters": [
                "'original'"
            ],
            "signature": "org.apache.commons.math3.stat.descriptive.summary.Sum(org.apache.commons.math3.stat.descriptive.summary.Sum original)",
            "tag": "@throws NullArgumentException original is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: org.apache.commons.math3.stat.descriptive.summary.Sum(org.apache.commons.math3.stat.descriptive.summary.Sum original)\nJavadoc: @throws NullArgumentException original is null.\nCondition: "
        },
        {
            "condition": "maxIter<=0",
            "parameters": [
                "'relativeThreshold'",
                " 'absoluteThreshold'",
                " 'maxIter'"
            ],
            "signature": "org.apache.commons.math3.optimization.SimpleValueChecker(double relativeThreshold, double absoluteThreshold, int maxIter)",
            "tag": "@throws NotStrictlyPositiveException maxIter <= 0.",
            "tag_type": "throwsTag",
            "prompt": "Signature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: org.apache.commons.math3.optimization.SimpleValueChecker(double relativeThreshold, double absoluteThreshold, int maxIter)\nJavadoc: @throws NotStrictlyPositiveException maxIter <= 0.\nCondition: "
        },
        {
            "condition": "true",
            "parameters": [
                ""
            ],
            "signature": "pollLastEntry()",
            "tag": "@throws UnsupportedOperationException always.",
            "tag_type": "throwsTag",
            "prompt": "Signature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: pollLastEntry()\nJavadoc: @throws UnsupportedOperationException always.\nCondition: "
        },
        {
            "condition": "initialCapacity<0 || loadFactor<=0",
            "parameters": [
                "'initialCapacity'",
                " 'loadFactor'"
            ],
            "signature": "WeakIdentityHashMap(int initialCapacity,float loadFactor)",
            "tag": "@throws IllegalArgumentException If the initial capacity is negative, or if the load factor is nonpositive.",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: WeakIdentityHashMap(int initialCapacity,float loadFactor)\nJavadoc: @throws IllegalArgumentException If the initial capacity is negative, or if the load factor is nonpositive.\nCondition: "
        },
        {
            "condition": "predicates.contains(null)",
            "parameters": [
                "'predicates'"
            ],
            "signature": "onePredicate(java.util.Collection predicates)",
            "tag": "@throws NullPointerException if any predicate in the collection is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: onePredicate(java.util.Collection predicates)\nJavadoc: @throws NullPointerException if any predicate in the collection is null\nCondition: "
        },
        {
            "condition": "shape<=0 || scale<=0",
            "parameters": [
                "'shape'",
                " 'scale'"
            ],
            "signature": "nextGamma(double shape,double scale)",
            "tag": "@throws NotStrictlyPositiveException if shape <= 0 or scale <= 0.",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextGamma(double shape,double scale)\nJavadoc: @throws NotStrictlyPositiveException if shape <= 0 or scale <= 0.\nCondition: "
        },
        {
            "condition": "n<2",
            "parameters": [
                "'n'"
            ],
            "signature": "primeFactors(int n)",
            "tag": "@throws MathIllegalArgumentException if n < 2.",
            "tag_type": "throwsTag",
            "prompt": "Signature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: primeFactors(int n)\nJavadoc: @throws MathIllegalArgumentException if n < 2.\nCondition: "
        },
        {
            "condition": "a==null || b==null || c==null",
            "parameters": [
                "'a'",
                " 'b'",
                " 'c'",
                " 'includeDuplicates'"
            ],
            "signature": "collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c,boolean includeDuplicates)",
            "tag": "@throws NullPointerException if either collection or the comparator is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c,boolean includeDuplicates)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: "
        },
        {
            "condition": "b==0",
            "parameters": [
                "'a'",
                " 'b'"
            ],
            "signature": "floorDiv(long a,long b)",
            "tag": "@throws MathArithmeticException if b == 0",
            "tag_type": "throwsTag",
            "prompt": "Signature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: floorDiv(long a,long b)\nJavadoc: @throws MathArithmeticException if b == 0\nCondition: "
        },
        {
            "condition": "receiverObjectID.getNorm()==0",
            "parameters": [
                ""
            ],
            "signature": "normalize()",
            "tag": "@throws MathArithmeticException the norm is zero.",
            "tag_type": "throwsTag",
            "prompt": "Signature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: normalize()\nJavadoc: @throws MathArithmeticException the norm is zero.\nCondition: "
        },
        {
            "condition": "collection==null || collection.contains(null)",
            "parameters": [
                "'collection'"
            ],
            "signature": "toArray(java.util.Collection collection)",
            "tag": "@throws NullPointerException if collection or any of its elements is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: toArray(java.util.Collection collection)\nJavadoc: @throws NullPointerException if collection or any of its elements is null\nCondition: "
        },
        {
            "condition": "((x.length) == (y.length)) == false",
            "parameters": [
                "'x'",
                " 'y'"
            ],
            "signature": "interpolate(double[] x,double[] y)",
            "tag": "@throws DimensionMismatchException if x and y have different sizes.",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: interpolate(double[] x,double[] y)\nJavadoc: @throws DimensionMismatchException if x and y have different sizes.\nCondition: "
        },
        {
            "condition": "predicate==null",
            "parameters": [
                "'predicate'"
            ],
            "signature": "anyMatch(org.apache.commons.collections4.Predicate predicate)",
            "tag": "@throws NullPointerException if predicate is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: anyMatch(org.apache.commons.collections4.Predicate predicate)\nJavadoc: @throws NullPointerException if predicate is null\nCondition: "
        },
        {
            "condition": "e<0",
            "parameters": [
                "'k'",
                " 'e'"
            ],
            "signature": "pow(long k,int e)",
            "tag": "@throws NotPositiveException if e < 0.",
            "tag_type": "throwsTag",
            "prompt": "Signature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: pow(long k,int e)\nJavadoc: @throws NotPositiveException if e < 0.\nCondition: "
        },
        {
            "condition": "n<0",
            "parameters": [
                "'f'",
                " 'min'",
                " 'max'",
                " 'n'"
            ],
            "signature": "sample(org.apache.commons.math3.analysis.UnivariateFunction f,double min,double max,int n)",
            "tag": "@throws NotStrictlyPositiveException if the number of sample points n is negative.",
            "tag_type": "throwsTag",
            "prompt": "Signature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: sample(org.apache.commons.math3.analysis.UnivariateFunction f,double min,double max,int n)\nJavadoc: @throws NotStrictlyPositiveException if the number of sample points n is negative.\nCondition: "
        },
        {
            "condition": "collection==null || collection.contains(null)",
            "parameters": [
                "'collection'"
            ],
            "signature": "toArray(java.util.Collection collection)",
            "tag": "@throws NullPointerException if collection or any of its elements is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: toArray(java.util.Collection collection)\nJavadoc: @throws NullPointerException if collection or any of its elements is null\nCondition: "
        },
        {
            "condition": "graph==null",
            "parameters": [
                "'graph'"
            ],
            "signature": "setGraph(org.jgrapht.DirectedGraph graph)",
            "tag": "@throws IllegalArgumentException if the argument is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: setGraph(org.jgrapht.DirectedGraph graph)\nJavadoc: @throws IllegalArgumentException if the argument is null.\nCondition: "
        },
        {
            "condition": "predicates==null || closures==null",
            "parameters": [
                "'predicates'",
                " 'closures'"
            ],
            "signature": "switchClosure(org.apache.commons.collections4.Predicate[] predicates,org.apache.commons.collections4.Closure[] closures)",
            "tag": "@throws NullPointerException if the either array is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: switchClosure(org.apache.commons.collections4.Predicate[] predicates,org.apache.commons.collections4.Closure[] closures)\nJavadoc: @throws NullPointerException if the either array is null\nCondition: "
        },
        {
            "condition": "function==null",
            "parameters": [
                "'function'",
                " 'x0'",
                " 'x1'",
                " 'absoluteAccuracy'"
            ],
            "signature": "solve(org.apache.commons.math3.analysis.UnivariateFunction function,double x0,double x1,double absoluteAccuracy)",
            "tag": "@throws NullArgumentException if function is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: solve(org.apache.commons.math3.analysis.UnivariateFunction function,double x0,double x1,double absoluteAccuracy)\nJavadoc: @throws NullArgumentException if function is null.\nCondition: "
        },
        {
            "condition": "eps<0.0 || minPts<0",
            "parameters": [
                "'eps'",
                " 'minPts'"
            ],
            "signature": "org.apache.commons.math3.stat.clustering.DBSCANClusterer(double eps, int minPts)",
            "tag": "@throws NotPositiveException eps < 0.0 or minPts < 0.",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: org.apache.commons.math3.stat.clustering.DBSCANClusterer(double eps, int minPts)\nJavadoc: @throws NotPositiveException eps < 0.0 or minPts < 0.\nCondition: "
        },
        {
            "condition": "vertices==null",
            "parameters": [
                "'vertices'"
            ],
            "signature": "removeAllVertices(java.util.Collection vertices)",
            "tag": "@throws NullPointerException if the specified vertex collection is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: removeAllVertices(java.util.Collection vertices)\nJavadoc: @throws NullPointerException if the specified vertex collection is null.\nCondition: "
        },
        {
            "condition": "occurrences<0",
            "parameters": [
                "'element'",
                " 'occurrences'"
            ],
            "signature": "removeExactly(java.lang.Object element,int occurrences)",
            "tag": "@throws IllegalArgumentException if occurrences is negative",
            "tag_type": "throwsTag",
            "prompt": "Signature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: removeExactly(java.lang.Object element,int occurrences)\nJavadoc: @throws IllegalArgumentException if occurrences is negative\nCondition: "
        },
        {
            "condition": "predicate==null",
            "parameters": [
                "'predicate'"
            ],
            "signature": "nullIsFalsePredicate(org.apache.commons.collections4.Predicate predicate)",
            "tag": "@throws NullPointerException if the predicate is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nullIsFalsePredicate(org.apache.commons.collections4.Predicate predicate)\nJavadoc: @throws NullPointerException if the predicate is null.\nCondition: "
        },
        {
            "condition": "(n>0) == false",
            "parameters": [
                "'n'"
            ],
            "signature": "nextInt(int n)",
            "tag": "@throws IllegalArgumentException if n is not positive.",
            "tag_type": "throwsTag",
            "prompt": "Signature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextInt(int n)\nJavadoc: @throws IllegalArgumentException if n is not positive.\nCondition: "
        },
        {
            "condition": "function==null",
            "parameters": [
                "'function'",
                " 'initial'",
                " 'lowerBound'",
                " 'upperBound'"
            ],
            "signature": "bracket(org.apache.commons.math3.analysis.UnivariateFunction function,double initial,double lowerBound,double upperBound)",
            "tag": "@throws NullArgumentException if function is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: bracket(org.apache.commons.math3.analysis.UnivariateFunction function,double initial,double lowerBound,double upperBound)\nJavadoc: @throws NullArgumentException if function is null.\nCondition: "
        },
        {
            "condition": "p1.equals(p2)",
            "parameters": [
                "'p1'",
                " 'p2'",
                " 'tolerance'"
            ],
            "signature": "Line(org.apache.commons.math3.geometry.euclidean.threed.Vector3D p1,org.apache.commons.math3.geometry.euclidean.threed.Vector3D p2,double tolerance)",
            "tag": "@throws MathIllegalArgumentException if the points are equal",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: Line(org.apache.commons.math3.geometry.euclidean.threed.Vector3D p1,org.apache.commons.math3.geometry.euclidean.threed.Vector3D p2,double tolerance)\nJavadoc: @throws MathIllegalArgumentException if the points are equal\nCondition: "
        },
        {
            "condition": "other==null",
            "parameters": [
                "'other'"
            ],
            "signature": "zip(java.lang.Iterable other)",
            "tag": "@throws NullPointerException if other is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: zip(java.lang.Iterable other)\nJavadoc: @throws NullPointerException if other is null\nCondition: "
        },
        {
            "condition": "end<start",
            "parameters": [
                "'visitor'",
                " 'start'",
                " 'end'"
            ],
            "signature": "walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor visitor,int start,int end)",
            "tag": "@throws NumberIsTooSmallException if end < start.",
            "tag_type": "throwsTag",
            "prompt": "Signature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor visitor,int start,int end)\nJavadoc: @throws NumberIsTooSmallException if end < start.\nCondition: "
        },
        {
            "condition": "x.length != y.length",
            "parameters": [
                "'x'",
                " 'y'"
            ],
            "signature": "computeDividedDifference(double[] x,double[] y)",
            "tag": "@throws DimensionMismatchException if the array lengths are different.",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: computeDividedDifference(double[] x,double[] y)\nJavadoc: @throws DimensionMismatchException if the array lengths are different.\nCondition: "
        },
        {
            "condition": "occurrences<0",
            "parameters": [
                "'element'",
                " 'occurrences'"
            ],
            "signature": "remove(java.lang.Object element,int occurrences)",
            "tag": "@throws IllegalArgumentException if occurrences is negative",
            "tag_type": "throwsTag",
            "prompt": "Signature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: remove(java.lang.Object element,int occurrences)\nJavadoc: @throws IllegalArgumentException if occurrences is negative\nCondition: "
        },
        {
            "condition": "(n>0) == false",
            "parameters": [
                "'index'",
                " 'n'"
            ],
            "signature": "getSubVector(int index,int n)",
            "tag": "@throws NotPositiveException if the number of elements is not positive.",
            "tag_type": "throwsTag",
            "prompt": "Signature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: getSubVector(int index,int n)\nJavadoc: @throws NotPositiveException if the number of elements is not positive.\nCondition: "
        },
        {
            "condition": "bag==null || lock==null",
            "parameters": [
                "'bag'",
                " 'lock'"
            ],
            "signature": "SynchronizedBag(org.apache.commons.collections4.Bag bag,java.lang.Object lock)",
            "tag": "@throws NullPointerException if bag or lock is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: SynchronizedBag(org.apache.commons.collections4.Bag bag,java.lang.Object lock)\nJavadoc: @throws NullPointerException if bag or lock is null\nCondition: "
        },
        {
            "condition": "a.length==0",
            "parameters": [
                "'a'"
            ],
            "signature": "min_max(long[] a)",
            "tag": "@throws ArrayIndexOutOfBoundsException if the array has length 0",
            "tag_type": "throwsTag",
            "prompt": "Signature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: min_max(long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: "
        },
        {
            "condition": "size<0",
            "parameters": [
                "'size'"
            ],
            "signature": "org.jgrapht.generate.CompleteGraphGenerator(int size)",
            "tag": "@throws IllegalArgumentException the specified size is negative.",
            "tag_type": "throwsTag",
            "prompt": "Signature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: org.jgrapht.generate.CompleteGraphGenerator(int size)\nJavadoc: @throws IllegalArgumentException the specified size is negative.\nCondition: "
        },
        {
            "condition": "denominator==0",
            "parameters": [
                "'numerator'",
                " 'denominator'"
            ],
            "signature": "getReducedFraction(int numerator,int denominator)",
            "tag": "@throws MathArithmeticException if the denominator is zero",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: getReducedFraction(int numerator,int denominator)\nJavadoc: @throws MathArithmeticException if the denominator is zero\nCondition: "
        },
        {
            "condition": "collection==null",
            "parameters": [
                "'collection'"
            ],
            "signature": "permutations(java.util.Collection collection)",
            "tag": "@throws NullPointerException if collection is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: permutations(java.util.Collection collection)\nJavadoc: @throws NullPointerException if collection is null\nCondition: "
        },
        {
            "condition": "b==0",
            "parameters": [
                "'a'",
                " 'b'"
            ],
            "signature": "floorDiv(int a,int b)",
            "tag": "@throws MathArithmeticException if b == 0",
            "tag_type": "throwsTag",
            "prompt": "Signature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: floorDiv(int a,int b)\nJavadoc: @throws MathArithmeticException if b == 0\nCondition: "
        },
        {
            "condition": "maximalIterationCount<=minimalIterationCount",
            "parameters": [
                "'minimalIterationCount'",
                " 'maximalIterationCount'"
            ],
            "signature": "SimpsonIntegrator(int minimalIterationCount,int maximalIterationCount)",
            "tag": "@throws NumberIsTooSmallException if maximal number of iterations is lesser than or equal to the minimal number of iterations",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: SimpsonIntegrator(int minimalIterationCount,int maximalIterationCount)\nJavadoc: @throws NumberIsTooSmallException if maximal number of iterations is lesser than or equal to the minimal number of iterations\nCondition: "
        },
        {
            "condition": "predicate1==null || predicate2==null",
            "parameters": [
                "'predicate1'",
                " 'predicate2'"
            ],
            "signature": "andPredicate(org.apache.commons.collections4.Predicate predicate1,org.apache.commons.collections4.Predicate predicate2)",
            "tag": "@throws NullPointerException if either predicate is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: andPredicate(org.apache.commons.collections4.Predicate predicate1,org.apache.commons.collections4.Predicate predicate2)\nJavadoc: @throws NullPointerException if either predicate is null\nCondition: "
        },
        {
            "condition": "(p>0) == false || (p<=100)==false",
            "parameters": [
                "'p'"
            ],
            "signature": "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile(double p)",
            "tag": "@throws OutOfRangeException p is not greater than 0 and less than or equal to 100.",
            "tag_type": "throwsTag",
            "prompt": "Signature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile(double p)\nJavadoc: @throws OutOfRangeException p is not greater than 0 and less than or equal to 100.\nCondition: "
        },
        {
            "condition": "maxSize<0 || maxSize==0",
            "parameters": [
                "'graph'",
                " 'maxSize'",
                " 'vertex'"
            ],
            "signature": "AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,java.lang.Object vertex)",
            "tag": "@throws IllegalArgumentException if maxSize is negative or 0.",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,java.lang.Object vertex)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: "
        },
        {
            "condition": "receiverObjectID.size()<n",
            "parameters": [
                "'n'"
            ],
            "signature": "peek(int n)",
            "tag": "@throws EmptyStackException if there are not enough items on the stack to satisfy this request",
            "tag_type": "throwsTag",
            "prompt": "Signature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: peek(int n)\nJavadoc: @throws EmptyStackException if there are not enough items on the stack to satisfy this request\nCondition: "
        },
        {
            "condition": "type==null",
            "parameters": [
                "'type'"
            ],
            "signature": "instanceofPredicate(java.lang.Class type)",
            "tag": "@throws NullPointerException if the class is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: instanceofPredicate(java.lang.Class type)\nJavadoc: @throws NullPointerException if the class is null\nCondition: "
        },
        {
            "condition": "predicates==null",
            "parameters": [
                "'predicates'"
            ],
            "signature": "allPredicate(org.apache.commons.collections4.Predicate[] predicates)",
            "tag": "@throws NullPointerException if the predicates array is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: allPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if the predicates array is null\nCondition: "
        },
        {
            "condition": "java.util.Arrays.stream(predicates).anyMatch(e->e==null)",
            "parameters": [
                "'predicates'"
            ],
            "signature": "anyPredicate(org.apache.commons.collections4.Predicate[] predicates)",
            "tag": "@throws NullPointerException if any predicate in the array is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: "
        },
        {
            "condition": "predicatesAndClosures.isEmpty()",
            "parameters": [
                "'predicatesAndClosures'"
            ],
            "signature": "switchClosure(java.util.Map predicatesAndClosures)",
            "tag": "@throws IllegalArgumentException if the map is empty",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: switchClosure(java.util.Map predicatesAndClosures)\nJavadoc: @throws IllegalArgumentException if the map is empty\nCondition: "
        },
        {
            "condition": "equator==null",
            "parameters": [
                "'a'",
                " 'b'",
                " 'equator'"
            ],
            "signature": "isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)",
            "tag": "@throws NullPointerException if the equator is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: "
        },
        {
            "condition": "values==null",
            "parameters": [
                "'values'",
                " 'begin'",
                " 'length'"
            ],
            "signature": "evaluate(double[] values, int begin, int length)",
            "tag": "@throws MathIllegalArgumentException the array is null or the array index parameters are not valid.",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: evaluate(double[] values, int begin, int length)\nJavadoc: @throws MathIllegalArgumentException the array is null or the array index parameters are not valid.\nCondition: "
        },
        {
            "condition": "p1.equals(p2)",
            "parameters": [
                "'p1'",
                " 'p2'"
            ],
            "signature": "Line(org.apache.commons.math3.geometry.euclidean.threed.Vector3D p1,org.apache.commons.math3.geometry.euclidean.threed.Vector3D p2)",
            "tag": "@throws MathIllegalArgumentException if the points are equal",
            "tag_type": "throwsTag",
            "prompt": "Signature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: Line(org.apache.commons.math3.geometry.euclidean.threed.Vector3D p1,org.apache.commons.math3.geometry.euclidean.threed.Vector3D p2)\nJavadoc: @throws MathIllegalArgumentException if the points are equal\nCondition: "
        },
        {
            "condition": "map.entrySet().size()<index || index<0",
            "parameters": [
                "'map'",
                " 'index'"
            ],
            "signature": "get(java.util.Map map,int index)",
            "tag": "@throws IndexOutOfBoundsException if the index is invalid",
            "tag_type": "throwsTag",
            "prompt": "Signature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: get(java.util.Map map,int index)\nJavadoc: @throws IndexOutOfBoundsException if the index is invalid\nCondition: "
        },
        {
            "condition": "a.length==0",
            "parameters": [
                "'a'"
            ],
            "signature": "min(java.lang.Integer[] a)",
            "tag": "@throws ArrayIndexOutOfBoundsException if the array has length 0",
            "tag_type": "throwsTag",
            "prompt": "Signature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: min(java.lang.Integer[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: "
        },
        {
            "condition": "u.getNorm().getReal()==0 || v.getNorm().getReal()==0",
            "parameters": [
                "'u'",
                " 'v'"
            ],
            "signature": "FieldRotation(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D u,org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D v)",
            "tag": "@throws MathArithmeticException if the norm of one of the vectors is zero",
            "tag_type": "throwsTag",
            "prompt": "Signature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D u,org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D v)\nJavadoc: @throws MathArithmeticException if the norm of one of the vectors is zero\nCondition: "
        },
        {
            "condition": "subtrahend==null",
            "parameters": [
                "'subtrahend'"
            ],
            "signature": "subtract(org.apache.commons.math3.complex.Complex subtrahend)",
            "tag": "@throws NullArgumentException if subtrahend is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: subtract(org.apache.commons.math3.complex.Complex subtrahend)\nJavadoc: @throws NullArgumentException if subtrahend is null.\nCondition: "
        },
        {
            "condition": "predicates==null",
            "parameters": [
                "'predicates'"
            ],
            "signature": "allPredicate(org.apache.commons.collections4.Predicate[] predicates)",
            "tag": "@throws NullPointerException if the predicates array is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: allPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if the predicates array is null\nCondition: "
        },
        {
            "condition": "v.getDimension() != receiverObjectID.getDimension()",
            "parameters": [
                "'v'"
            ],
            "signature": "getL1Distance(org.apache.commons.math3.linear.RealVector v)",
            "tag": "@throws DimensionMismatchException if v is not the same size as this vector.",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: getL1Distance(org.apache.commons.math3.linear.RealVector v)\nJavadoc: @throws DimensionMismatchException if v is not the same size as this vector.\nCondition: "
        },
        {
            "condition": "maximumIterations<=0",
            "parameters": [
                "'function'",
                " 'initial'",
                " 'lowerBound'",
                " 'upperBound'",
                " 'maximumIterations'"
            ],
            "signature": "bracket(org.apache.commons.math3.analysis.UnivariateFunction function,double initial,double lowerBound,double upperBound,int maximumIterations)",
            "tag": "@throws NotStrictlyPositiveException if maximumIterations <= 0.",
            "tag_type": "throwsTag",
            "prompt": "Signature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: bracket(org.apache.commons.math3.analysis.UnivariateFunction function,double initial,double lowerBound,double upperBound,int maximumIterations)\nJavadoc: @throws NotStrictlyPositiveException if maximumIterations <= 0.\nCondition: "
        },
        {
            "condition": "maxSize<1",
            "parameters": [
                "'maxSize'",
                " 'loadFactor'"
            ],
            "signature": "LRUMap(int maxSize,float loadFactor)",
            "tag": "@throws IllegalArgumentException if the maximum size is less than one",
            "tag_type": "throwsTag",
            "prompt": "Signature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: LRUMap(int maxSize,float loadFactor)\nJavadoc: @throws IllegalArgumentException if the maximum size is less than one\nCondition: "
        },
        {
            "condition": "s==null",
            "parameters": [
                "'s'",
                " 'index'"
            ],
            "signature": "escapeSlow(java.lang.String s, int index)",
            "tag": "@throws NullPointerException string is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: escapeSlow(java.lang.String s, int index)\nJavadoc: @throws NullPointerException string is null.\nCondition: "
        },
        {
            "condition": "map==null || factory==null",
            "parameters": [
                "'map'",
                " 'factory'"
            ],
            "signature": "org.apache.commons.collections4.map.LazyMap(java.util.Map<K, map, org.apache.commons.collections4.Transformer<? factory)",
            "tag": "@throws NullPointerException map or factory is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: org.apache.commons.collections4.map.LazyMap(java.util.Map<K, map, org.apache.commons.collections4.Transformer<? factory)\nJavadoc: @throws NullPointerException map or factory is null.\nCondition: "
        },
        {
            "condition": "receiverObjectID.getNorm()==0",
            "parameters": [
                ""
            ],
            "signature": "unitize()",
            "tag": "@throws MathArithmeticException if the norm is zero.",
            "tag_type": "throwsTag",
            "prompt": "Signature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: unitize()\nJavadoc: @throws MathArithmeticException if the norm is zero.\nCondition: "
        },
        {
            "condition": "source==null || dest==null",
            "parameters": [
                "'source'",
                " 'dest'"
            ],
            "signature": "copy(org.apache.commons.math3.stat.descriptive.SummaryStatistics source, org.apache.commons.math3.stat.descriptive.SummaryStatistics dest)",
            "tag": "@throws NullArgumentException either source or dest is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: copy(org.apache.commons.math3.stat.descriptive.SummaryStatistics source, org.apache.commons.math3.stat.descriptive.SummaryStatistics dest)\nJavadoc: @throws NullArgumentException either source or dest is null.\nCondition: "
        },
        {
            "condition": "predicate1==null || predicate2==null",
            "parameters": [
                "'predicate1'",
                " 'predicate2'"
            ],
            "signature": "neitherPredicate(org.apache.commons.collections4.Predicate predicate1,org.apache.commons.collections4.Predicate predicate2)",
            "tag": "@throws NullPointerException if either predicate is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: neitherPredicate(org.apache.commons.collections4.Predicate predicate1,org.apache.commons.collections4.Predicate predicate2)\nJavadoc: @throws NullPointerException if either predicate is null\nCondition: "
        },
        {
            "condition": "end<start",
            "parameters": [
                "'visitor'",
                " 'start'",
                " 'end'"
            ],
            "signature": "walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor visitor,int start,int end)",
            "tag": "@throws NumberIsTooSmallException if end < start.",
            "tag_type": "throwsTag",
            "prompt": "Signature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor visitor,int start,int end)\nJavadoc: @throws NumberIsTooSmallException if end < start.\nCondition: "
        },
        {
            "condition": "fraction==(org.apache.commons.math3.fraction.Fraction.ZERO)",
            "parameters": [
                "'fraction'"
            ],
            "signature": "divide(org.apache.commons.math3.fraction.Fraction fraction)",
            "tag": "@throws MathArithmeticException if the fraction to divide by is zero",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: divide(org.apache.commons.math3.fraction.Fraction fraction)\nJavadoc: @throws MathArithmeticException if the fraction to divide by is zero\nCondition: "
        },
        {
            "condition": "((x.length) == (y.length)) == false",
            "parameters": [
                "'x'",
                " 'y'"
            ],
            "signature": "StepFunction(double[] x,double[] y)",
            "tag": "@throws DimensionMismatchException if x and y do not have the same length.",
            "tag_type": "throwsTag",
            "prompt": "Signature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: StepFunction(double[] x,double[] y)\nJavadoc: @throws DimensionMismatchException if x and y do not have the same length.\nCondition: "
        },
        {
            "condition": "e<0",
            "parameters": [
                "'k'",
                " 'e'"
            ],
            "signature": "pow(java.math.BigInteger k,java.math.BigInteger e)",
            "tag": "@throws NotPositiveException if e < 0.",
            "tag_type": "throwsTag",
            "prompt": "Signature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: pow(java.math.BigInteger k,java.math.BigInteger e)\nJavadoc: @throws NotPositiveException if e < 0.\nCondition: "
        },
        {
            "condition": "bag==null || transformer==null",
            "parameters": [
                "'bag'",
                " 'transformer'"
            ],
            "signature": "transformingBag(org.apache.commons.collections4.Bag bag,org.apache.commons.collections4.Transformer transformer)",
            "tag": "@throws NullPointerException if the Bag or Transformer is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: transformingBag(org.apache.commons.collections4.Bag bag,org.apache.commons.collections4.Transformer transformer)\nJavadoc: @throws NullPointerException if the Bag or Transformer is null\nCondition: "
        },
        {
            "condition": "array.length==0",
            "parameters": [
                "'array'"
            ],
            "signature": "max(double[] array)",
            "tag": "@throws IllegalArgumentException if array is empty",
            "tag_type": "throwsTag",
            "prompt": "Signature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: max(double[] array)\nJavadoc: @throws IllegalArgumentException if array is empty\nCondition: "
        },
        {
            "condition": "collection==null || iterable==null",
            "parameters": [
                "'collection'",
                " 'iterable'"
            ],
            "signature": "addAll(java.util.Collection collection,java.lang.Iterable iterable)",
            "tag": "@throws NullPointerException if the collection or iterator is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.lang.Iterable iterable)\nJavadoc: @throws NullPointerException if the collection or iterator is null\nCondition: "
        },
        {
            "condition": "array==null",
            "parameters": [
                "'array'"
            ],
            "signature": "AtomicDoubleArray(double[] array)",
            "tag": "@throws NullPointerException if array is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: AtomicDoubleArray(double[] array)\nJavadoc: @throws NullPointerException if array is null\nCondition: "
        },
        {
            "condition": "maxSize<1",
            "parameters": [
                "'maxSize'",
                " 'initialSize'"
            ],
            "signature": "LRUMap(int maxSize,int initialSize)",
            "tag": "@throws IllegalArgumentException if the maximum size is less than one",
            "tag_type": "throwsTag",
            "prompt": "Signature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: LRUMap(int maxSize,int initialSize)\nJavadoc: @throws IllegalArgumentException if the maximum size is less than one\nCondition: "
        },
        {
            "condition": "a==null || m==null || b==null || x0==null",
            "parameters": [
                "'a'",
                " 'm'",
                " 'b'",
                " 'x0'"
            ],
            "signature": "solveInPlace(org.apache.commons.math3.linear.RealLinearOperator a, org.apache.commons.math3.linear.RealLinearOperator m, org.apache.commons.math3.linear.RealVector b, org.apache.commons.math3.linear.RealVector x0)",
            "tag": "@throws NullArgumentException one of the parameters is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: solveInPlace(org.apache.commons.math3.linear.RealLinearOperator a, org.apache.commons.math3.linear.RealLinearOperator m, org.apache.commons.math3.linear.RealVector b, org.apache.commons.math3.linear.RealVector x0)\nJavadoc: @throws NullArgumentException one of the parameters is null.\nCondition: "
        },
        {
            "condition": "collection==null || elements==null",
            "parameters": [
                "'collection'",
                " 'elements'"
            ],
            "signature": "addAll(java.util.Collection collection,java.lang.Object[] elements)",
            "tag": "@throws NullPointerException if the collection or array is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.lang.Object[] elements)\nJavadoc: @throws NullPointerException if the collection or array is null\nCondition: "
        },
        {
            "condition": "((xval.length) == (yval.length)) == false",
            "parameters": [
                "'xval'",
                " 'yval'"
            ],
            "signature": "smooth(double[] xval,double[] yval)",
            "tag": "@throws DimensionMismatchException if xval and yval have different sizes.",
            "tag_type": "throwsTag",
            "prompt": "Signature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: smooth(double[] xval,double[] yval)\nJavadoc: @throws DimensionMismatchException if xval and yval have different sizes.\nCondition: "
        },
        {
            "condition": "minLength<0 || padding<0",
            "parameters": [
                "'array'",
                " 'minLength'",
                " 'padding'"
            ],
            "signature": "ensureCapacity(short[] array,int minLength,int padding)",
            "tag": "@throws IllegalArgumentException if minLength or padding is negative",
            "tag_type": "throwsTag",
            "prompt": "Signature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: ensureCapacity(short[] array,int minLength,int padding)\nJavadoc: @throws IllegalArgumentException if minLength or padding is negative\nCondition: "
        },
        {
            "condition": "collection==null || remove==null",
            "parameters": [
                "'collection'",
                " 'remove'"
            ],
            "signature": "removeAll(java.util.Collection collection,java.util.Collection remove)",
            "tag": "@throws NullPointerException if either parameter is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: removeAll(java.util.Collection collection,java.util.Collection remove)\nJavadoc: @throws NullPointerException if either parameter is null\nCondition: "
        },
        {
            "condition": "methodName==null",
            "parameters": [
                "'methodName'"
            ],
            "signature": "invokerPredicate(java.lang.String methodName)",
            "tag": "@throws NullPointerException if the methodName is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: invokerPredicate(java.lang.String methodName)\nJavadoc: @throws NullPointerException if the methodName is null.\nCondition: "
        },
        {
            "condition": "fraction==(org.apache.commons.math3.fraction.BigFraction.ZERO)",
            "parameters": [
                "'fraction'"
            ],
            "signature": "divide(org.apache.commons.math3.fraction.BigFraction fraction)",
            "tag": "@throws MathArithmeticException if the fraction to divide by is zero",
            "tag_type": "throwsTag",
            "prompt": "Signature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: divide(org.apache.commons.math3.fraction.BigFraction fraction)\nJavadoc: @throws MathArithmeticException if the fraction to divide by is zero\nCondition: "
        },
        {
            "condition": "bag==null",
            "parameters": [
                "'bag'"
            ],
            "signature": "unmodifiableBag(org.apache.commons.collections4.Bag bag)",
            "tag": "@throws NullPointerException if the Bag is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: unmodifiableBag(org.apache.commons.collections4.Bag bag)\nJavadoc: @throws NullPointerException if the Bag is null\nCondition: "
        },
        {
            "condition": "fraction==null",
            "parameters": [
                "'fraction'"
            ],
            "signature": "subtract(org.apache.commons.math3.fraction.BigFraction fraction)",
            "tag": "@throws NullArgumentException if the fraction is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: subtract(org.apache.commons.math3.fraction.BigFraction fraction)\nJavadoc: @throws NullArgumentException if the fraction is null.\nCondition: "
        },
        {
            "condition": "predicates.contains(null)",
            "parameters": [
                "'predicates'"
            ],
            "signature": "anyPredicate(java.util.Collection predicates)",
            "tag": "@throws NullPointerException if any predicate in the collection is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: anyPredicate(java.util.Collection predicates)\nJavadoc: @throws NullPointerException if any predicate in the collection is null\nCondition: "
        },
        {
            "condition": "maxSize<0 || maxSize==0",
            "parameters": [
                "'graph'",
                " 'maxSize'",
                " 'pathElement'"
            ],
            "signature": "AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElement pathElement)",
            "tag": "@throws IllegalArgumentException if maxSize is negative or 0.",
            "tag_type": "throwsTag",
            "prompt": "Signature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElement pathElement)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: "
        },
        {
            "condition": "occurrences<0",
            "parameters": [
                "'element'",
                " 'occurrences'"
            ],
            "signature": "add(java.lang.Object element,int occurrences)",
            "tag": "@throws IllegalArgumentException if occurrences is negative, or if the resulting amount would exceed Integer.MAX_VALUE",
            "tag_type": "throwsTag",
            "prompt": "Signature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: add(java.lang.Object element,int occurrences)\nJavadoc: @throws IllegalArgumentException if occurrences is negative, or if the resulting amount would exceed Integer.MAX_VALUE\nCondition: "
        },
        {
            "condition": "predicate1==null || predicate2==null",
            "parameters": [
                "'predicate1'",
                " 'predicate2'"
            ],
            "signature": "eitherPredicate(org.apache.commons.collections4.Predicate predicate1,org.apache.commons.collections4.Predicate predicate2)",
            "tag": "@throws NullPointerException if either predicate is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: eitherPredicate(org.apache.commons.collections4.Predicate predicate1,org.apache.commons.collections4.Predicate predicate2)\nJavadoc: @throws NullPointerException if either predicate is null\nCondition: "
        },
        {
            "condition": "(minimalIterationCount>0)==false",
            "parameters": [
                "'minimalIterationCount'",
                " 'maximalIterationCount'"
            ],
            "signature": "SimpsonIntegrator(int minimalIterationCount,int maximalIterationCount)",
            "tag": "@throws NotStrictlyPositiveException if minimal number of iterations is not strictly positive",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: SimpsonIntegrator(int minimalIterationCount,int maximalIterationCount)\nJavadoc: @throws NotStrictlyPositiveException if minimal number of iterations is not strictly positive\nCondition: "
        },
        {
            "condition": "lower>=upper ",
            "parameters": [
                "'lower'",
                " 'upper'"
            ],
            "signature": "verifyInterval(double lower,double upper)",
            "tag": "@throws NumberIsTooLargeException if lower >= upper.",
            "tag_type": "throwsTag",
            "prompt": "Signature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: verifyInterval(double lower,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= upper.\nCondition: "
        },
        {
            "condition": "predicate1==null || predicate2==null",
            "parameters": [
                "'predicate1'",
                " 'predicate2'"
            ],
            "signature": "orPredicate(org.apache.commons.collections4.Predicate predicate1,org.apache.commons.collections4.Predicate predicate2)",
            "tag": "@throws NullPointerException if either predicate is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: orPredicate(org.apache.commons.collections4.Predicate predicate1,org.apache.commons.collections4.Predicate predicate2)\nJavadoc: @throws NullPointerException if either predicate is null\nCondition: "
        },
        {
            "condition": "function==null",
            "parameters": [
                "'function'",
                " 'lower'",
                " 'upper'"
            ],
            "signature": "verifyBracketing(org.apache.commons.math3.analysis.UnivariateFunction function,double lower,double upper)",
            "tag": "@throws NullArgumentException if function is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: verifyBracketing(org.apache.commons.math3.analysis.UnivariateFunction function,double lower,double upper)\nJavadoc: @throws NullArgumentException if function is null.\nCondition: "
        },
        {
            "condition": "v1.getNorm()==null || v2.getNorm()==null",
            "parameters": [
                "'v1'",
                " 'v2'"
            ],
            "signature": "angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D v1,org.apache.commons.math3.geometry.euclidean.threed.Vector3D v2)",
            "tag": "@throws MathArithmeticException if either vector has a null norm",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D v1,org.apache.commons.math3.geometry.euclidean.threed.Vector3D v2)\nJavadoc: @throws MathArithmeticException if either vector has a null norm\nCondition: "
        },
        {
            "condition": "initialCapacity<0",
            "parameters": [
                "'initialCapacity'"
            ],
            "signature": "WeakHasherMap(int initialCapacity)",
            "tag": "@throws IllegalArgumentException If the initial capacity is less than zero",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: WeakHasherMap(int initialCapacity)\nJavadoc: @throws IllegalArgumentException If the initial capacity is less than zero\nCondition: "
        },
        {
            "condition": "a==null || c==null",
            "parameters": [
                "'a'",
                " 'c'",
                " 'z'"
            ],
            "signature": "evaluate(double[] a,double[] c,double z)",
            "tag": "@throws NullArgumentException if any argument is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: evaluate(double[] a,double[] c,double z)\nJavadoc: @throws NullArgumentException if any argument is null.\nCondition: "
        },
        {
            "condition": "maximalIterationCount>receiverObjectID.SIMPSON_MAX_ITERATIONS_COUNT",
            "parameters": [
                "'relativeAccuracy'",
                " 'absoluteAccuracy'",
                " 'minimalIterationCount'",
                " 'maximalIterationCount'"
            ],
            "signature": "SimpsonIntegrator(double relativeAccuracy,double absoluteAccuracy,int minimalIterationCount,int maximalIterationCount)",
            "tag": "@throws NumberIsTooLargeException if maximal number of iterations is greater than SIMPSON_MAX_ITERATIONS_COUNT",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: SimpsonIntegrator(double relativeAccuracy,double absoluteAccuracy,int minimalIterationCount,int maximalIterationCount)\nJavadoc: @throws NumberIsTooLargeException if maximal number of iterations is greater than SIMPSON_MAX_ITERATIONS_COUNT\nCondition: "
        },
        {
            "condition": "outputCollection==null && (inputCollection==null) == false && (transformer==null) == false",
            "parameters": [
                "'inputCollection'",
                " 'transformer'",
                " 'outputCollection'"
            ],
            "signature": "collect(java.lang.Iterable inputCollection,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)",
            "tag": "@throws NullPointerException if the outputCollection is null and both, inputCollection and transformer are not null",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collect(java.lang.Iterable inputCollection,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the outputCollection is null and both, inputCollection and transformer are not null\nCondition: "
        },
        {
            "condition": "lower>=upper",
            "parameters": [
                "'lower'",
                " 'upper'"
            ],
            "signature": "nextUniform(double lower,double upper)",
            "tag": "@throws NumberIsTooLargeException if lower >= upper",
            "tag_type": "throwsTag",
            "prompt": "Signature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextUniform(double lower,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= upper\nCondition: "
        },
        {
            "condition": "limitSize<0",
            "parameters": [
                "'iterator'",
                " 'limitSize'"
            ],
            "signature": "limit(java.util.Iterator iterator,int limitSize)",
            "tag": "@throws IllegalArgumentException if limitSize is negative",
            "tag_type": "throwsTag",
            "prompt": "Signature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: limit(java.util.Iterator iterator,int limitSize)\nJavadoc: @throws IllegalArgumentException if limitSize is negative\nCondition: "
        },
        {
            "condition": "coll==null",
            "parameters": [
                "'obj'",
                " 'coll'"
            ],
            "signature": "cardinality(java.lang.Object obj,java.lang.Iterable coll)",
            "tag": "@throws NullPointerException if coll is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: cardinality(java.lang.Object obj,java.lang.Iterable coll)\nJavadoc: @throws NullPointerException if coll is null\nCondition: "
        },
        {
            "condition": "java.util.Arrays.stream(predicates).anyMatch(e -> e==null)",
            "parameters": [
                "'predicates'"
            ],
            "signature": "allPredicate(org.apache.commons.collections4.Predicate[] predicates)",
            "tag": "@throws NullPointerException if any predicate in the array is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: allPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: "
        },
        {
            "condition": "array.length==0",
            "parameters": [
                "'array'"
            ],
            "signature": "min(short[] array)",
            "tag": "@throws IllegalArgumentException if array is empty",
            "tag_type": "throwsTag",
            "prompt": "Signature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: min(short[] array)\nJavadoc: @throws IllegalArgumentException if array is empty\nCondition: "
        },
        {
            "condition": "collection==null || iterator==null",
            "parameters": [
                "'collection'",
                " 'iterator'"
            ],
            "signature": "addAll(java.util.Collection collection,java.util.Iterator iterator)",
            "tag": "@throws NullPointerException if the collection or iterator is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Iterator iterator)\nJavadoc: @throws NullPointerException if the collection or iterator is null\nCondition: "
        },
        {
            "condition": "predicate==null",
            "parameters": [
                "'predicate'"
            ],
            "signature": "notPredicate(org.apache.commons.collections4.Predicate predicate)",
            "tag": "@throws NullPointerException if the predicate is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: notPredicate(org.apache.commons.collections4.Predicate predicate)\nJavadoc: @throws NullPointerException if the predicate is null\nCondition: "
        },
        {
            "condition": "map==null",
            "parameters": [
                "'map'",
                " 'scanUntilRemovable'"
            ],
            "signature": "LRUMap(java.util.Map map,boolean scanUntilRemovable)",
            "tag": "@throws NullPointerException if the map is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: LRUMap(java.util.Map map,boolean scanUntilRemovable)\nJavadoc: @throws NullPointerException if the map is null\nCondition: "
        },
        {
            "condition": "t==null",
            "parameters": [
                "'t'"
            ],
            "signature": "WeakIdentityHashMap(java.util.Map t)",
            "tag": "@throws NullPointerException if the specified map is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: WeakIdentityHashMap(java.util.Map t)\nJavadoc: @throws NullPointerException if the specified map is null.\nCondition: "
        },
        {
            "condition": "a.length==0",
            "parameters": [
                "'a'"
            ],
            "signature": "max(int[] a)",
            "tag": "@throws ArrayIndexOutOfBoundsException if the array has length 0",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: max(int[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: "
        },
        {
            "condition": "loadFactor<0",
            "parameters": [
                "'maxSize'",
                " 'initialSize'",
                " 'loadFactor'",
                " 'scanUntilRemovable'"
            ],
            "signature": "LRUMap(int maxSize,int initialSize,float loadFactor,boolean scanUntilRemovable)",
            "tag": "@throws IllegalArgumentException if the load factor is less than zero",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: LRUMap(int maxSize,int initialSize,float loadFactor,boolean scanUntilRemovable)\nJavadoc: @throws IllegalArgumentException if the load factor is less than zero\nCondition: "
        },
        {
            "condition": "bag==null",
            "parameters": [
                "'bag'"
            ],
            "signature": "unmodifiableSortedBag(org.apache.commons.collections4.SortedBag bag)",
            "tag": "@throws NullPointerException if the SortedBag is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: unmodifiableSortedBag(org.apache.commons.collections4.SortedBag bag)\nJavadoc: @throws NullPointerException if the SortedBag is null\nCondition: "
        },
        {
            "condition": "predicates==null",
            "parameters": [
                "'predicates'"
            ],
            "signature": "anyPredicate(org.apache.commons.collections4.Predicate[] predicates)",
            "tag": "@throws NullPointerException if the predicates array is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if the predicates array is null\nCondition: "
        },
        {
            "condition": "populationSize<=0",
            "parameters": [
                "'populationSize'",
                " 'numberOfSuccesses'",
                " 'sampleSize'"
            ],
            "signature": "nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)",
            "tag": "@throws NotStrictlyPositiveException if populationSize <= 0.",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NotStrictlyPositiveException if populationSize <= 0.\nCondition: "
        },
        {
            "condition": "n<0",
            "parameters": [
                "'n'",
                " 'k'"
            ],
            "signature": "binomialCoefficientLog(int n,int k)",
            "tag": "@throws NotPositiveException if n < 0.",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: binomialCoefficientLog(int n,int k)\nJavadoc: @throws NotPositiveException if n < 0.\nCondition: "
        },
        {
            "condition": "initialCapacity<0",
            "parameters": [
                "'initialCapacity'",
                " 'loadFactor'"
            ],
            "signature": "org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)",
            "tag": "@throws IllegalArgumentException the initial capacity is negative.",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the initial capacity is negative.\nCondition: "
        },
        {
            "condition": "loadFactor<0",
            "parameters": [
                "'maxSize'",
                " 'initialSize'",
                " 'loadFactor'"
            ],
            "signature": "LRUMap(int maxSize,int initialSize,float loadFactor)",
            "tag": "@throws IllegalArgumentException if the load factor is less than zero",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: LRUMap(int maxSize,int initialSize,float loadFactor)\nJavadoc: @throws IllegalArgumentException if the load factor is less than zero\nCondition: "
        },
        {
            "condition": "function==null",
            "parameters": [
                "'function'",
                " 'x0'",
                " 'x1'"
            ],
            "signature": "solve(org.apache.commons.math3.analysis.UnivariateFunction function,double x0,double x1)",
            "tag": "@throws NullArgumentException if function is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: solve(org.apache.commons.math3.analysis.UnivariateFunction function,double x0,double x1)\nJavadoc: @throws NullArgumentException if function is null.\nCondition: "
        },
        {
            "condition": "expectedOldCount<0 || newCount<0",
            "parameters": [
                "'element'",
                " 'expectedOldCount'",
                " 'newCount'"
            ],
            "signature": "setCount(java.lang.Object element,int expectedOldCount,int newCount)",
            "tag": "@throws IllegalArgumentException if expectedOldCount or newCount is negative",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: setCount(java.lang.Object element,int expectedOldCount,int newCount)\nJavadoc: @throws IllegalArgumentException if expectedOldCount or newCount is negative\nCondition: "
        },
        {
            "condition": "bag==null",
            "parameters": [
                "'bag'"
            ],
            "signature": "synchronizedSortedBag(org.apache.commons.collections4.SortedBag bag)",
            "tag": "@throws NullPointerException if the SortedBag is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: synchronizedSortedBag(org.apache.commons.collections4.SortedBag bag)\nJavadoc: @throws NullPointerException if the SortedBag is null\nCondition: "
        },
        {
            "condition": "(r>0) == false",
            "parameters": [
                "'r'",
                " 'p'"
            ],
            "signature": "nextPascal(int r,double p)",
            "tag": "@throws NotStrictlyPositiveException if the number of successes is not positive",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextPascal(int r,double p)\nJavadoc: @throws NotStrictlyPositiveException if the number of successes is not positive\nCondition: "
        },
        {
            "condition": "k>n",
            "parameters": [
                "'n'",
                " 'k'"
            ],
            "signature": "binomialCoefficient(int n,int k)",
            "tag": "@throws NumberIsTooLargeException if k > n.",
            "tag_type": "throwsTag",
            "prompt": "Signature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: binomialCoefficient(int n,int k)\nJavadoc: @throws NumberIsTooLargeException if k > n.\nCondition: "
        },
        {
            "condition": "n<0",
            "parameters": [
                "'n'",
                " 'k'"
            ],
            "signature": "binomialCoefficient(int n,int k)",
            "tag": "@throws NotPositiveException if n < 0.",
            "tag_type": "throwsTag",
            "prompt": "Signature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: binomialCoefficient(int n,int k)\nJavadoc: @throws NotPositiveException if n < 0.\nCondition: "
        },
        {
            "condition": "fraction==null",
            "parameters": [
                "'fraction'"
            ],
            "signature": "add(org.apache.commons.math3.fraction.Fraction fraction)",
            "tag": "@throws NullArgumentException if the fraction is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: add(org.apache.commons.math3.fraction.Fraction fraction)\nJavadoc: @throws NullArgumentException if the fraction is null\nCondition: "
        },
        {
            "condition": "size<0",
            "parameters": [
                "'size'"
            ],
            "signature": "LinearGraphGenerator(int size)",
            "tag": "@throws IllegalArgumentException if the specified size is negative.",
            "tag_type": "throwsTag",
            "prompt": "Signature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: LinearGraphGenerator(int size)\nJavadoc: @throws IllegalArgumentException if the specified size is negative.\nCondition: "
        },
        {
            "condition": "a.length==0",
            "parameters": [
                "'a'"
            ],
            "signature": "min_max(int[] a)",
            "tag": "@throws ArrayIndexOutOfBoundsException if the array has length 0",
            "tag_type": "throwsTag",
            "prompt": "Signature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: min_max(int[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: "
        },
        {
            "condition": "collection==null",
            "parameters": [
                "'collection'"
            ],
            "signature": "unmodifiableCollection(java.util.Collection collection)",
            "tag": "@throws NullPointerException if the collection is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: unmodifiableCollection(java.util.Collection collection)\nJavadoc: @throws NullPointerException if the collection is null\nCondition: "
        },
        {
            "condition": "a.length==0",
            "parameters": [
                "'a'"
            ],
            "signature": "max(long[] a)",
            "tag": "@throws ArrayIndexOutOfBoundsException if the array has length 0",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: max(long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: "
        },
        {
            "condition": "start.equals(end)",
            "parameters": [
                "'start'",
                " 'end'"
            ],
            "signature": "SubLine(org.apache.commons.math3.geometry.euclidean.threed.Vector3D start,org.apache.commons.math3.geometry.euclidean.threed.Vector3D end)",
            "tag": "@throws MathIllegalArgumentException if the points are equal",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: SubLine(org.apache.commons.math3.geometry.euclidean.threed.Vector3D start,org.apache.commons.math3.geometry.euclidean.threed.Vector3D end)\nJavadoc: @throws MathIllegalArgumentException if the points are equal\nCondition: "
        },
        {
            "condition": "maximalOrder<2",
            "parameters": [
                "'relativeAccuracy'",
                " 'absoluteAccuracy'",
                " 'functionValueAccuracy'",
                " 'maximalOrder'"
            ],
            "signature": "org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver(double relativeAccuracy, double absoluteAccuracy, double functionValueAccuracy, int maximalOrder)",
            "tag": "@throws NumberIsTooSmallException maximal order is lower than 2.",
            "tag_type": "throwsTag",
            "prompt": "Signature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver(double relativeAccuracy, double absoluteAccuracy, double functionValueAccuracy, int maximalOrder)\nJavadoc: @throws NumberIsTooSmallException maximal order is lower than 2.\nCondition: "
        },
        {
            "condition": "k<=0",
            "parameters": [
                "'n'",
                " 'k'"
            ],
            "signature": "nextPermutation(int n,int k)",
            "tag": "@throws NotStrictlyPositiveException if k <= 0.",
            "tag_type": "throwsTag",
            "prompt": "Signature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextPermutation(int n,int k)\nJavadoc: @throws NotStrictlyPositiveException if k <= 0.\nCondition: "
        },
        {
            "condition": "num==null || den==null",
            "parameters": [
                "'num'",
                " 'den'"
            ],
            "signature": "BigFraction(java.math.BigInteger num,java.math.BigInteger den)",
            "tag": "@throws NullArgumentException if either of the arguments is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: BigFraction(java.math.BigInteger num,java.math.BigInteger den)\nJavadoc: @throws NullArgumentException if either of the arguments is null\nCondition: "
        },
        {
            "condition": "bg==null",
            "parameters": [
                "'bg'"
            ],
            "signature": "subtract(java.math.BigInteger bg)",
            "tag": "@throws NullArgumentException if the BigInteger is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: subtract(java.math.BigInteger bg)\nJavadoc: @throws NullArgumentException if the BigInteger is null.\nCondition: "
        },
        {
            "condition": "bg==null",
            "parameters": [
                "'bg'"
            ],
            "signature": "divide(java.math.BigInteger bg)",
            "tag": "@throws NullArgumentException if the BigInteger is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: divide(java.math.BigInteger bg)\nJavadoc: @throws NullArgumentException if the BigInteger is null\nCondition: "
        },
        {
            "condition": "end<start",
            "parameters": [
                "'visitor'",
                " 'start'",
                " 'end'"
            ],
            "signature": "walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor visitor,int start,int end)",
            "tag": "@throws NumberIsTooSmallException if end < start.",
            "tag_type": "throwsTag",
            "prompt": "Signature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor visitor,int start,int end)\nJavadoc: @throws NumberIsTooSmallException if end < start.\nCondition: "
        },
        {
            "condition": "b==0",
            "parameters": [
                "'a'",
                " 'b'"
            ],
            "signature": "floorMod(long a,long b)",
            "tag": "@throws MathArithmeticException if b == 0",
            "tag_type": "throwsTag",
            "prompt": "Signature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: floorMod(long a,long b)\nJavadoc: @throws MathArithmeticException if b == 0\nCondition: "
        },
        {
            "condition": "k>n",
            "parameters": [
                "'n'",
                " 'k'"
            ],
            "signature": "nextPermutation(int n,int k)",
            "tag": "@throws NumberIsTooLargeException if k > n.",
            "tag_type": "throwsTag",
            "prompt": "Signature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextPermutation(int n,int k)\nJavadoc: @throws NumberIsTooLargeException if k > n.\nCondition: "
        },
        {
            "condition": "maximalIterationCount<=minimalIterationCount",
            "parameters": [
                "'n'",
                " 'relativeAccuracy'",
                " 'absoluteAccuracy'",
                " 'minimalIterationCount'",
                " 'maximalIterationCount'"
            ],
            "signature": "IterativeLegendreGaussIntegrator(int n,double relativeAccuracy,double absoluteAccuracy,int minimalIterationCount,int maximalIterationCount)",
            "tag": "@throws NumberIsTooSmallException if maximal number of iterations is smaller than or equal to the minimal number of iterations.",
            "tag_type": "throwsTag",
            "prompt": "Signature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: IterativeLegendreGaussIntegrator(int n,double relativeAccuracy,double absoluteAccuracy,int minimalIterationCount,int maximalIterationCount)\nJavadoc: @throws NumberIsTooSmallException if maximal number of iterations is smaller than or equal to the minimal number of iterations.\nCondition: "
        },
        {
            "condition": "receiverObjectID.getNorm()==0 || v.getNorm()==0",
            "parameters": [
                "'v'"
            ],
            "signature": "projection(org.apache.commons.math3.linear.RealVector v)",
            "tag": "@throws MathArithmeticException if this or v is the null vector",
            "tag_type": "throwsTag",
            "prompt": "Signature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: projection(org.apache.commons.math3.linear.RealVector v)\nJavadoc: @throws MathArithmeticException if this or v is the null vector\nCondition: "
        },
        {
            "condition": "objectsAndClosures==null",
            "parameters": [
                "'objectsAndClosures'"
            ],
            "signature": "switchMapClosure(java.util.Map objectsAndClosures)",
            "tag": "@throws NullPointerException if the map is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: switchMapClosure(java.util.Map objectsAndClosures)\nJavadoc: @throws NullPointerException if the map is null\nCondition: "
        },
        {
            "condition": "bag==null || predicate==null",
            "parameters": [
                "'bag'",
                " 'predicate'"
            ],
            "signature": "predicatedSortedBag(org.apache.commons.collections4.SortedBag bag,org.apache.commons.collections4.Predicate predicate)",
            "tag": "@throws NullPointerException if the SortedBag or Predicate is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: predicatedSortedBag(org.apache.commons.collections4.SortedBag bag,org.apache.commons.collections4.Predicate predicate)\nJavadoc: @throws NullPointerException if the SortedBag or Predicate is null\nCondition: "
        },
        {
            "condition": "predicates==null",
            "parameters": [
                "'predicates'"
            ],
            "signature": "onePredicate(org.apache.commons.collections4.Predicate[] predicates)",
            "tag": "@throws NullPointerException if the predicates array is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: onePredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if the predicates array is null\nCondition: "
        },
        {
            "condition": "originalData.size() != permutedData.size()",
            "parameters": [
                "'originalData'",
                " 'permutedData'"
            ],
            "signature": "inducedPermutation(java.util.List<S> originalData, java.util.List<S> permutedData)",
            "tag": "@throws DimensionMismatchException the length of originalData and permutedData lists are not equal",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: inducedPermutation(java.util.List<S> originalData, java.util.List<S> permutedData)\nJavadoc: @throws DimensionMismatchException the length of originalData and permutedData lists are not equal\nCondition: "
        },
        {
            "condition": "source==null || dest==null",
            "parameters": [
                "'source'",
                " 'dest'"
            ],
            "signature": "copy(org.apache.commons.math3.stat.descriptive.summary.Sum source, org.apache.commons.math3.stat.descriptive.summary.Sum dest)",
            "tag": "@throws NullArgumentException either source or dest is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: copy(org.apache.commons.math3.stat.descriptive.summary.Sum source, org.apache.commons.math3.stat.descriptive.summary.Sum dest)\nJavadoc: @throws NullArgumentException either source or dest is null.\nCondition: "
        },
        {
            "condition": "sourceVertex==null || targetVertex==null",
            "parameters": [
                "'sourceVertex'",
                " 'targetVertex'"
            ],
            "signature": "addEdge(java.lang.Object sourceVertex,java.lang.Object targetVertex)",
            "tag": "@throws NullPointerException if any of the specified vertices is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: addEdge(java.lang.Object sourceVertex,java.lang.Object targetVertex)\nJavadoc: @throws NullPointerException if any of the specified vertices is null.\nCondition: "
        },
        {
            "condition": "other==null",
            "parameters": [
                "'other'",
                " 'comparator'"
            ],
            "signature": "collate(java.lang.Iterable other,java.util.Comparator comparator)",
            "tag": "@throws NullPointerException if other is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: "
        },
        {
            "condition": "coll==null",
            "parameters": [
                "'coll'"
            ],
            "signature": "isFull(java.util.Collection coll)",
            "tag": "@throws NullPointerException if the collection is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: isFull(java.util.Collection coll)\nJavadoc: @throws NullPointerException if the collection is null\nCondition: "
        },
        {
            "condition": "sigma<=0",
            "parameters": [
                "'norm'",
                " 'mean'",
                " 'sigma'"
            ],
            "signature": "Gaussian(double norm,double mean,double sigma)",
            "tag": "@throws NotStrictlyPositiveException if sigma <= 0.",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: Gaussian(double norm,double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: "
        },
        {
            "condition": "bg==(org.apache.commons.math3.fraction.BigFraction.ZERO)",
            "parameters": [
                "'bg'"
            ],
            "signature": "divide(java.math.BigInteger bg)",
            "tag": "@throws MathArithmeticException if the fraction to divide by is zero",
            "tag_type": "throwsTag",
            "prompt": "Signature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: divide(java.math.BigInteger bg)\nJavadoc: @throws MathArithmeticException if the fraction to divide by is zero\nCondition: "
        },
        {
            "condition": "addend==null",
            "parameters": [
                "'addend'"
            ],
            "signature": "add(org.apache.commons.math3.complex.Complex addend)",
            "tag": "@throws NullArgumentException if addend is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: add(org.apache.commons.math3.complex.Complex addend)\nJavadoc: @throws NullArgumentException if addend is null.\nCondition: "
        },
        {
            "condition": "numeratorDf<=0 || denominatorDf<=0",
            "parameters": [
                "'numeratorDf'",
                " 'denominatorDf'"
            ],
            "signature": "nextF(double numeratorDf,double denominatorDf)",
            "tag": "@throws NotStrictlyPositiveException if numeratorDf <= 0 or denominatorDf <= 0.",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextF(double numeratorDf,double denominatorDf)\nJavadoc: @throws NotStrictlyPositiveException if numeratorDf <= 0 or denominatorDf <= 0.\nCondition: "
        },
        {
            "condition": "collection==null || remove==null || equator==null",
            "parameters": [
                "'collection'",
                " 'remove'",
                " 'equator'"
            ],
            "signature": "removeAll(java.lang.Iterable collection,java.lang.Iterable remove,org.apache.commons.collections4.Equator equator)",
            "tag": "@throws NullPointerException if any of the parameters is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: removeAll(java.lang.Iterable collection,java.lang.Iterable remove,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if any of the parameters is null\nCondition: "
        },
        {
            "condition": "manager==null",
            "parameters": [
                "'manager'"
            ],
            "signature": "org.apache.commons.math3.linear.PreconditionedIterativeLinearSolver(org.apache.commons.math3.util.IterationManager manager)",
            "tag": "@throws NullArgumentException manager is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: org.apache.commons.math3.linear.PreconditionedIterativeLinearSolver(org.apache.commons.math3.util.IterationManager manager)\nJavadoc: @throws NullArgumentException manager is null.\nCondition: "
        },
        {
            "condition": "predicates.contains(null)",
            "parameters": [
                "'predicates'"
            ],
            "signature": "allPredicate(java.util.Collection predicates)",
            "tag": "@throws NullPointerException if any predicate in the collection is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: allPredicate(java.util.Collection predicates)\nJavadoc: @throws NullPointerException if any predicate in the collection is null\nCondition: "
        },
        {
            "condition": "map==null",
            "parameters": [
                "'map'"
            ],
            "signature": "org.apache.commons.collections4.map.HashedMap(java.util.Map<? map)",
            "tag": "@throws NullPointerException the map is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(java.util.Map<? map)\nJavadoc: @throws NullPointerException the map is null.\nCondition: "
        },
        {
            "condition": "vertices.contains(null) || vertices==null",
            "parameters": [
                "'destination'",
                " 'vertices'"
            ],
            "signature": "addAllVertices(org.jgrapht.Graph destination,java.util.Collection vertices)",
            "tag": "@throws NullPointerException if the specified vertices contains one or more null vertices, or if the specified vertex collection is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: addAllVertices(org.jgrapht.Graph destination,java.util.Collection vertices)\nJavadoc: @throws NullPointerException if the specified vertices contains one or more null vertices, or if the specified vertex collection is null.\nCondition: "
        },
        {
            "condition": "collection==null || transformer==null",
            "parameters": [
                "'collection'",
                " 'transformer'"
            ],
            "signature": "transformingCollection(java.util.Collection collection,org.apache.commons.collections4.Transformer transformer)",
            "tag": "@throws NullPointerException if the Collection or Transformer is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: transformingCollection(java.util.Collection collection,org.apache.commons.collections4.Transformer transformer)\nJavadoc: @throws NullPointerException if the Collection or Transformer is null\nCondition: "
        },
        {
            "condition": "start.equals(end)",
            "parameters": [
                "'start'",
                " 'end'",
                " 'tolerance'"
            ],
            "signature": "SubLine(org.apache.commons.math3.geometry.euclidean.threed.Vector3D start,org.apache.commons.math3.geometry.euclidean.threed.Vector3D end,double tolerance)",
            "tag": "@throws MathIllegalArgumentException if the points are equal",
            "tag_type": "throwsTag",
            "prompt": "Signature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: SubLine(org.apache.commons.math3.geometry.euclidean.threed.Vector3D start,org.apache.commons.math3.geometry.euclidean.threed.Vector3D end,double tolerance)\nJavadoc: @throws MathIllegalArgumentException if the points are equal\nCondition: "
        },
        {
            "condition": "((a.lenght - c.length)==1) == false",
            "parameters": [
                "'a'",
                " 'c'",
                " 'z'"
            ],
            "signature": "evaluate(double[] a,double[] c,double z)",
            "tag": "@throws DimensionMismatchException if the size difference between a and c is not equal to 1.",
            "tag_type": "throwsTag",
            "prompt": "Signature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: evaluate(double[] a,double[] c,double z)\nJavadoc: @throws DimensionMismatchException if the size difference between a and c is not equal to 1.\nCondition: "
        },
        {
            "condition": "receiverObjectID.containsVertex(v)==false",
            "parameters": [
                "'v'"
            ],
            "signature": "assertVertexExist(java.lang.Object v)",
            "tag": "@throws IllegalArgumentException if specified vertex does not exist in this graph.",
            "tag_type": "throwsTag",
            "prompt": "Signature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: assertVertexExist(java.lang.Object v)\nJavadoc: @throws IllegalArgumentException if specified vertex does not exist in this graph.\nCondition: "
        },
        {
            "condition": "fraction==null",
            "parameters": [
                "'fraction'"
            ],
            "signature": "divide(org.apache.commons.math3.fraction.Fraction fraction)",
            "tag": "@throws IllegalArgumentException if the fraction is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: divide(org.apache.commons.math3.fraction.Fraction fraction)\nJavadoc: @throws IllegalArgumentException if the fraction is null\nCondition: "
        },
        {
            "condition": "collection==null || collection.contains(null)",
            "parameters": [
                "'collection'"
            ],
            "signature": "toArray(java.util.Collection collection)",
            "tag": "@throws NullPointerException if collection or any of its elements is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: toArray(java.util.Collection collection)\nJavadoc: @throws NullPointerException if collection or any of its elements is null\nCondition: "
        },
        {
            "condition": "xval.length==0 || yval.length==0",
            "parameters": [
                "'xval'",
                " 'yval'"
            ],
            "signature": "interpolate(double[] xval,double[] yval)",
            "tag": "@throws NoDataException if xval or yval has zero size.",
            "tag_type": "throwsTag",
            "prompt": "Signature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: interpolate(double[] xval,double[] yval)\nJavadoc: @throws NoDataException if xval or yval has zero size.\nCondition: "
        },
        {
            "condition": "v==null",
            "parameters": [
                "'v'"
            ],
            "signature": "assertVertexExist(java.lang.Object v)",
            "tag": "@throws NullPointerException if specified vertex is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: assertVertexExist(java.lang.Object v)\nJavadoc: @throws NullPointerException if specified vertex is null.\nCondition: "
        },
        {
            "condition": "xval.length==0 || yval.length==0 || fval.length==0",
            "parameters": [
                "'xval'",
                " 'yval'",
                " 'fval'"
            ],
            "signature": "interpolate(double[] xval, double[] yval, double[][] fval)",
            "tag": "@throws NoDataException any of the arrays has zero length.",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: interpolate(double[] xval, double[] yval, double[][] fval)\nJavadoc: @throws NoDataException any of the arrays has zero length.\nCondition: "
        },
        {
            "condition": "x.length<2",
            "parameters": [
                "'x'",
                " 'y'"
            ],
            "signature": "computeDividedDifference(double[] x,double[] y)",
            "tag": "@throws NumberIsTooSmallException if the number of points is less than 2.",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: computeDividedDifference(double[] x,double[] y)\nJavadoc: @throws NumberIsTooSmallException if the number of points is less than 2.\nCondition: "
        },
        {
            "condition": "Arrays.asList(others).contains(null)",
            "parameters": [
                "'others'"
            ],
            "signature": "zip(java.lang.Iterable[] others)",
            "tag": "@throws NullPointerException if either of the provided iterables is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: zip(java.lang.Iterable[] others)\nJavadoc: @throws NullPointerException if either of the provided iterables is null\nCondition: "
        },
        {
            "condition": "receiverObjectID.isLocked()",
            "parameters": [
                "'existingObj'",
                " 'newObj'"
            ],
            "signature": "addAsEqual(java.lang.Object existingObj,java.lang.Object newObj)",
            "tag": "@throws UnsupportedOperationException if a comparison has already been made",
            "tag_type": "throwsTag",
            "prompt": "Signature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: addAsEqual(java.lang.Object existingObj,java.lang.Object newObj)\nJavadoc: @throws UnsupportedOperationException if a comparison has already been made\nCondition: "
        },
        {
            "condition": "java.util.Arrays.stream(predicates).anyMatch(e -> e==null) || java.util.Arrays.stream(closures).anyMatch(e -> e==null)",
            "parameters": [
                "'predicates'",
                " 'closures'",
                " 'defaultClosure'"
            ],
            "signature": "switchClosure(org.apache.commons.collections4.Predicate[] predicates,org.apache.commons.collections4.Closure[] closures,org.apache.commons.collections4.Closure defaultClosure)",
            "tag": "@throws NullPointerException if any element in the arrays is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: switchClosure(org.apache.commons.collections4.Predicate[] predicates,org.apache.commons.collections4.Closure[] closures,org.apache.commons.collections4.Closure defaultClosure)\nJavadoc: @throws NullPointerException if any element in the arrays is null\nCondition: "
        },
        {
            "condition": "(minimalIterationCount>0)==false",
            "parameters": [
                "'n'",
                " 'minimalIterationCount'",
                " 'maximalIterationCount'"
            ],
            "signature": "IterativeLegendreGaussIntegrator(int n,int minimalIterationCount,int maximalIterationCount)",
            "tag": "@throws NotStrictlyPositiveException if minimal number of iterations is not strictly positive.",
            "tag_type": "throwsTag",
            "prompt": "Signature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: IterativeLegendreGaussIntegrator(int n,int minimalIterationCount,int maximalIterationCount)\nJavadoc: @throws NotStrictlyPositiveException if minimal number of iterations is not strictly positive.\nCondition: "
        },
        {
            "condition": "collection==null",
            "parameters": [
                "'collection'"
            ],
            "signature": "copyInto(java.util.Collection collection)",
            "tag": "@throws NullPointerException if collection is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: copyInto(java.util.Collection collection)\nJavadoc: @throws NullPointerException if collection is null\nCondition: "
        },
        {
            "condition": "java.util.Arrays.stream(predicates).anyMatch(e->e==null)",
            "parameters": [
                "'predicates'"
            ],
            "signature": "onePredicate(org.apache.commons.collections4.Predicate[] predicates)",
            "tag": "@throws NullPointerException if any predicate in the array is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: onePredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: "
        },
        {
            "condition": "transformer==null",
            "parameters": [
                "'transformer'"
            ],
            "signature": "asPredicate(org.apache.commons.collections4.Transformer transformer)",
            "tag": "@throws NullPointerException if the transformer is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: asPredicate(org.apache.commons.collections4.Transformer transformer)\nJavadoc: @throws NullPointerException if the transformer is null\nCondition: "
        },
        {
            "condition": "den==(org.apache.commons.math3.fraction.BigFraction.ZERO)",
            "parameters": [
                "'num'",
                " 'den'"
            ],
            "signature": "BigFraction(java.math.BigInteger num,java.math.BigInteger den)",
            "tag": "@throws ZeroException if the denominator is zero.",
            "tag_type": "throwsTag",
            "prompt": "Signature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: BigFraction(java.math.BigInteger num,java.math.BigInteger den)\nJavadoc: @throws ZeroException if the denominator is zero.\nCondition: "
        },
        {
            "condition": "predicates==null",
            "parameters": [
                "'predicates'"
            ],
            "signature": "nonePredicate(org.apache.commons.collections4.Predicate[] predicates)",
            "tag": "@throws NullPointerException if the predicates array is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nonePredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if the predicates array is null\nCondition: "
        },
        {
            "condition": "predicate1==null || predicate2==null",
            "parameters": [
                "'predicate1'",
                " 'predicate2'"
            ],
            "signature": "andPredicate(org.apache.commons.collections4.Predicate predicate1,org.apache.commons.collections4.Predicate predicate2)",
            "tag": "@throws NullPointerException if either predicate is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: andPredicate(org.apache.commons.collections4.Predicate predicate1,org.apache.commons.collections4.Predicate predicate2)\nJavadoc: @throws NullPointerException if either predicate is null\nCondition: "
        },
        {
            "condition": "(plume.RegexUtil.isRegex(s)) == false",
            "parameters": [
                "'s'"
            ],
            "signature": "asRegex(java.lang.String s)",
            "tag": "@throws Error if argument is not a regex",
            "tag_type": "throwsTag",
            "prompt": "Signature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: asRegex(java.lang.String s)\nJavadoc: @throws Error if argument is not a regex\nCondition: "
        },
        {
            "condition": "count<0",
            "parameters": [
                "'string'",
                " 'count'"
            ],
            "signature": "repeat(java.lang.String string,int count)",
            "tag": "@throws IllegalArgumentException if count is negative",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: repeat(java.lang.String string,int count)\nJavadoc: @throws IllegalArgumentException if count is negative\nCondition: "
        },
        {
            "condition": "collection.isEmpty() || collection.size()>1",
            "parameters": [
                "'collection'"
            ],
            "signature": "extractSingleton(java.util.Collection collection)",
            "tag": "@throws IllegalArgumentException if collection is empty or contains more than one element",
            "tag_type": "throwsTag",
            "prompt": "Signature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: extractSingleton(java.util.Collection collection)\nJavadoc: @throws IllegalArgumentException if collection is empty or contains more than one element\nCondition: "
        },
        {
            "condition": "closure==null || predicate==null",
            "parameters": [
                "'closure'",
                " 'predicate'"
            ],
            "signature": "doWhileClosure(org.apache.commons.collections4.Closure closure,org.apache.commons.collections4.Predicate predicate)",
            "tag": "@throws NullPointerException if either argument is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: doWhileClosure(org.apache.commons.collections4.Closure closure,org.apache.commons.collections4.Predicate predicate)\nJavadoc: @throws NullPointerException if either argument is null\nCondition: "
        },
        {
            "condition": "a.length==0",
            "parameters": [
                "'a'"
            ],
            "signature": "max(java.lang.Long[] a)",
            "tag": "@throws ArrayIndexOutOfBoundsException if the array has length 0",
            "tag_type": "throwsTag",
            "prompt": "Signature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: max(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: "
        },
        {
            "condition": "nMaxHops<0 || nMaxHops==0",
            "parameters": [
                "'graph'",
                " 'startVertex'",
                " 'nPaths'",
                " 'nMaxHops'"
            ],
            "signature": "KShortestPaths(org.jgrapht.Graph graph,java.lang.Object startVertex,int nPaths,int nMaxHops)",
            "tag": "@throws IllegalArgumentException if nMaxHops is negative or 0.",
            "tag_type": "throwsTag",
            "prompt": "Signature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: KShortestPaths(org.jgrapht.Graph graph,java.lang.Object startVertex,int nPaths,int nMaxHops)\nJavadoc: @throws IllegalArgumentException if nMaxHops is negative or 0.\nCondition: "
        },
        {
            "condition": "objectsAndClosures.isEmpty()",
            "parameters": [
                "'objectsAndClosures'"
            ],
            "signature": "switchMapClosure(java.util.Map objectsAndClosures)",
            "tag": "@throws IllegalArgumentException if the map is empty",
            "tag_type": "throwsTag",
            "prompt": "Signature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: switchMapClosure(java.util.Map objectsAndClosures)\nJavadoc: @throws IllegalArgumentException if the map is empty\nCondition: "
        },
        {
            "condition": "coll==null",
            "parameters": [
                "'coll'"
            ],
            "signature": "maxSize(java.util.Collection coll)",
            "tag": "@throws NullPointerException if the collection is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: maxSize(java.util.Collection coll)\nJavadoc: @throws NullPointerException if the collection is null\nCondition: "
        },
        {
            "condition": "loadFactor<0",
            "parameters": [
                "'maxSize'",
                " 'loadFactor'"
            ],
            "signature": "LRUMap(int maxSize,float loadFactor)",
            "tag": "@throws IllegalArgumentException if the load factor is less than zero",
            "tag_type": "throwsTag",
            "prompt": "Signature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: LRUMap(int maxSize,float loadFactor)\nJavadoc: @throws IllegalArgumentException if the load factor is less than zero\nCondition: "
        },
        {
            "condition": "a.length==0",
            "parameters": [
                "'a'"
            ],
            "signature": "min(java.lang.Double[] a)",
            "tag": "@throws ArrayIndexOutOfBoundsException if the array has length 0",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: min(java.lang.Double[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: "
        },
        {
            "condition": "a==null || c==null",
            "parameters": [
                "'a'",
                " 'c'"
            ],
            "signature": "PolynomialFunctionNewtonForm(double[] a,double[] c)",
            "tag": "@throws NullArgumentException if any argument is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: PolynomialFunctionNewtonForm(double[] a,double[] c)\nJavadoc: @throws NullArgumentException if any argument is null.\nCondition: "
        },
        {
            "condition": "reference==null",
            "parameters": [
                "'reference'"
            ],
            "signature": "verifyNotNull(java.lang.Object reference)",
            "tag": "@throws VerifyException if reference is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference)\nJavadoc: @throws VerifyException if reference is null\nCondition: "
        },
        {
            "condition": "java.util.Arrays.stream(predicates).anyMatch(e -> e==null)",
            "parameters": [
                "'predicates'"
            ],
            "signature": "anyPredicate(org.apache.commons.collections4.Predicate[] predicates)",
            "tag": "@throws NullPointerException if any predicate in the array is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: "
        },
        {
            "condition": "a==null || m==null || b==null || x0==null",
            "parameters": [
                "'a'",
                " 'm'",
                " 'b'",
                " 'x0'"
            ],
            "signature": "checkParameters(org.apache.commons.math3.linear.RealLinearOperator a, org.apache.commons.math3.linear.RealLinearOperator m, org.apache.commons.math3.linear.RealVector b, org.apache.commons.math3.linear.RealVector x0)",
            "tag": "@throws NullArgumentException one of the parameters is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: checkParameters(org.apache.commons.math3.linear.RealLinearOperator a, org.apache.commons.math3.linear.RealLinearOperator m, org.apache.commons.math3.linear.RealVector b, org.apache.commons.math3.linear.RealVector x0)\nJavadoc: @throws NullArgumentException one of the parameters is null.\nCondition: "
        },
        {
            "condition": "predicate==null",
            "parameters": [
                "'predicate'"
            ],
            "signature": "nullIsExceptionPredicate(org.apache.commons.collections4.Predicate predicate)",
            "tag": "@throws NullPointerException if the predicate is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nullIsExceptionPredicate(org.apache.commons.collections4.Predicate predicate)\nJavadoc: @throws NullPointerException if the predicate is null.\nCondition: "
        },
        {
            "condition": "queue==null",
            "parameters": [
                "'queue'"
            ],
            "signature": "unmodifiableQueue(java.util.Queue queue)",
            "tag": "@throws NullPointerException if the queue is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: unmodifiableQueue(java.util.Queue queue)\nJavadoc: @throws NullPointerException if the queue is null\nCondition: "
        },
        {
            "condition": "elementList==null || edge==null",
            "parameters": [
                "'graph'",
                " 'maxSize'",
                " 'elementList'",
                " 'edge'"
            ],
            "signature": "AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)",
            "tag": "@throws NullPointerException if the specified prevPathElementList or edge is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws NullPointerException if the specified prevPathElementList or edge is null.\nCondition: "
        },
        {
            "condition": "u1.getNorm().getReal()==0 || u2.getNorm().getReal()==0 || v1.getNorm().getReal()==0",
            "parameters": [
                "'u1'",
                " 'u2'",
                " 'v1'",
                " 'v2'"
            ],
            "signature": "FieldRotation(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D u1,org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D u2,org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D v1,org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D v2)",
            "tag": "@throws MathArithmeticException if the norm of one of the vectors is zero, or if one of the pair is degenerated (i.e. the vectors of the pair are collinear)",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D u1,org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D u2,org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D v1,org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D v2)\nJavadoc: @throws MathArithmeticException if the norm of one of the vectors is zero, or if one of the pair is degenerated (i.e. the vectors of the pair are collinear)\nCondition: "
        },
        {
            "condition": "graph==null",
            "parameters": [
                "'graph'"
            ],
            "signature": "PatonCycleBase(org.jgrapht.UndirectedGraph graph)",
            "tag": "@throws IllegalArgumentException if the graph argument is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: PatonCycleBase(org.jgrapht.UndirectedGraph graph)\nJavadoc: @throws IllegalArgumentException if the graph argument is null.\nCondition: "
        },
        {
            "condition": "v.getDimension() != receiverObjectID.getDimension()",
            "parameters": [
                "'v'"
            ],
            "signature": "ebeDivide(org.apache.commons.math3.linear.RealVector v)",
            "tag": "@throws DimensionMismatchException if v is not the same size as this vector.",
            "tag_type": "throwsTag",
            "prompt": "Signature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: ebeDivide(org.apache.commons.math3.linear.RealVector v)\nJavadoc: @throws DimensionMismatchException if v is not the same size as this vector.\nCondition: "
        },
        {
            "condition": "a.length==0",
            "parameters": [
                "'a'"
            ],
            "signature": "max(java.lang.Integer[] a)",
            "tag": "@throws ArrayIndexOutOfBoundsException if the array has length 0",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: max(java.lang.Integer[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: "
        },
        {
            "condition": "a==null || b==null",
            "parameters": [
                "'a'",
                " 'b'",
                " 'goodb'",
                " 'shift'"
            ],
            "signature": "solve(org.apache.commons.math3.linear.RealLinearOperator a, org.apache.commons.math3.linear.RealVector b, boolean goodb, double shift)",
            "tag": "@throws NullArgumentException one of the parameters is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: solve(org.apache.commons.math3.linear.RealLinearOperator a, org.apache.commons.math3.linear.RealVector b, boolean goodb, double shift)\nJavadoc: @throws NullArgumentException one of the parameters is null.\nCondition: "
        },
        {
            "condition": "function==null",
            "parameters": [
                "'function'",
                " 'lower'",
                " 'upper'"
            ],
            "signature": "isBracketing(org.apache.commons.math3.analysis.UnivariateFunction function,double lower,double upper)",
            "tag": "@throws NullArgumentException if function is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: isBracketing(org.apache.commons.math3.analysis.UnivariateFunction function,double lower,double upper)\nJavadoc: @throws NullArgumentException if function is null.\nCondition: "
        },
        {
            "condition": "string==null",
            "parameters": [
                "'string'"
            ],
            "signature": "escape(java.lang.String string)",
            "tag": "@throws NullPointerException string is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: escape(java.lang.String string)\nJavadoc: @throws NullPointerException string is null.\nCondition: "
        },
        {
            "condition": "predicate==null || trueClosure==null || falseClosure==null",
            "parameters": [
                "'predicate'",
                " 'trueClosure'",
                " 'falseClosure'"
            ],
            "signature": "ifClosure(org.apache.commons.collections4.Predicate predicate,org.apache.commons.collections4.Closure trueClosure,org.apache.commons.collections4.Closure falseClosure)",
            "tag": "@throws NullPointerException if the predicate or either closure is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: ifClosure(org.apache.commons.collections4.Predicate predicate,org.apache.commons.collections4.Closure trueClosure,org.apache.commons.collections4.Closure falseClosure)\nJavadoc: @throws NullPointerException if the predicate or either closure is null\nCondition: "
        },
        {
            "condition": "closure==null",
            "parameters": [
                "'closure'"
            ],
            "signature": "forEach(org.apache.commons.collections4.Closure closure)",
            "tag": "@throws NullPointerException if closure is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: forEach(org.apache.commons.collections4.Closure closure)\nJavadoc: @throws NullPointerException if closure is null\nCondition: "
        },
        {
            "condition": "queue==null || transformer==null",
            "parameters": [
                "'queue'",
                " 'transformer'"
            ],
            "signature": "transformingQueue(java.util.Queue queue,org.apache.commons.collections4.Transformer transformer)",
            "tag": "@throws NullPointerException if the queue or transformer is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: transformingQueue(java.util.Queue queue,org.apache.commons.collections4.Transformer transformer)\nJavadoc: @throws NullPointerException if the queue or transformer is null\nCondition: "
        },
        {
            "condition": "predicates.contains(null)",
            "parameters": [
                "'predicates'"
            ],
            "signature": "nonePredicate(java.util.Collection predicates)",
            "tag": "@throws NullPointerException if any predicate in the collection is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nonePredicate(java.util.Collection predicates)\nJavadoc: @throws NullPointerException if any predicate in the collection is null\nCondition: "
        },
        {
            "condition": "points==null",
            "parameters": [
                "'points'"
            ],
            "signature": "cluster(java.util.Collection<T> points)",
            "tag": "@throws NullArgumentException the data points are null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: cluster(java.util.Collection<T> points)\nJavadoc: @throws NullArgumentException the data points are null.\nCondition: "
        },
        {
            "condition": "predicates==null",
            "parameters": [
                "'predicates'"
            ],
            "signature": "onePredicate(java.util.Collection predicates)",
            "tag": "@throws NullPointerException if the predicates collection is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: onePredicate(java.util.Collection predicates)\nJavadoc: @throws NullPointerException if the predicates collection is null\nCondition: "
        },
        {
            "condition": "predicatesAndClosures==null",
            "parameters": [
                "'predicatesAndClosures'"
            ],
            "signature": "switchClosure(java.util.Map predicatesAndClosures)",
            "tag": "@throws NullPointerException if the map is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: switchClosure(java.util.Map predicatesAndClosures)\nJavadoc: @throws NullPointerException if the map is null\nCondition: "
        },
        {
            "condition": "classToInstantiate==null",
            "parameters": [
                "'classToInstantiate'"
            ],
            "signature": "instantiateFactory(java.lang.Class<T> classToInstantiate)",
            "tag": "@throws NullPointerException the classToInstantiate is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: instantiateFactory(java.lang.Class<T> classToInstantiate)\nJavadoc: @throws NullPointerException the classToInstantiate is null.\nCondition: "
        },
        {
            "condition": "v.getDimension() != receiverObjectID.getDimension()",
            "parameters": [
                "'v'"
            ],
            "signature": "ebeMultiply(org.apache.commons.math3.linear.RealVector v)",
            "tag": "@throws DimensionMismatchException if v is not the same size as this vector.",
            "tag_type": "throwsTag",
            "prompt": "Signature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: ebeMultiply(org.apache.commons.math3.linear.RealVector v)\nJavadoc: @throws DimensionMismatchException if v is not the same size as this vector.\nCondition: "
        },
        {
            "condition": "((xval.length) == (yval.length)) == false",
            "parameters": [
                "'xval'",
                " 'yval'",
                " 'weights'"
            ],
            "signature": "smooth(double[] xval,double[] yval,double[] weights)",
            "tag": "@throws DimensionMismatchException if xval and yval have different sizes.",
            "tag_type": "throwsTag",
            "prompt": "Signature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: smooth(double[] xval,double[] yval,double[] weights)\nJavadoc: @throws DimensionMismatchException if xval and yval have different sizes.\nCondition: "
        },
        {
            "condition": "a.length==0",
            "parameters": [
                "'a'"
            ],
            "signature": "min(int[] a)",
            "tag": "@throws ArrayIndexOutOfBoundsException if the array has length 0",
            "tag_type": "throwsTag",
            "prompt": "Signature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: min(int[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: "
        },
        {
            "condition": "receiverObjectID.getNorm()==0",
            "parameters": [
                ""
            ],
            "signature": "unitVector()",
            "tag": "@throws MathArithmeticException if the norm is zero.",
            "tag_type": "throwsTag",
            "prompt": "Signature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: unitVector()\nJavadoc: @throws MathArithmeticException if the norm is zero.\nCondition: "
        },
        {
            "condition": "vector.getNorm()==0",
            "parameters": [
                "'vector'"
            ],
            "signature": "S2Point(org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector)",
            "tag": "@throws MathArithmeticException if vector norm is zero",
            "tag_type": "throwsTag",
            "prompt": "Signature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: S2Point(org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector)\nJavadoc: @throws MathArithmeticException if vector norm is zero\nCondition: "
        },
        {
            "condition": "a==null || m==null || b==null",
            "parameters": [
                "'a'",
                " 'm'",
                " 'b'",
                " 'goodb'",
                " 'shift'"
            ],
            "signature": "solve(org.apache.commons.math3.linear.RealLinearOperator a, org.apache.commons.math3.linear.RealLinearOperator m, org.apache.commons.math3.linear.RealVector b, boolean goodb, double shift)",
            "tag": "@throws NullArgumentException one of the parameters is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: solve(org.apache.commons.math3.linear.RealLinearOperator a, org.apache.commons.math3.linear.RealLinearOperator m, org.apache.commons.math3.linear.RealVector b, boolean goodb, double shift)\nJavadoc: @throws NullArgumentException one of the parameters is null.\nCondition: "
        },
        {
            "condition": "maxSize<1",
            "parameters": [
                "'maxSize'",
                " 'initialSize'",
                " 'loadFactor'"
            ],
            "signature": "LRUMap(int maxSize,int initialSize,float loadFactor)",
            "tag": "@throws IllegalArgumentException if the maximum size is less than one",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: LRUMap(int maxSize,int initialSize,float loadFactor)\nJavadoc: @throws IllegalArgumentException if the maximum size is less than one\nCondition: "
        },
        {
            "condition": "size<=0",
            "parameters": [
                "'iterator'",
                " 'size'"
            ],
            "signature": "partition(java.util.Iterator iterator,int size)",
            "tag": "@throws IllegalArgumentException if size is nonpositive",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: partition(java.util.Iterator iterator,int size)\nJavadoc: @throws IllegalArgumentException if size is nonpositive\nCondition: "
        },
        {
            "condition": "(m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)",
            "parameters": [
                "'m'",
                " 'threshold'"
            ],
            "signature": "FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)",
            "tag": "@throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative",
            "tag_type": "throwsTag",
            "prompt": "Signature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: "
        },
        {
            "condition": "true",
            "parameters": [
                "'k1'",
                " 'v1'"
            ],
            "signature": "of(K k1, V v1)",
            "tag": "@throws UnsupportedOperationException always.",
            "tag_type": "throwsTag",
            "prompt": "Signature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: of(K k1, V v1)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: "
        },
        {
            "condition": "a==null || m==null || b==null || x0==null",
            "parameters": [
                "'a'",
                " 'm'",
                " 'b'",
                " 'x0'"
            ],
            "signature": "solve(org.apache.commons.math3.linear.RealLinearOperator a, org.apache.commons.math3.linear.RealLinearOperator m, org.apache.commons.math3.linear.RealVector b, org.apache.commons.math3.linear.RealVector x0)",
            "tag": "@throws NullArgumentException one of the parameters is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: solve(org.apache.commons.math3.linear.RealLinearOperator a, org.apache.commons.math3.linear.RealLinearOperator m, org.apache.commons.math3.linear.RealVector b, org.apache.commons.math3.linear.RealVector x0)\nJavadoc: @throws NullArgumentException one of the parameters is null.\nCondition: "
        },
        {
            "condition": "index<0",
            "parameters": [
                "'index'"
            ],
            "signature": "checkIndexBounds(int index)",
            "tag": "@throws IndexOutOfBoundsException if the index is negative.",
            "tag_type": "throwsTag",
            "prompt": "Signature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: checkIndexBounds(int index)\nJavadoc: @throws IndexOutOfBoundsException if the index is negative.\nCondition: "
        },
        {
            "condition": "y.getDimension() != receiverObjectID.getDimension()",
            "parameters": [
                "'a'",
                " 'b'",
                " 'y'"
            ],
            "signature": "combineToSelf(double a,double b,org.apache.commons.math3.linear.RealVector y)",
            "tag": "@throws DimensionMismatchException if y is not the same size as this vector.",
            "tag_type": "throwsTag",
            "prompt": "Signature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: combineToSelf(double a,double b,org.apache.commons.math3.linear.RealVector y)\nJavadoc: @throws DimensionMismatchException if y is not the same size as this vector.\nCondition: "
        },
        {
            "condition": "reference==null",
            "parameters": [
                "'reference'",
                " 'errorMessageTemplate'",
                " 'errorMessageArgs'"
            ],
            "signature": "verifyNotNull(java.lang.Object reference,java.lang.String errorMessageTemplate,java.lang.Object[] errorMessageArgs)",
            "tag": "@throws VerifyException if reference is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: verifyNotNull(java.lang.Object reference,java.lang.String errorMessageTemplate,java.lang.Object[] errorMessageArgs)\nJavadoc: @throws VerifyException if reference is null\nCondition: "
        },
        {
            "condition": "k>n",
            "parameters": [
                "'n'",
                " 'k'"
            ],
            "signature": "binomialCoefficientLog(int n,int k)",
            "tag": "@throws NumberIsTooLargeException if k > n.",
            "tag_type": "throwsTag",
            "prompt": "Signature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: binomialCoefficientLog(int n,int k)\nJavadoc: @throws NumberIsTooLargeException if k > n.\nCondition: "
        },
        {
            "condition": "edges==null",
            "parameters": [
                "'edges'"
            ],
            "signature": "removeAllEdges(java.util.Collection edges)",
            "tag": "@throws NullPointerException if the specified edge collection is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: removeAllEdges(java.util.Collection edges)\nJavadoc: @throws NullPointerException if the specified edge collection is null.\nCondition: "
        },
        {
            "condition": "optimizer==null || generator==null",
            "parameters": [
                "'optimizer'",
                " 'starts'",
                " 'generator'"
            ],
            "signature": "org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer(org.apache.commons.math3.optimization.univariate.BaseUnivariateOptimizer<FUNC> optimizer, int starts, org.apache.commons.math3.random.RandomGenerator generator)",
            "tag": "@throws NullArgumentException optimizer or generator is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer(org.apache.commons.math3.optimization.univariate.BaseUnivariateOptimizer<FUNC> optimizer, int starts, org.apache.commons.math3.random.RandomGenerator generator)\nJavadoc: @throws NullArgumentException optimizer or generator is null.\nCondition: "
        },
        {
            "condition": "y.getDimension() != receiverObjectID.getDimension()",
            "parameters": [
                "'a'",
                " 'b'",
                " 'y'"
            ],
            "signature": "combine(double a,double b,org.apache.commons.math3.linear.RealVector y)",
            "tag": "@throws DimensionMismatchException if y is not the same size as this vector.",
            "tag_type": "throwsTag",
            "prompt": "Signature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: combine(double a,double b,org.apache.commons.math3.linear.RealVector y)\nJavadoc: @throws DimensionMismatchException if y is not the same size as this vector.\nCondition: "
        },
        {
            "condition": "queue==null || predicate==null",
            "parameters": [
                "'queue'",
                " 'predicate'"
            ],
            "signature": "predicatedQueue(java.util.Queue queue,org.apache.commons.collections4.Predicate predicate)",
            "tag": "@throws NullPointerException if the queue or predicate is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: predicatedQueue(java.util.Queue queue,org.apache.commons.collections4.Predicate predicate)\nJavadoc: @throws NullPointerException if the queue or predicate is null\nCondition: "
        },
        {
            "condition": "maxSize<0 || maxSize==0",
            "parameters": [
                "'graph'",
                " 'maxSize'",
                " 'elementList'",
                " 'edge'"
            ],
            "signature": "AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)",
            "tag": "@throws IllegalArgumentException if maxSize is negative or 0.",
            "tag_type": "throwsTag",
            "prompt": "Signature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: "
        },
        {
            "condition": "v==null",
            "parameters": [
                "'v'"
            ],
            "signature": "addVertex(java.lang.Object v)",
            "tag": "@throws NullPointerException if the specified vertex is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: addVertex(java.lang.Object v)\nJavadoc: @throws NullPointerException if the specified vertex is null.\nCondition: "
        },
        {
            "condition": "a==null || m==null || b==null || x==null",
            "parameters": [
                "'a'",
                " 'm'",
                " 'b'",
                " 'x'",
                " 'goodb'",
                " 'shift'"
            ],
            "signature": "solveInPlace(org.apache.commons.math3.linear.RealLinearOperator a, org.apache.commons.math3.linear.RealLinearOperator m, org.apache.commons.math3.linear.RealVector b, org.apache.commons.math3.linear.RealVector x, boolean goodb, double shift)",
            "tag": "@throws NullArgumentException one of the parameters is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: solveInPlace(org.apache.commons.math3.linear.RealLinearOperator a, org.apache.commons.math3.linear.RealLinearOperator m, org.apache.commons.math3.linear.RealVector b, org.apache.commons.math3.linear.RealVector x, boolean goodb, double shift)\nJavadoc: @throws NullArgumentException one of the parameters is null.\nCondition: "
        },
        {
            "condition": "end<start",
            "parameters": [
                "'start'",
                " 'end'"
            ],
            "signature": "checkIndices(int start,int end)",
            "tag": "@throws NumberIsTooSmallException if end < start",
            "tag_type": "throwsTag",
            "prompt": "Signature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: checkIndices(int start,int end)\nJavadoc: @throws NumberIsTooSmallException if end < start\nCondition: "
        },
        {
            "condition": "lower>=initial || initial>=upper",
            "parameters": [
                "'lower'",
                " 'initial'",
                " 'upper'"
            ],
            "signature": "verifySequence(double lower,double initial,double upper)",
            "tag": "@throws NumberIsTooLargeException if lower >= initial or initial >= upper.",
            "tag_type": "throwsTag",
            "prompt": "Signature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: "
        },
        {
            "condition": "e<0",
            "parameters": [
                "'k'",
                " 'e'"
            ],
            "signature": "pow(int k,int e)",
            "tag": "@throws NotPositiveException if e < 0.",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: pow(int k,int e)\nJavadoc: @throws NotPositiveException if e < 0.\nCondition: "
        },
        {
            "condition": "axis.getNorm().getReal()==0",
            "parameters": [
                "'axis'",
                " 'angle'"
            ],
            "signature": "FieldRotation(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D axis,org.apache.commons.math3.RealFieldElement angle)",
            "tag": "@throws MathIllegalArgumentException if the axis norm is zero",
            "tag_type": "throwsTag",
            "prompt": "Signature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D axis,org.apache.commons.math3.RealFieldElement angle)\nJavadoc: @throws MathIllegalArgumentException if the axis norm is zero\nCondition: "
        },
        {
            "condition": "initialCapacity<0",
            "parameters": [
                "'initialCapacity'"
            ],
            "signature": "org.apache.commons.collections4.map.HashedMap(int initialCapacity)",
            "tag": "@throws IllegalArgumentException the initial capacity is negative.",
            "tag_type": "throwsTag",
            "prompt": "Signature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity)\nJavadoc: @throws IllegalArgumentException the initial capacity is negative.\nCondition: "
        },
        {
            "condition": "a==null || c==null",
            "parameters": [
                "'a'",
                " 'c'"
            ],
            "signature": "verifyInputArray(double[] a,double[] c)",
            "tag": "@throws NullArgumentException if any argument is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: verifyInputArray(double[] a,double[] c)\nJavadoc: @throws NullArgumentException if any argument is null.\nCondition: "
        },
        {
            "condition": "v.getDimension() != receiverObjectID.getDimension()",
            "parameters": [
                "'v'"
            ],
            "signature": "getDistance(org.apache.commons.math3.linear.RealVector v)",
            "tag": "@throws DimensionMismatchException if v is not the same size as this vector.",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: getDistance(org.apache.commons.math3.linear.RealVector v)\nJavadoc: @throws DimensionMismatchException if v is not the same size as this vector.\nCondition: "
        },
        {
            "condition": "robustnessIters<0",
            "parameters": [
                "'bandwidth'",
                " 'robustnessIters'",
                " 'accuracy'"
            ],
            "signature": "LoessInterpolator(double bandwidth,int robustnessIters,double accuracy)",
            "tag": "@throws NotPositiveException if robustnessIters is negative.",
            "tag_type": "throwsTag",
            "prompt": "Signature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: LoessInterpolator(double bandwidth,int robustnessIters,double accuracy)\nJavadoc: @throws NotPositiveException if robustnessIters is negative.\nCondition: "
        },
        {
            "condition": "a.length==0",
            "parameters": [
                "'a'"
            ],
            "signature": "min(java.lang.Long[] a)",
            "tag": "@throws ArrayIndexOutOfBoundsException if the array has length 0",
            "tag_type": "throwsTag",
            "prompt": "Signature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: "
        },
        {
            "condition": "predicates==null",
            "parameters": [
                "'predicates'"
            ],
            "signature": "anyPredicate(java.util.Collection predicates)",
            "tag": "@throws NullPointerException if the predicates array is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: anyPredicate(java.util.Collection predicates)\nJavadoc: @throws NullPointerException if the predicates array is null\nCondition: "
        },
        {
            "condition": "maxSize<0",
            "parameters": [
                "'maxSize'"
            ],
            "signature": "limit(long maxSize)",
            "tag": "@throws IllegalArgumentException if maxSize is negative",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: limit(long maxSize)\nJavadoc: @throws IllegalArgumentException if maxSize is negative\nCondition: "
        },
        {
            "condition": "map==null",
            "parameters": [
                "'map'"
            ],
            "signature": "LRUMap(java.util.Map map)",
            "tag": "@throws NullPointerException if the map is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: LRUMap(java.util.Map map)\nJavadoc: @throws NullPointerException if the map is null\nCondition: "
        },
        {
            "condition": "l==0",
            "parameters": [
                "'l'"
            ],
            "signature": "divide(long l)",
            "tag": "@throws MathArithmeticException if the fraction to divide by is zero",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: divide(long l)\nJavadoc: @throws MathArithmeticException if the fraction to divide by is zero\nCondition: "
        },
        {
            "condition": "steps==null",
            "parameters": [
                "'steps'"
            ],
            "signature": "org.apache.commons.math3.optimization.direct.AbstractSimplex(double[] steps)",
            "tag": "@throws NullArgumentException steps is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: org.apache.commons.math3.optimization.direct.AbstractSimplex(double[] steps)\nJavadoc: @throws NullArgumentException steps is null.\nCondition: "
        },
        {
            "condition": "collection==null || retain==null || equator==null",
            "parameters": [
                "'collection'",
                " 'retain'",
                " 'equator'"
            ],
            "signature": "retainAll(java.lang.Iterable collection,java.lang.Iterable retain,org.apache.commons.collections4.Equator equator)",
            "tag": "@throws NullPointerException if any of the parameters is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: retainAll(java.lang.Iterable collection,java.lang.Iterable retain,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if any of the parameters is null\nCondition: "
        },
        {
            "condition": "a.length==0 || c.length==0",
            "parameters": [
                "'a'",
                " 'c'"
            ],
            "signature": "PolynomialFunctionNewtonForm(double[] a,double[] c)",
            "tag": "@throws NoDataException if any array has zero length.",
            "tag_type": "throwsTag",
            "prompt": "Signature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: PolynomialFunctionNewtonForm(double[] a,double[] c)\nJavadoc: @throws NoDataException if any array has zero length.\nCondition: "
        },
        {
            "condition": "original==null",
            "parameters": [
                "'original'"
            ],
            "signature": "org.apache.commons.math3.stat.descriptive.SummaryStatistics(org.apache.commons.math3.stat.descriptive.SummaryStatistics original)",
            "tag": "@throws NullArgumentException original is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: org.apache.commons.math3.stat.descriptive.SummaryStatistics(org.apache.commons.math3.stat.descriptive.SummaryStatistics original)\nJavadoc: @throws NullArgumentException original is null.\nCondition: "
        },
        {
            "condition": "n<=0",
            "parameters": [
                "'n'"
            ],
            "signature": "nthRoot(int n)",
            "tag": "@throws NotPositiveException if n <= 0.",
            "tag_type": "throwsTag",
            "prompt": "Signature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nthRoot(int n)\nJavadoc: @throws NotPositiveException if n <= 0.\nCondition: "
        },
        {
            "condition": "dimension<1 || dimension>40",
            "parameters": [
                "'dimension'"
            ],
            "signature": "org.apache.commons.math3.random.HaltonSequenceGenerator(int dimension)",
            "tag": "@throws OutOfRangeException the space dimension is outside the allowed range of [1 40].",
            "tag_type": "throwsTag",
            "prompt": "Signature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: org.apache.commons.math3.random.HaltonSequenceGenerator(int dimension)\nJavadoc: @throws OutOfRangeException the space dimension is outside the allowed range of [1 40].\nCondition: "
        },
        {
            "condition": "v.getDimension() != receiverObjectID.getDimension()",
            "parameters": [
                "'v'"
            ],
            "signature": "projection(org.apache.commons.math3.linear.RealVector v)",
            "tag": "@throws DimensionMismatchException if v is not the same size as this vector.",
            "tag_type": "throwsTag",
            "prompt": "Signature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: projection(org.apache.commons.math3.linear.RealVector v)\nJavadoc: @throws DimensionMismatchException if v is not the same size as this vector.\nCondition: "
        },
        {
            "condition": "maximalIterationCount<=minimalIterationCount",
            "parameters": [
                "'relativeAccuracy'",
                " 'absoluteAccuracy'",
                " 'minimalIterationCount'",
                " 'maximalIterationCount'"
            ],
            "signature": "SimpsonIntegrator(double relativeAccuracy,double absoluteAccuracy,int minimalIterationCount,int maximalIterationCount)",
            "tag": "@throws NumberIsTooSmallException if maximal number of iterations is lesser than or equal to the minimal number of iterations",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: SimpsonIntegrator(double relativeAccuracy,double absoluteAccuracy,int minimalIterationCount,int maximalIterationCount)\nJavadoc: @throws NumberIsTooSmallException if maximal number of iterations is lesser than or equal to the minimal number of iterations\nCondition: "
        },
        {
            "condition": "true",
            "parameters": [
                ""
            ],
            "signature": "builder()",
            "tag": "@throws UnsupportedOperationException always.",
            "tag_type": "throwsTag",
            "prompt": "Signature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: builder()\nJavadoc: @throws UnsupportedOperationException always.\nCondition: "
        },
        {
            "condition": "map.isEmpty()",
            "parameters": [
                "'map'"
            ],
            "signature": "LRUMap(java.util.Map map)",
            "tag": "@throws IllegalArgumentException if the map is empty",
            "tag_type": "throwsTag",
            "prompt": "Signature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: LRUMap(java.util.Map map)\nJavadoc: @throws IllegalArgumentException if the map is empty\nCondition: "
        },
        {
            "condition": "Double.isNaN(value) || Double.isInfinite(value)",
            "parameters": [
                "'value'"
            ],
            "signature": "BigFraction(double value)",
            "tag": "@throws MathIllegalArgumentException if value is NaN or infinite",
            "tag_type": "throwsTag",
            "prompt": "Signature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: BigFraction(double value)\nJavadoc: @throws MathIllegalArgumentException if value is NaN or infinite\nCondition: "
        },
        {
            "condition": "maxSize<1",
            "parameters": [
                "'maxSize'",
                " 'loadFactor'",
                " 'scanUntilRemovable'"
            ],
            "signature": "LRUMap(int maxSize,float loadFactor,boolean scanUntilRemovable)",
            "tag": "@throws IllegalArgumentException if the maximum size is less than one",
            "tag_type": "throwsTag",
            "prompt": "Signature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: LRUMap(int maxSize,float loadFactor,boolean scanUntilRemovable)\nJavadoc: @throws IllegalArgumentException if the maximum size is less than one\nCondition: "
        },
        {
            "condition": "receiverObjectID.isEmpty()",
            "parameters": [
                ""
            ],
            "signature": "peek()",
            "tag": "@throws EmptyStackException if the stack is empty",
            "tag_type": "throwsTag",
            "prompt": "Signature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: peek()\nJavadoc: @throws EmptyStackException if the stack is empty\nCondition: "
        },
        {
            "condition": "initialCapacity<0",
            "parameters": [
                "'initialCapacity'"
            ],
            "signature": "WeakIdentityHashMap(int initialCapacity)",
            "tag": "@throws IllegalArgumentException If the initial capacity is negative.",
            "tag_type": "throwsTag",
            "prompt": "Signature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: WeakIdentityHashMap(int initialCapacity)\nJavadoc: @throws IllegalArgumentException If the initial capacity is negative.\nCondition: "
        },
        {
            "condition": "predicate==null || trueClosure==null",
            "parameters": [
                "'predicate'",
                " 'trueClosure'"
            ],
            "signature": "ifClosure(org.apache.commons.collections4.Predicate predicate,org.apache.commons.collections4.Closure trueClosure)",
            "tag": "@throws NullPointerException if the predicate or closure is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: ifClosure(org.apache.commons.collections4.Predicate predicate,org.apache.commons.collections4.Closure trueClosure)\nJavadoc: @throws NullPointerException if the predicate or closure is null\nCondition: "
        },
        {
            "condition": "true",
            "parameters": [
                "'k1'",
                " 'v1'",
                " 'k2'",
                " 'v2'",
                " 'k3'",
                " 'v3'"
            ],
            "signature": "of(K k1, V v1, K k2, V v2, K k3, V v3)",
            "tag": "@throws UnsupportedOperationException always.",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: "
        },
        {
            "condition": "(v.length==3)==false",
            "parameters": [
                "'v'"
            ],
            "signature": "Vector3D(double[] v)",
            "tag": "@throws DimensionMismatchException if array does not have 3 elements",
            "tag_type": "throwsTag",
            "prompt": "Signature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: Vector3D(double[] v)\nJavadoc: @throws DimensionMismatchException if array does not have 3 elements\nCondition: "
        },
        {
            "condition": "first==null && second==null",
            "parameters": [
                "'first'",
                " 'second'"
            ],
            "signature": "firstNonNull(java.lang.Object first,java.lang.Object second)",
            "tag": "@throws NullPointerException if both first and second are null",
            "tag_type": "throwsTag",
            "prompt": "Signature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: firstNonNull(java.lang.Object first,java.lang.Object second)\nJavadoc: @throws NullPointerException if both first and second are null\nCondition: "
        },
        {
            "condition": "collection==null || retain==null",
            "parameters": [
                "'collection'",
                " 'retain'"
            ],
            "signature": "retainAll(java.util.Collection collection,java.util.Collection retain)",
            "tag": "@throws NullPointerException if either parameter is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: retainAll(java.util.Collection collection,java.util.Collection retain)\nJavadoc: @throws NullPointerException if either parameter is null\nCondition: "
        },
        {
            "condition": "x==null",
            "parameters": [
                "'x'"
            ],
            "signature": "pow(org.apache.commons.math3.complex.Complex x)",
            "tag": "@throws NullArgumentException if x is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: pow(org.apache.commons.math3.complex.Complex x)\nJavadoc: @throws NullArgumentException if x is null.\nCondition: "
        },
        {
            "condition": "m==null",
            "parameters": [
                "'m'"
            ],
            "signature": "putAll(java.util.Map m)",
            "tag": "@throws NullPointerException if the specified map is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: putAll(java.util.Map m)\nJavadoc: @throws NullPointerException if the specified map is null.\nCondition: "
        },
        {
            "condition": "numberOfElements<=0 || exponent<=0",
            "parameters": [
                "'numberOfElements'",
                " 'exponent'"
            ],
            "signature": "nextZipf(int numberOfElements,double exponent)",
            "tag": "@throws NotStrictlyPositiveException if numberOfElements <= 0 or exponent <= 0.",
            "tag_type": "throwsTag",
            "prompt": "Signature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextZipf(int numberOfElements,double exponent)\nJavadoc: @throws NotStrictlyPositiveException if numberOfElements <= 0 or exponent <= 0.\nCondition: "
        },
        {
            "condition": "maximalIterationCount<=minimalIterationCount",
            "parameters": [
                "'n'",
                " 'minimalIterationCount'",
                " 'maximalIterationCount'"
            ],
            "signature": "IterativeLegendreGaussIntegrator(int n,int minimalIterationCount,int maximalIterationCount)",
            "tag": "@throws NumberIsTooSmallException if maximal number of iterations is smaller than or equal to the minimal number of iterations.",
            "tag_type": "throwsTag",
            "prompt": "Signature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: IterativeLegendreGaussIntegrator(int n,int minimalIterationCount,int maximalIterationCount)\nJavadoc: @throws NumberIsTooSmallException if maximal number of iterations is smaller than or equal to the minimal number of iterations.\nCondition: "
        },
        {
            "condition": "receiverObjectID.getGraph()==null",
            "parameters": [
                ""
            ],
            "signature": "findSimpleCycles()",
            "tag": "@throws IllegalArgumentException if the current graph is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: findSimpleCycles()\nJavadoc: @throws IllegalArgumentException if the current graph is null.\nCondition: "
        },
        {
            "condition": "receiverObjectID.getNorm()==0 || v.getNorm()==0",
            "parameters": [
                "'v'"
            ],
            "signature": "cosine(org.apache.commons.math3.linear.RealVector v)",
            "tag": "@throws MathArithmeticException if this or v is the null vector",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: cosine(org.apache.commons.math3.linear.RealVector v)\nJavadoc: @throws MathArithmeticException if this or v is the null vector\nCondition: "
        },
        {
            "condition": "predicates==null",
            "parameters": [
                "'predicates'"
            ],
            "signature": "nonePredicate(java.util.Collection predicates)",
            "tag": "@throws NullPointerException if the predicates collection is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nonePredicate(java.util.Collection predicates)\nJavadoc: @throws NullPointerException if the predicates collection is null\nCondition: "
        },
        {
            "condition": "position<0 || position>receiverObjectID.size()",
            "parameters": [
                "'position'"
            ],
            "signature": "get(int position)",
            "tag": "@throws IndexOutOfBoundsException if the provided position is outside the valid range of this iterable: [0, size)",
            "tag_type": "throwsTag",
            "prompt": "Signature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: get(int position)\nJavadoc: @throws IndexOutOfBoundsException if the provided position is outside the valid range of this iterable: [0, size)\nCondition: "
        },
        {
            "condition": "receiverObjectID.isEmpty()",
            "parameters": [
                ""
            ],
            "signature": "pop()",
            "tag": "@throws EmptyStackException if the stack is empty",
            "tag_type": "throwsTag",
            "prompt": "Signature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: pop()\nJavadoc: @throws EmptyStackException if the stack is empty\nCondition: "
        },
        {
            "condition": "start<0 || start>sequence.length()",
            "parameters": [
                "'sequence'",
                " 'start'"
            ],
            "signature": "indexIn(java.lang.CharSequence sequence,int start)",
            "tag": "@throws IndexOutOfBoundsException if start is negative or greater than sequence.length()",
            "tag_type": "throwsTag",
            "prompt": "Signature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: indexIn(java.lang.CharSequence sequence,int start)\nJavadoc: @throws IndexOutOfBoundsException if start is negative or greater than sequence.length()\nCondition: "
        },
        {
            "condition": "methodName==null",
            "parameters": [
                "'methodName'",
                " 'paramTypes'",
                " 'args'"
            ],
            "signature": "invokerClosure(java.lang.String methodName,java.lang.Class[] paramTypes,java.lang.Object[] args)",
            "tag": "@throws NullPointerException if the method name is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: invokerClosure(java.lang.String methodName,java.lang.Class[] paramTypes,java.lang.Object[] args)\nJavadoc: @throws NullPointerException if the method name is null\nCondition: "
        },
        {
            "condition": "x.length<2",
            "parameters": [
                "'x'",
                " 'y'"
            ],
            "signature": "interpolate(double[] x,double[] y)",
            "tag": "@throws NumberIsTooSmallException if the size of x is smaller than 2.",
            "tag_type": "throwsTag",
            "prompt": "Signature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: interpolate(double[] x,double[] y)\nJavadoc: @throws NumberIsTooSmallException if the size of x is smaller than 2.\nCondition: "
        },
        {
            "condition": "receiverObjectID.getDimension() != v.getDimension()",
            "parameters": [
                "'v'"
            ],
            "signature": "cosine(org.apache.commons.math3.linear.RealVector v)",
            "tag": "@throws DimensionMismatchException if the dimensions of this and v do not match",
            "tag_type": "throwsTag",
            "prompt": "Signature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: cosine(org.apache.commons.math3.linear.RealVector v)\nJavadoc: @throws DimensionMismatchException if the dimensions of this and v do not match\nCondition: "
        },
        {
            "condition": "methodName==null",
            "parameters": [
                "'methodName'",
                " 'paramTypes'",
                " 'args'"
            ],
            "signature": "invokerPredicate(java.lang.String methodName,java.lang.Class[] paramTypes,java.lang.Object[] args)",
            "tag": "@throws NullPointerException if the method name is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: invokerPredicate(java.lang.String methodName,java.lang.Class[] paramTypes,java.lang.Object[] args)\nJavadoc: @throws NullPointerException if the method name is null\nCondition: "
        },
        {
            "condition": "bases==null",
            "parameters": [
                "'dimension'",
                " 'bases'",
                " 'weights'"
            ],
            "signature": "org.apache.commons.math3.random.HaltonSequenceGenerator(int dimension, int[] bases, int[] weights)",
            "tag": "@throws NullArgumentException base is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: org.apache.commons.math3.random.HaltonSequenceGenerator(int dimension, int[] bases, int[] weights)\nJavadoc: @throws NullArgumentException base is null.\nCondition: "
        },
        {
            "condition": "predicates==null",
            "parameters": [
                "'predicates'"
            ],
            "signature": "anyPredicate(java.util.Collection predicates)",
            "tag": "@throws NullPointerException if the predicates collection is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: anyPredicate(java.util.Collection predicates)\nJavadoc: @throws NullPointerException if the predicates collection is null\nCondition: "
        },
        {
            "condition": "fraction==null",
            "parameters": [
                "'fraction'"
            ],
            "signature": "add(org.apache.commons.math3.fraction.BigFraction fraction)",
            "tag": "@throws NullArgumentException if the BigFraction is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: add(org.apache.commons.math3.fraction.BigFraction fraction)\nJavadoc: @throws NullArgumentException if the BigFraction is null.\nCondition: "
        },
        {
            "condition": "true",
            "parameters": [
                "'k1'",
                " 'v1'",
                " 'k2'",
                " 'v2'"
            ],
            "signature": "of(K k1, V v1, K k2, V v2)",
            "tag": "@throws UnsupportedOperationException always.",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition: a==null || b==null || c==null\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition: collection==null || enumeration==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: true\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition: items==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition: outputCollection==null && (inputIterator==null) == false && (transformer==null) == false\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition: closures==null\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition: mean<=0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition: numberOfSuccesses>populationSize || sampleSize>populationSize\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition: (first.getLength() == second.getLength()) == false\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition: sigma<=0\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2)\nJavadoc: @throws UnsupportedOperationException always.\nCondition: "
        },
        {
            "condition": "outputCollection==null && (inputIterator==null) == false && (transformer==null) == false",
            "parameters": [
                "'inputIterator'",
                " 'transformer'",
                " 'outputCollection'"
            ],
            "signature": "collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)",
            "tag": "@throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null",
            "tag_type": "throwsTag",
            "prompt": "Signature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: collect(java.util.Iterator inputIterator,org.apache.commons.collections4.Transformer transformer,java.util.Collection outputCollection)\nJavadoc: @throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null\nCondition:"
        },
        {
            "condition": "items==null",
            "parameters": [
                "'items'"
            ],
            "signature": "FixedOrderComparator(java.util.List items)",
            "tag": "@throws NullPointerException if the list is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: FixedOrderComparator(java.util.List items)\nJavadoc: @throws NullPointerException if the list is null\nCondition:"
        },
        {
            "condition": "true",
            "parameters": [
                "'k1'",
                " 'v1'",
                " 'k2'",
                " 'v2'",
                " 'k3'",
                " 'v3'",
                " 'k4'",
                " 'v4'",
                " 'k5'",
                " 'v5'"
            ],
            "signature": "of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)",
            "tag": "@throws UnsupportedOperationException always.",
            "tag_type": "throwsTag",
            "prompt": "Signature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)\nJavadoc: @throws UnsupportedOperationException always.\nCondition:"
        },
        {
            "condition": "sigma<=0",
            "parameters": [
                "'mean'",
                " 'sigma'"
            ],
            "signature": "Gaussian(double mean,double sigma)",
            "tag": "@throws NotStrictlyPositiveException if sigma <= 0.",
            "tag_type": "throwsTag",
            "prompt": "Signature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: Gaussian(double mean,double sigma)\nJavadoc: @throws NotStrictlyPositiveException if sigma <= 0.\nCondition:"
        },
        {
            "condition": "a==null || b==null || c==null",
            "parameters": [
                "'a'",
                " 'b'",
                " 'c'"
            ],
            "signature": "collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)",
            "tag": "@throws NullPointerException if either collection or the comparator is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,java.util.Comparator c)\nJavadoc: @throws NullPointerException if either collection or the comparator is null\nCondition:"
        },
        {
            "condition": "(first.getLength() == second.getLength()) == false",
            "parameters": [
                "'first'",
                " 'second'"
            ],
            "signature": "crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)",
            "tag": "@throws DimensionMismatchException if the length of the two chromosomes is different",
            "tag_type": "throwsTag",
            "prompt": "Signature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: crossover(org.apache.commons.math3.genetics.Chromosome first,org.apache.commons.math3.genetics.Chromosome second)\nJavadoc: @throws DimensionMismatchException if the length of the two chromosomes is different\nCondition:"
        },
        {
            "condition": "collection==null || enumeration==null",
            "parameters": [
                "'collection'",
                " 'enumeration'"
            ],
            "signature": "addAll(java.util.Collection collection,java.util.Enumeration enumeration)",
            "tag": "@throws NullPointerException if the collection or enumeration is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: addAll(java.util.Collection collection,java.util.Enumeration enumeration)\nJavadoc: @throws NullPointerException if the collection or enumeration is null\nCondition:"
        },
        {
            "condition": "mean<=0",
            "parameters": [
                "'mean'"
            ],
            "signature": "nextPoisson(double mean)",
            "tag": "@throws NotStrictlyPositiveException if len <= 0",
            "tag_type": "throwsTag",
            "prompt": "Signature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: nextPoisson(double mean)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition:"
        },
        {
            "condition": "numberOfSuccesses>populationSize || sampleSize>populationSize",
            "parameters": [
                "'populationSize'",
                " 'numberOfSuccesses'",
                " 'sampleSize'"
            ],
            "signature": "nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)",
            "tag": "@throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.",
            "tag_type": "throwsTag",
            "prompt": "Signature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize.\nCondition:"
        },
        {
            "condition": "closures==null",
            "parameters": [
                "'closures'"
            ],
            "signature": "chainedClosure(java.util.Collection closures)",
            "tag": "@throws NullPointerException if the closures collection is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: chainedClosure(java.util.Collection closures)\nJavadoc: @throws NullPointerException if the closures collection is null\nCondition:"
        },
        {
            "condition": "other==null",
            "parameters": [
                "'other'"
            ],
            "signature": "collate(java.lang.Iterable other)",
            "tag": "@throws NullPointerException if other is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: collate(java.lang.Iterable other)\nJavadoc: @throws NullPointerException if other is null\nCondition:"
        },
        {
            "condition": "items==null",
            "parameters": [
                "'items'"
            ],
            "signature": "FixedOrderComparator(java.lang.Object[] items)",
            "tag": "@throws NullPointerException if the array is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: FixedOrderComparator(java.lang.Object[] items)\nJavadoc: @throws NullPointerException if the array is null\nCondition:"
        },
        {
            "condition": "size<=0",
            "parameters": [
                "'iterator'",
                " 'size'"
            ],
            "signature": "paddedPartition(java.util.Iterator iterator,int size)",
            "tag": "@throws IllegalArgumentException if size is nonpositive",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: paddedPartition(java.util.Iterator iterator,int size)\nJavadoc: @throws IllegalArgumentException if size is nonpositive\nCondition:"
        },
        {
            "condition": "a.length==0",
            "parameters": [
                "'a'"
            ],
            "signature": "max(java.lang.Double[] a)",
            "tag": "@throws ArrayIndexOutOfBoundsException if the array has length 0",
            "tag_type": "throwsTag",
            "prompt": "Signature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: max(java.lang.Double[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition:"
        },
        {
            "condition": "bag==null",
            "parameters": [
                "'bag'"
            ],
            "signature": "synchronizedBag(org.apache.commons.collections4.Bag bag)",
            "tag": "@throws NullPointerException if the Bag is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: synchronizedBag(org.apache.commons.collections4.Bag bag)\nJavadoc: @throws NullPointerException if the Bag is null\nCondition:"
        },
        {
            "condition": "divisor==null",
            "parameters": [
                "'divisor'"
            ],
            "signature": "divide(org.apache.commons.math3.complex.Complex divisor)",
            "tag": "@throws NullArgumentException if divisor is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: divide(org.apache.commons.math3.complex.Complex divisor)\nJavadoc: @throws NullArgumentException if divisor is null.\nCondition:"
        },
        {
            "condition": "a==null || b==null",
            "parameters": [
                "'a'",
                " 'b'",
                " 'includeDuplicates'"
            ],
            "signature": "collate(java.lang.Iterable a,java.lang.Iterable b,boolean includeDuplicates)",
            "tag": "@throws NullPointerException if either collection is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: collate(java.lang.Iterable a,java.lang.Iterable b,boolean includeDuplicates)\nJavadoc: @throws NullPointerException if either collection is null\nCondition:"
        },
        {
            "condition": "maximalOrder<2",
            "parameters": [
                "'relativeAccuracy'",
                " 'absoluteAccuracy'",
                " 'maximalOrder'"
            ],
            "signature": "org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver(double relativeAccuracy, double absoluteAccuracy, int maximalOrder)",
            "tag": "@throws NumberIsTooSmallException maximal order is lower than 2.",
            "tag_type": "throwsTag",
            "prompt": "Signature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver(double relativeAccuracy, double absoluteAccuracy, int maximalOrder)\nJavadoc: @throws NumberIsTooSmallException maximal order is lower than 2.\nCondition:"
        },
        {
            "condition": "(receiverObjectID.containsVertex(vertex))==false",
            "parameters": [
                "'vertex'"
            ],
            "signature": "edgesOf(java.lang.Object vertex)",
            "tag": "@throws IllegalArgumentException if vertex is not found in the graph.",
            "tag_type": "throwsTag",
            "prompt": "Signature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: edgesOf(java.lang.Object vertex)\nJavadoc: @throws IllegalArgumentException if vertex is not found in the graph.\nCondition:"
        },
        {
            "condition": "a.length==0",
            "parameters": [
                "'a'"
            ],
            "signature": "min(long[] a)",
            "tag": "@throws ArrayIndexOutOfBoundsException if the array has length 0",
            "tag_type": "throwsTag",
            "prompt": "Signature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: min(long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition:"
        },
        {
            "condition": "predicate==null || trueClosure==null || falseClosure==null",
            "parameters": [
                "'predicate'",
                " 'trueClosure'",
                " 'falseClosure'"
            ],
            "signature": "ifClosure(org.apache.commons.collections4.Predicate<? predicate, org.apache.commons.collections4.Closure<? trueClosure, org.apache.commons.collections4.Closure<? falseClosure)",
            "tag": "@throws NullPointerException any argument is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: ifClosure(org.apache.commons.collections4.Predicate<? predicate, org.apache.commons.collections4.Closure<? trueClosure, org.apache.commons.collections4.Closure<? falseClosure)\nJavadoc: @throws NullPointerException any argument is null.\nCondition:"
        },
        {
            "condition": "v.getDimension() != receiverObjectID.getDimension()",
            "parameters": [
                "'v'"
            ],
            "signature": "getLInfDistance(org.apache.commons.math3.linear.RealVector v)",
            "tag": "@throws DimensionMismatchException if v is not the same size as this vector.",
            "tag_type": "throwsTag",
            "prompt": "Signature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: getLInfDistance(org.apache.commons.math3.linear.RealVector v)\nJavadoc: @throws DimensionMismatchException if v is not the same size as this vector.\nCondition:"
        },
        {
            "condition": "a.length==0 || c.length==0",
            "parameters": [
                "'a'",
                " 'c'",
                " 'z'"
            ],
            "signature": "evaluate(double[] a,double[] c,double z)",
            "tag": "@throws NoDataException if any array has zero length.",
            "tag_type": "throwsTag",
            "prompt": "Signature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: evaluate(double[] a,double[] c,double z)\nJavadoc: @throws NoDataException if any array has zero length.\nCondition:"
        },
        {
            "condition": "java.util.Arrays.stream(predicates).anyMatch(e -> e==null) || java.util.Arrays.stream(closures).anyMatch(e -> e==null)",
            "parameters": [
                "'predicates'",
                " 'closures'"
            ],
            "signature": "switchClosure(org.apache.commons.collections4.Predicate[] predicates,org.apache.commons.collections4.Closure[] closures)",
            "tag": "@throws NullPointerException if any element in the arrays is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: switchClosure(org.apache.commons.collections4.Predicate[] predicates,org.apache.commons.collections4.Closure[] closures)\nJavadoc: @throws NullPointerException if any element in the arrays is null\nCondition:"
        },
        {
            "condition": "index>=parameters",
            "parameters": [
                "'parameters'",
                " 'order'",
                " 'index'",
                " 'value'"
            ],
            "signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructure(int parameters, int order, int index, double value)",
            "tag": "@throws NumberIsTooLargeException index >= parameters.",
            "tag_type": "throwsTag",
            "prompt": "Signature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: org.apache.commons.math3.analysis.differentiation.DerivativeStructure(int parameters, int order, int index, double value)\nJavadoc: @throws NumberIsTooLargeException index >= parameters.\nCondition:"
        },
        {
            "condition": "a.length==0 || c.length==0",
            "parameters": [
                "'a'",
                " 'c'"
            ],
            "signature": "verifyInputArray(double[] a,double[] c)",
            "tag": "@throws NoDataException if any array has zero length.",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: verifyInputArray(double[] a,double[] c)\nJavadoc: @throws NoDataException if any array has zero length.\nCondition:"
        },
        {
            "condition": "fraction==null",
            "parameters": [
                "'fraction'"
            ],
            "signature": "divide(org.apache.commons.math3.fraction.BigFraction fraction)",
            "tag": "@throws NullArgumentException if the fraction is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: divide(org.apache.commons.math3.fraction.BigFraction fraction)\nJavadoc: @throws NullArgumentException if the fraction is null.\nCondition:"
        },
        {
            "condition": "obj==null || ! (obj instanceof boolean[] || obj instanceof double[] || obj instanceof int[] || obj instanceof long[] || obj instanceof Object[])",
            "parameters": [
                "'obj'"
            ],
            "signature": "toString(java.lang.Object obj)",
            "tag": "@throws IllegalArgumentException if obj is null or is not one of the types mentioned above.",
            "tag_type": "throwsTag",
            "prompt": "Signature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: toString(java.lang.Object obj)\nJavadoc: @throws IllegalArgumentException if obj is null or is not one of the types mentioned above.\nCondition:"
        },
        {
            "condition": "MathArrays.checkOrder(x)==false",
            "parameters": [
                "'x'",
                " 'y'"
            ],
            "signature": "StepFunction(double[] x,double[] y)",
            "tag": "@throws NonMonotonicSequenceException if the x array is not sorted in strictly increasing order.",
            "tag_type": "throwsTag",
            "prompt": "Signature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: StepFunction(double[] x,double[] y)\nJavadoc: @throws NonMonotonicSequenceException if the x array is not sorted in strictly increasing order.\nCondition:"
        },
        {
            "condition": "min<=max",
            "parameters": [
                "'f'",
                " 'min'",
                " 'max'",
                " 'n'"
            ],
            "signature": "sample(org.apache.commons.math3.analysis.UnivariateFunction f,double min,double max,int n)",
            "tag": "@throws NumberIsTooLargeException if the lower bound min is greater than, or equal to the upper bound max.",
            "tag_type": "throwsTag",
            "prompt": "Signature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: sample(org.apache.commons.math3.analysis.UnivariateFunction f,double min,double max,int n)\nJavadoc: @throws NumberIsTooLargeException if the lower bound min is greater than, or equal to the upper bound max.\nCondition:"
        },
        {
            "condition": "e<0",
            "parameters": [
                "'k'",
                " 'e'"
            ],
            "signature": "pow(java.math.BigInteger k,long e)",
            "tag": "@throws NotPositiveException if e < 0.",
            "tag_type": "throwsTag",
            "prompt": "Signature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: pow(java.math.BigInteger k,long e)\nJavadoc: @throws NotPositiveException if e < 0.\nCondition:"
        },
        {
            "condition": "(receiverObjectID.canCarryTreasure()) == false",
            "parameters": [
                ""
            ],
            "signature": "getTreasureAmount()",
            "tag": "@throws IllegalStateException if this is not a treasure carrying unit.",
            "tag_type": "throwsTag",
            "prompt": "Signature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: getTreasureAmount()\nJavadoc: @throws IllegalStateException if this is not a treasure carrying unit.\nCondition:"
        },
        {
            "condition": "k>n",
            "parameters": [
                "'n'",
                " 'k'"
            ],
            "signature": "stirlingS2(int n,int k)",
            "tag": "@throws NumberIsTooLargeException if k > n.",
            "tag_type": "throwsTag",
            "prompt": "Signature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: stirlingS2(int n,int k)\nJavadoc: @throws NumberIsTooLargeException if k > n.\nCondition:"
        },
        {
            "condition": "(countMap.isEmpty()) == false",
            "parameters": [
                "'countMap'"
            ],
            "signature": "ConcurrentHashMultiset(java.util.concurrent.ConcurrentMap countMap)",
            "tag": "@throws IllegalArgumentException if countMap is not empty",
            "tag_type": "throwsTag",
            "prompt": "Signature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: ConcurrentHashMultiset(java.util.concurrent.ConcurrentMap countMap)\nJavadoc: @throws IllegalArgumentException if countMap is not empty\nCondition:"
        },
        {
            "condition": "n<0",
            "parameters": [
                "'n'"
            ],
            "signature": "factorial(int n)",
            "tag": "@throws NotPositiveException if n < 0.",
            "tag_type": "throwsTag",
            "prompt": "Signature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: factorial(int n)\nJavadoc: @throws NotPositiveException if n < 0.\nCondition:"
        },
        {
            "condition": "true",
            "parameters": [
                "'k1'",
                " 'v1'",
                " 'k2'",
                " 'v2'",
                " 'k3'",
                " 'v3'",
                " 'k4'",
                " 'v4'"
            ],
            "signature": "of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4)",
            "tag": "@throws UnsupportedOperationException always.",
            "tag_type": "throwsTag",
            "prompt": "Signature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4)\nJavadoc: @throws UnsupportedOperationException always.\nCondition:"
        },
        {
            "condition": "n<=0 || minimalIterationCount<=0",
            "parameters": [
                "'n'",
                " 'relativeAccuracy'",
                " 'absoluteAccuracy'",
                " 'minimalIterationCount'",
                " 'maximalIterationCount'"
            ],
            "signature": "IterativeLegendreGaussIntegrator(int n,double relativeAccuracy,double absoluteAccuracy,int minimalIterationCount,int maximalIterationCount)",
            "tag": "@throws NotStrictlyPositiveException if minimal number of iterations or number of points are not strictly positive.",
            "tag_type": "throwsTag",
            "prompt": "Signature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: IterativeLegendreGaussIntegrator(int n,double relativeAccuracy,double absoluteAccuracy,int minimalIterationCount,int maximalIterationCount)\nJavadoc: @throws NotStrictlyPositiveException if minimal number of iterations or number of points are not strictly positive.\nCondition:"
        },
        {
            "condition": "position<0",
            "parameters": [
                "'iterator'",
                " 'position'"
            ],
            "signature": "get(java.util.Iterator iterator,int position)",
            "tag": "@throws IndexOutOfBoundsException if position is negative or greater than or equal to the number of elements remaining in iterator",
            "tag_type": "throwsTag",
            "prompt": "Signature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: get(java.util.Iterator iterator,int position)\nJavadoc: @throws IndexOutOfBoundsException if position is negative or greater than or equal to the number of elements remaining in iterator\nCondition:"
        },
        {
            "condition": "start<0 || start>=bytes.length",
            "parameters": [
                "'bytes'",
                " 'start'",
                " 'len'"
            ],
            "signature": "nextBytes(byte[] bytes,int start,int len)",
            "tag": "@throws OutOfRangeException if start < 0 or start >= bytes.length.",
            "tag_type": "throwsTag",
            "prompt": "Signature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: nextBytes(byte[] bytes,int start,int len)\nJavadoc: @throws OutOfRangeException if start < 0 or start >= bytes.length.\nCondition:"
        },
        {
            "condition": "maximalIterationCount>receiverObjectID.SIMPSON_MAX_ITERATIONS_COUNT",
            "parameters": [
                "'minimalIterationCount'",
                " 'maximalIterationCount'"
            ],
            "signature": "SimpsonIntegrator(int minimalIterationCount,int maximalIterationCount)",
            "tag": "@throws NumberIsTooLargeException if maximal number of iterations is greater than SIMPSON_MAX_ITERATIONS_COUNT",
            "tag_type": "throwsTag",
            "prompt": "Signature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: SimpsonIntegrator(int minimalIterationCount,int maximalIterationCount)\nJavadoc: @throws NumberIsTooLargeException if maximal number of iterations is greater than SIMPSON_MAX_ITERATIONS_COUNT\nCondition:"
        },
        {
            "condition": "map.isEmpty()",
            "parameters": [
                "'map'",
                " 'scanUntilRemovable'"
            ],
            "signature": "LRUMap(java.util.Map map,boolean scanUntilRemovable)",
            "tag": "@throws IllegalArgumentException if the map is empty",
            "tag_type": "throwsTag",
            "prompt": "Signature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: LRUMap(java.util.Map map,boolean scanUntilRemovable)\nJavadoc: @throws IllegalArgumentException if the map is empty\nCondition:"
        },
        {
            "condition": "receiverObjectID.contains(sourceVertex)==false || receiverObjectID.contains(targetVertex)==false",
            "parameters": [
                "'sourceVertex'",
                " 'targetVertex'",
                " 'e'"
            ],
            "signature": "addEdge(java.lang.Object sourceVertex,java.lang.Object targetVertex,java.lang.Object e)",
            "tag": "@throws IllegalArgumentException if source or target vertices are not found in the graph.",
            "tag_type": "throwsTag",
            "prompt": "Signature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: addEdge(java.lang.Object sourceVertex,java.lang.Object targetVertex,java.lang.Object e)\nJavadoc: @throws IllegalArgumentException if source or target vertices are not found in the graph.\nCondition:"
        },
        {
            "condition": "collection==null",
            "parameters": [
                "'collection'"
            ],
            "signature": "extractSingleton(java.util.Collection collection)",
            "tag": "@throws NullPointerException if collection is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: extractSingleton(java.util.Collection collection)\nJavadoc: @throws NullPointerException if collection is null\nCondition:"
        },
        {
            "condition": "receiverObjectID.isLocked()",
            "parameters": [
                "'unknownObjectBehavior'"
            ],
            "signature": "setUnknownObjectBehavior(org.apache.commons.collections4.comparators.FixedOrderComparator.UnknownObjectBehavior unknownObjectBehavior)",
            "tag": "@throws UnsupportedOperationException if a comparison has been performed",
            "tag_type": "throwsTag",
            "prompt": "Signature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: setUnknownObjectBehavior(org.apache.commons.collections4.comparators.FixedOrderComparator.UnknownObjectBehavior unknownObjectBehavior)\nJavadoc: @throws UnsupportedOperationException if a comparison has been performed\nCondition:"
        },
        {
            "condition": "x.length==0 || y.length==0",
            "parameters": [
                "'x'",
                " 'y'"
            ],
            "signature": "StepFunction(double[] x,double[] y)",
            "tag": "@throws NoDataException if x or y are zero-length.",
            "tag_type": "throwsTag",
            "prompt": "Signature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: StepFunction(double[] x,double[] y)\nJavadoc: @throws NoDataException if x or y are zero-length.\nCondition:"
        },
        {
            "condition": "classToInstantiate==null",
            "parameters": [
                "'classToInstantiate'",
                " 'paramTypes'",
                " 'args'"
            ],
            "signature": "instantiateFactory(java.lang.Class<T> classToInstantiate, java.lang.Class<?>[] paramTypes, java.lang.Object[] args)",
            "tag": "@throws NullPointerException the classToInstantiate is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: instantiateFactory(java.lang.Class<T> classToInstantiate, java.lang.Class<?>[] paramTypes, java.lang.Object[] args)\nJavadoc: @throws NullPointerException the classToInstantiate is null.\nCondition:"
        },
        {
            "condition": "n<0",
            "parameters": [
                "'n'"
            ],
            "signature": "factorialLog(int n)",
            "tag": "@throws NotPositiveException if n < 0.",
            "tag_type": "throwsTag",
            "prompt": "Signature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: factorialLog(int n)\nJavadoc: @throws NotPositiveException if n < 0.\nCondition:"
        },
        {
            "condition": "len<=0",
            "parameters": [
                "'len'"
            ],
            "signature": "nextSecureHexString(int len)",
            "tag": "@throws NotStrictlyPositiveException if len <= 0",
            "tag_type": "throwsTag",
            "prompt": "Signature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: nextSecureHexString(int len)\nJavadoc: @throws NotStrictlyPositiveException if len <= 0\nCondition:"
        },
        {
            "condition": "transformer==null",
            "parameters": [
                "'transformer'"
            ],
            "signature": "transform(org.apache.commons.collections4.Transformer transformer)",
            "tag": "@throws NullPointerException if transformer is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: transform(org.apache.commons.collections4.Transformer transformer)\nJavadoc: @throws NullPointerException if transformer is null\nCondition:"
        },
        {
            "condition": "length==0 || length<0",
            "parameters": [
                "'length'"
            ],
            "signature": "fixedLength(int length)",
            "tag": "@throws IllegalArgumentException if length is zero or negative",
            "tag_type": "throwsTag",
            "prompt": "Signature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: fixedLength(int length)\nJavadoc: @throws IllegalArgumentException if length is zero or negative\nCondition:"
        },
        {
            "condition": "xval.length==0 || yval.length==0",
            "parameters": [
                "'xval'",
                " 'yval'",
                " 'weights'"
            ],
            "signature": "smooth(double[] xval,double[] yval,double[] weights)",
            "tag": "@throws NoDataException if xval or yval has zero size.",
            "tag_type": "throwsTag",
            "prompt": "Signature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: smooth(double[] xval,double[] yval,double[] weights)\nJavadoc: @throws NoDataException if xval or yval has zero size.\nCondition:"
        },
        {
            "condition": "array.length==0",
            "parameters": [
                "'array'"
            ],
            "signature": "min(double[] array)",
            "tag": "@throws IllegalArgumentException if array is empty",
            "tag_type": "throwsTag",
            "prompt": "Signature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: min(double[] array)\nJavadoc: @throws IllegalArgumentException if array is empty\nCondition:"
        },
        {
            "condition": "n>20",
            "parameters": [
                "'n'"
            ],
            "signature": "factorial(int n)",
            "tag": "@throws MathArithmeticException if n > 20: The factorial value is too large to fit in a long.",
            "tag_type": "throwsTag",
            "prompt": "Signature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: factorial(int n)\nJavadoc: @throws MathArithmeticException if n > 20: The factorial value is too large to fit in a long.\nCondition:"
        },
        {
            "condition": "min(a)<0 || max(a)>=arange",
            "parameters": [
                "'a'",
                " 'arange'"
            ],
            "signature": "fn_inverse(int[] a,int arange)",
            "tag": "@throws IllegalArgumentException if a value of a is outside of arange",
            "tag_type": "throwsTag",
            "prompt": "Signature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: fn_inverse(int[] a,int arange)\nJavadoc: @throws IllegalArgumentException if a value of a is outside of arange\nCondition:"
        },
        {
            "condition": "!(g instanceof org.jgrapht.DirectedGraph) && !(g instanceof org.jgrapht.UndirectedGraph)",
            "parameters": [
                "'g'"
            ],
            "signature": "undirectedGraph(org.jgrapht.Graph g)",
            "tag": "@throws IllegalArgumentException if the graph is neither DirectedGraph nor UndirectedGraph.",
            "tag_type": "throwsTag",
            "prompt": "Signature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: undirectedGraph(org.jgrapht.Graph g)\nJavadoc: @throws IllegalArgumentException if the graph is neither DirectedGraph nor UndirectedGraph.\nCondition:"
        },
        {
            "condition": "numberOfSuccesses<0",
            "parameters": [
                "'populationSize'",
                " 'numberOfSuccesses'",
                " 'sampleSize'"
            ],
            "signature": "nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)",
            "tag": "@throws NotPositiveException if numberOfSuccesses < 0.",
            "tag_type": "throwsTag",
            "prompt": "Signature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: nextHypergeometric(int populationSize,int numberOfSuccesses,int sampleSize)\nJavadoc: @throws NotPositiveException if numberOfSuccesses < 0.\nCondition:"
        },
        {
            "condition": "initialSize<0 || initialSize>maxSize",
            "parameters": [
                "'maxSize'",
                " 'initialSize'",
                " 'loadFactor'",
                " 'scanUntilRemovable'"
            ],
            "signature": "LRUMap(int maxSize,int initialSize,float loadFactor,boolean scanUntilRemovable)",
            "tag": "@throws IllegalArgumentException if the initial size is negative or larger than the maximum size",
            "tag_type": "throwsTag",
            "prompt": "Signature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: LRUMap(int maxSize,int initialSize,float loadFactor,boolean scanUntilRemovable)\nJavadoc: @throws IllegalArgumentException if the initial size is negative or larger than the maximum size\nCondition:"
        },
        {
            "condition": "bg==null",
            "parameters": [
                "'bg'"
            ],
            "signature": "multiply(java.math.BigInteger bg)",
            "tag": "@throws NullArgumentException if bg is null.",
            "tag_type": "throwsTag",
            "prompt": "Signature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: multiply(java.math.BigInteger bg)\nJavadoc: @throws NullArgumentException if bg is null.\nCondition:"
        },
        {
            "condition": "i==0",
            "parameters": [
                "'i'"
            ],
            "signature": "divide(int i)",
            "tag": "@throws MathArithmeticException if the fraction to divide by is zero",
            "tag_type": "throwsTag",
            "prompt": "Signature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: divide(int i)\nJavadoc: @throws MathArithmeticException if the fraction to divide by is zero\nCondition:"
        },
        {
            "condition": "predicates.stream().anyMatch(e -> e==null)",
            "parameters": [
                "'predicates'"
            ],
            "signature": "anyPredicate(java.util.Collection predicates)",
            "tag": "@throws NullPointerException if any predicate in the array is null",
            "tag_type": "throwsTag",
            "prompt": "Signature: anyPredicate(org.apache.commons.collections4.Predicate[] predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition: java.util.Arrays.stream(predicates).anyMatch(e -> e==null)\n\n###\n\nSignature: isEqualCollection(java.util.Collection a,java.util.Collection b,org.apache.commons.collections4.Equator equator)\nJavadoc: @throws NullPointerException if the equator is null\nCondition: equator==null\n\n###\n\nSignature: min(java.lang.Long[] a)\nJavadoc: @throws ArrayIndexOutOfBoundsException if the array has length 0\nCondition: a.length==0\n\n###\n\nSignature: orthogonal()\nJavadoc: @throws MathArithmeticException if the norm of the instance is null\nCondition: receiverObjectID.getNorm()==null\n\n###\n\nSignature: verifySequence(double lower,double initial,double upper)\nJavadoc: @throws NumberIsTooLargeException if lower >= initial or initial >= upper.\nCondition: lower>=initial || initial>=upper\n\n###\n\nSignature: collate(java.lang.Iterable other,java.util.Comparator comparator)\nJavadoc: @throws NullPointerException if other is null\nCondition: other==null\n\n###\n\nSignature: org.apache.commons.collections4.map.HashedMap(int initialCapacity, float loadFactor)\nJavadoc: @throws IllegalArgumentException the load factor is less than zero.\nCondition: loadFactor<0\n\n###\n\nSignature: compose(double... f)\nJavadoc: @throws DimensionMismatchException the number of derivatives in the array is not equal to getOrder() order + 1.\nCondition: f.length != receiverObjectID.getOrder() + 1\n\n###\n\nSignature: FieldRotation(org.apache.commons.math3.RealFieldElement[][] m,double threshold)\nJavadoc: @throws NotARotationMatrixException if the matrix is not a 3X3 matrix, or if it cannot be transformed into an orthogonal matrix with the given threshold, or if the determinant of the resulting orthogonal matrix is negative\nCondition: (m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)\n\n###\n\nSignature: AbstractPathElementList(org.jgrapht.Graph graph,int maxSize,org.jgrapht.alg.AbstractPathElementList elementList,java.lang.Object edge)\nJavadoc: @throws IllegalArgumentException if maxSize is negative or 0.\nCondition: maxSize<0 || maxSize==0\n\n###\n\nSignature: anyPredicate(java.util.Collection predicates)\nJavadoc: @throws NullPointerException if any predicate in the array is null\nCondition:"
        }
    ]
}